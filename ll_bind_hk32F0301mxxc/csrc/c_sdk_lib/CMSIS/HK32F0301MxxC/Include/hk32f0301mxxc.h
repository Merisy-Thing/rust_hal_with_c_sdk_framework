/*
 * HKMicroChip Limited (HKMicroChip) is supplying this software for use with Cortex-M0!
 * @file          hk32f0301mxxc.h
 * @brief         CMSIS HeaderFile
 * @version       0.9
 * @datatime      2022-11-12 11:27:04(GMT+8:00)
 * @note          Generated by HkSvdFileCon V1.0.4 from hk32f0301mxxc.svd 
 */

#ifndef __HK32F0301MxxC__
#define __HK32F0301MxxC__

#ifdef __cplusplus
extern "C" {
#endif
/*****************************************************************************************
*                              Interrupt Number Definition                               *
*****************************************************************************************/
typedef enum
{
/*********************** Cortex-M0 Processor Exceptions Numbers  ************************/
  NonMaskableInt_IRQn       = -14, /* 2 Non Maskable Interrupt */
  HardFault_IRQn            = -13, /* 3 Cortex-M0 Hard Fault Interrupt */
  SVC_IRQn                  = -5,  /* 11 Cortex-M0 SV Call Interrupt */
  PendSV_IRQn               = -2,  /* 14 Cortex-M0 Pend SV Interrupt */
  SysTick_IRQn              = -1,  /* 15 Cortex-M0 System Tick Interrupt */

/********************** HK32F0301MxxC specific Interrupt Numbers  ***********************/
  WWDG_IRQn                  = 0,  /* Window Watchdog interrupt */
  EXTI11_IRQn                = 2,  /* AWUT WKP */
  FLASH_IRQn                 = 3,  /* Flash global interrupt */
  RCC_IRQn                   = 4,  /* RCC global interrupt */
  EXTI0_IRQn                 = 5,  /* EXTI Line0 interrupt */
  EXTI1_IRQn                 = 6,  /* EXTI Line1 interrupt */
  EXTI2_IRQn                 = 7,  /* EXTI Line2 interrupt */
  EXTI3_IRQn                 = 8,  /* EXTI Line3 interrupt */
  EXTI4_IRQn                 = 9,  /* EXTI Line4 interrupt */
  EXTI5_IRQn                 = 10, /* EXTI Line5 interrupt */
  TIM1_BRK_IRQn              = 11, /* TIM1 Break interrupt */
  ADC1_IRQn                  = 12, /* ADC interrupt, combined with EXTI Line8 */
  TIM1_UP_TRG_COM_IRQn       = 13, /* TIM1 Update/Trigger Com interrupt */
  TIM1_CC_IRQn               = 14, /* TIM1 Capture/Compare interrupt */
  TIM2_IRQn                  = 15, /* TIM2 global interrupt */
  TIM6_IRQn                  = 17, /* TIM6 global interrupt */
  EXTI6_IRQn                 = 21, /* EXTI Line6 interrupt */
  EXTI7_IRQn                 = 22, /* EXTI Line7 interrupt */
  I2C_IRQn                   = 23, /* I2C global interrupt, combined with EXTI Line 10 */
  SPI_IRQn                   = 25, /* SPI global interrupt */
  UART1_IRQn                 = 27, /* UART1 global interrupt */
  UART2_IRQn                 = 28, /* UART2 global interrupt */
}IRQn_Type;
/*****************************************************************************************
*                         Processor and Core Peripheral Section                          *
*****************************************************************************************/
#define __CM0_REV                            0x0000                             /* Core Revision */
#define __NVIC_PRIO_BITS                     3                                  /* Number of Bits used for Priority Levels */
#define __Vendor_SysTickConfig               0                                  /* Set to 1 if different SysTick Config is used */
#define __MPU_PRESENT                        0                                  /* MPU present */
#define __FPU_PRESENT                        0                                  /* FPU present */
#define __MCU_ENDIAN                         little                             /* MCU endian */

#include "core_cm0.h"                        /* ARM Cortex-M0 processor and core peripherals */
#include "system_hk32f0301mxxc.h"            /* hk32f0301mxxc System */

#ifndef __IM                                 /* Fallback for older CMSIS versions */
  #define __IM   __I
#endif
#ifndef __OM                                 /* Fallback for older CMSIS versions */
  #define __OM   __O
#endif
#ifndef __IOM                                /* Fallback for older CMSIS versions */
  #define __IOM  __IO
#endif

/*****************************************************************************************
*                        Start of section using anonymous unions                         *
*****************************************************************************************/
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif

typedef enum {RESET = 0, SET = !RESET} FlagStatus, ITStatus;
typedef enum {DISABLE = 0, ENABLE = !DISABLE} FunctionalState;
#define IS_FUNCTIONAL_STATE(STATE) (((STATE) == DISABLE) || ((STATE) == ENABLE))
typedef enum {ERROR = 0, SUCCESS = !ERROR} ErrorStatus;

/*****************************************************************************************
*                                    Peripheral FLASH                                    *
*****************************************************************************************/
typedef struct{
  __IO uint32_t ACR;                    /* ACR */
  __O  uint32_t KEYR;                   /* KEYR */
  __O  uint32_t OPTKEYR;                /* OPTKEYR */
  __IO uint32_t SR;                     /* SR */
  __IO uint32_t CR;                     /* CR */
  __O  uint32_t AR;                     /* AR */
       uint16_t RESERVED1[2];
  __I  uint32_t OBR;                    /* OBR */
  __IO uint32_t WRPR;                   /* WRPR */
       uint16_t RESERVED2[40];
  __IO uint32_t INT_VEC_OFFSET;         /* INT_VEC_OFFSET */
}FLASH_TypeDef;

/************************************* FLASH->ACR  **************************************/
#define FLASH_ACR_LATENCY_Pos                 ((uint32_t)0)                     /* Latency */
#define FLASH_ACR_LATENCY_Mask                (((uint32_t)0x07) << 0)
#define FLASH_ACR_LATENCY                     FLASH_ACR_LATENCY_Mask
#define FLASH_ACR_LATENCY_0                   (((uint32_t)0x1))
#define FLASH_ACR_LATENCY_1                   (((uint32_t)0x2))
#define FLASH_ACR_LATENCY_2                   (((uint32_t)0x4))

/************************************ FLASH->KEYR  **************************************/
#define FLASH_KEYR_FKEYR_Pos                  ((uint32_t)0)                     /* Flash key */
#define FLASH_KEYR_FKEYR_Mask                 (((uint32_t)0xFFFFFFFF) << 0)
#define FLASH_KEYR_FKEYR                      FLASH_KEYR_FKEYR_Mask

#define FLASH_FKEY1                          ((uint32_t)0x45670123)        /*!< Flash program erase key1 */
#define FLASH_FKEY2                          ((uint32_t)0xCDEF89AB)        /*!< Flash program erase key2: used with FLASH_PEKEY1
                                                                              to unlock the write access to the FPEC.  */                                                           
#define FLASH_OPTKEY1                        ((uint32_t)0x45670123)        /*!< Flash option key1 */
#define FLASH_OPTKEY2                        ((uint32_t)0xCDEF89AB)        /*!< Flash option key2: used with FLASH_OPTKEY1 to
                                                                                unlock the write access to the option byte block */
/*********************************** FLASH->OPTKEYR  ************************************/
#define FLASH_OPTKEYR_OPTKEYR_Pos             ((uint32_t)0)                     /* Option byte key */
#define FLASH_OPTKEYR_OPTKEYR_Mask            (((uint32_t)0xFFFFFFFF) << 0)
#define FLASH_OPTKEYR_OPTKEYR                 FLASH_OPTKEYR_OPTKEYR_Mask

/************************************* FLASH->SR  ***************************************/
#define FLASH_SR_EOP_Pos                      ((uint32_t)5)                     /* End of operation */
#define FLASH_SR_EOP_Mask                     (((uint32_t)0x01) << 5)
#define FLASH_SR_EOP                          FLASH_SR_EOP_Mask
#define FLASH_SR_WRPRTERR_Pos                 ((uint32_t)4)                     /* Write protection error */
#define FLASH_SR_WRPRTERR_Mask                (((uint32_t)0x01) << 4)
#define FLASH_SR_WRPRTERR                     FLASH_SR_WRPRTERR_Mask
#define FLASH_SR_PGERR_Pos                    ((uint32_t)2)                     /* Programming error */
#define FLASH_SR_PGERR_Mask                   (((uint32_t)0x01) << 2)
#define FLASH_SR_PGERR                        FLASH_SR_PGERR_Mask
#define FLASH_SR_BSY_Pos                      ((uint32_t)0)                     /* Busy */
#define FLASH_SR_BSY_Mask                     (((uint32_t)0x01) << 0)
#define FLASH_SR_BSY                          FLASH_SR_BSY_Mask

/************************************* FLASH->CR  ***************************************/
#define FLASH_CR_EOPIE_Pos                    ((uint32_t)12)                    /* End of operation interrupt enable */
#define FLASH_CR_EOPIE_Mask                   (((uint32_t)0x01) << 12)
#define FLASH_CR_EOPIE                        FLASH_CR_EOPIE_Mask
#define FLASH_CR_ERRIE_Pos                    ((uint32_t)10)                    /* Error interrupt enable */
#define FLASH_CR_ERRIE_Mask                   (((uint32_t)0x01) << 10)
#define FLASH_CR_ERRIE                        FLASH_CR_ERRIE_Mask
#define FLASH_CR_OPTWRE_Pos                   ((uint32_t)9)                     /* Option byte write enable */
#define FLASH_CR_OPTWRE_Mask                  (((uint32_t)0x01) << 9)
#define FLASH_CR_OPTWRE                       FLASH_CR_OPTWRE_Mask
#define FLASH_CR_LOCK_Pos                     ((uint32_t)7)                     /* Lock */
#define FLASH_CR_LOCK_Mask                    (((uint32_t)0x01) << 7)
#define FLASH_CR_LOCK                         FLASH_CR_LOCK_Mask
#define FLASH_CR_STRT_Pos                     ((uint32_t)6)                     /* Start */
#define FLASH_CR_STRT_Mask                    (((uint32_t)0x01) << 6)
#define FLASH_CR_STRT                         FLASH_CR_STRT_Mask
#define FLASH_CR_OPTER_Pos                    ((uint32_t)5)                     /* Option byte erase */
#define FLASH_CR_OPTER_Mask                   (((uint32_t)0x01) << 5)
#define FLASH_CR_OPTER                        FLASH_CR_OPTER_Mask
#define FLASH_CR_OPTPG_Pos                    ((uint32_t)4)                     /* Option byte programming */
#define FLASH_CR_OPTPG_Mask                   (((uint32_t)0x01) << 4)
#define FLASH_CR_OPTPG                        FLASH_CR_OPTPG_Mask
#define FLASH_CR_MER_Pos                      ((uint32_t)2)                     /* Mass erase */
#define FLASH_CR_MER_Mask                     (((uint32_t)0x01) << 2)
#define FLASH_CR_MER                          FLASH_CR_MER_Mask
#define FLASH_CR_PER_Pos                      ((uint32_t)1)                     /* Page erase */
#define FLASH_CR_PER_Mask                     (((uint32_t)0x01) << 1)
#define FLASH_CR_PER                          FLASH_CR_PER_Mask
#define FLASH_CR_PG_Pos                       ((uint32_t)0)                     /* Programming */
#define FLASH_CR_PG_Mask                      (((uint32_t)0x01) << 0)
#define FLASH_CR_PG                           FLASH_CR_PG_Mask

/************************************* FLASH->AR  ***************************************/
#define FLASH_AR_FAR_Pos                      ((uint32_t)0)                     /* Flash Address */
#define FLASH_AR_FAR_Mask                     (((uint32_t)0xFFFFFFFF) << 0)
#define FLASH_AR_FAR                          FLASH_AR_FAR_Mask

/************************************* FLASH->OBR  **************************************/
#define FLASH_OBR_DATA1_Pos                   ((uint32_t)24)                    /* User data */
#define FLASH_OBR_DATA1_Mask                  (((uint32_t)0xFF) << 24)
#define FLASH_OBR_DATA1                       FLASH_OBR_DATA1_Mask
#define FLASH_OBR_DATA1_0                     (((uint32_t)0x1 << FLASH_OBR_DATA1_Pos))
#define FLASH_OBR_DATA1_1                     (((uint32_t)0x2 << FLASH_OBR_DATA1_Pos))
#define FLASH_OBR_DATA1_2                     (((uint32_t)0x4 << FLASH_OBR_DATA1_Pos))
#define FLASH_OBR_DATA1_3                     (((uint32_t)0x8 << FLASH_OBR_DATA1_Pos))
#define FLASH_OBR_DATA1_4                     (((uint32_t)0x10 << FLASH_OBR_DATA1_Pos))
#define FLASH_OBR_DATA1_5                     (((uint32_t)0x20 << FLASH_OBR_DATA1_Pos))
#define FLASH_OBR_DATA1_6                     (((uint32_t)0x40 << FLASH_OBR_DATA1_Pos))
#define FLASH_OBR_DATA1_7                     (((uint32_t)0x80 << FLASH_OBR_DATA1_Pos))
#define FLASH_OBR_DATA0_Pos                   ((uint32_t)16)                    /* User data */
#define FLASH_OBR_DATA0_Mask                  (((uint32_t)0xFF) << 16)
#define FLASH_OBR_DATA0                       FLASH_OBR_DATA0_Mask
#define FLASH_OBR_DATA0_0                     (((uint32_t)0x1 << FLASH_OBR_DATA0_Pos))
#define FLASH_OBR_DATA0_1                     (((uint32_t)0x2 << FLASH_OBR_DATA0_Pos))
#define FLASH_OBR_DATA0_2                     (((uint32_t)0x4 << FLASH_OBR_DATA0_Pos))
#define FLASH_OBR_DATA0_3                     (((uint32_t)0x8 << FLASH_OBR_DATA0_Pos))
#define FLASH_OBR_DATA0_4                     (((uint32_t)0x10 << FLASH_OBR_DATA0_Pos))
#define FLASH_OBR_DATA0_5                     (((uint32_t)0x20 << FLASH_OBR_DATA0_Pos))
#define FLASH_OBR_DATA0_6                     (((uint32_t)0x40 << FLASH_OBR_DATA0_Pos))
#define FLASH_OBR_DATA0_7                     (((uint32_t)0x80 << FLASH_OBR_DATA0_Pos))
#define FLASH_OBR_nRST_STOP_Pos               ((uint32_t)9)                     /* Enter the stop mode for a reset */
#define FLASH_OBR_nRST_STOP_Mask              (((uint32_t)0x01) << 9)
#define FLASH_OBR_nRST_STOP                   FLASH_OBR_nRST_STOP_Mask
#define FLASH_OBR_WDG_SW_Pos                  ((uint32_t)8)                     /* Select a software or hardware watchdog */
#define FLASH_OBR_WDG_SW_Mask                 (((uint32_t)0x01) << 8)
#define FLASH_OBR_WDG_SW                      FLASH_OBR_WDG_SW_Mask
#define FLASH_OBR_RDPRT_Pos                   ((uint32_t)1)                     /* Read protection level status */
#define FLASH_OBR_RDPRT_Mask                  (((uint32_t)0x03) << 1)
#define FLASH_OBR_RDPRT                       FLASH_OBR_RDPRT_Mask
#define FLASH_OBR_RDPRT_0                     (((uint32_t)0x1 << FLASH_OBR_RDPRT_Pos))
#define FLASH_OBR_RDPRT_1                     (((uint32_t)0x2 << FLASH_OBR_RDPRT_Pos))
#define FLASH_OBR_OPTERR_Pos                  ((uint32_t)0)                     /* Option byte error */
#define FLASH_OBR_OPTERR_Mask                 (((uint32_t)0x01) << 0)
#define FLASH_OBR_OPTERR                      FLASH_OBR_OPTERR_Mask

/************************************ FLASH->WRPR  **************************************/
#define FLASH_WRPR_WRP3_Pos                   ((uint32_t)24)                    /* Write protect */
#define FLASH_WRPR_WRP3_Mask                  (((uint32_t)0xFF) << 24)
#define FLASH_WRPR_WRP3                       FLASH_WRPR_WRP3_Mask
#define FLASH_WRPR_WRP3_0                     (((uint32_t)0x1 << FLASH_WRPR_WRP3_Pos))
#define FLASH_WRPR_WRP3_1                     (((uint32_t)0x2 << FLASH_WRPR_WRP3_Pos))
#define FLASH_WRPR_WRP3_2                     (((uint32_t)0x4 << FLASH_WRPR_WRP3_Pos))
#define FLASH_WRPR_WRP3_3                     (((uint32_t)0x8 << FLASH_WRPR_WRP3_Pos))
#define FLASH_WRPR_WRP3_4                     (((uint32_t)0x10 << FLASH_WRPR_WRP3_Pos))
#define FLASH_WRPR_WRP3_5                     (((uint32_t)0x20 << FLASH_WRPR_WRP3_Pos))
#define FLASH_WRPR_WRP3_6                     (((uint32_t)0x40 << FLASH_WRPR_WRP3_Pos))
#define FLASH_WRPR_WRP3_7                     (((uint32_t)0x80 << FLASH_WRPR_WRP3_Pos))
#define FLASH_WRPR_WRP2_Pos                   ((uint32_t)16)                    /* Write protect */
#define FLASH_WRPR_WRP2_Mask                  (((uint32_t)0xFF) << 16)
#define FLASH_WRPR_WRP2                       FLASH_WRPR_WRP2_Mask
#define FLASH_WRPR_WRP2_0                     (((uint32_t)0x1 << FLASH_WRPR_WRP2_Pos))
#define FLASH_WRPR_WRP2_1                     (((uint32_t)0x2 << FLASH_WRPR_WRP2_Pos))
#define FLASH_WRPR_WRP2_2                     (((uint32_t)0x4 << FLASH_WRPR_WRP2_Pos))
#define FLASH_WRPR_WRP2_3                     (((uint32_t)0x8 << FLASH_WRPR_WRP2_Pos))
#define FLASH_WRPR_WRP2_4                     (((uint32_t)0x10 << FLASH_WRPR_WRP2_Pos))
#define FLASH_WRPR_WRP2_5                     (((uint32_t)0x20 << FLASH_WRPR_WRP2_Pos))
#define FLASH_WRPR_WRP2_6                     (((uint32_t)0x40 << FLASH_WRPR_WRP2_Pos))
#define FLASH_WRPR_WRP2_7                     (((uint32_t)0x80 << FLASH_WRPR_WRP2_Pos))
#define FLASH_WRPR_WRP1_Pos                   ((uint32_t)8)                     /* Write protect */
#define FLASH_WRPR_WRP1_Mask                  (((uint32_t)0xFF) << 8)
#define FLASH_WRPR_WRP1                       FLASH_WRPR_WRP1_Mask
#define FLASH_WRPR_WRP1_0                     (((uint32_t)0x1 << FLASH_WRPR_WRP1_Pos))
#define FLASH_WRPR_WRP1_1                     (((uint32_t)0x2 << FLASH_WRPR_WRP1_Pos))
#define FLASH_WRPR_WRP1_2                     (((uint32_t)0x4 << FLASH_WRPR_WRP1_Pos))
#define FLASH_WRPR_WRP1_3                     (((uint32_t)0x8 << FLASH_WRPR_WRP1_Pos))
#define FLASH_WRPR_WRP1_4                     (((uint32_t)0x10 << FLASH_WRPR_WRP1_Pos))
#define FLASH_WRPR_WRP1_5                     (((uint32_t)0x20 << FLASH_WRPR_WRP1_Pos))
#define FLASH_WRPR_WRP1_6                     (((uint32_t)0x40 << FLASH_WRPR_WRP1_Pos))
#define FLASH_WRPR_WRP1_7                     (((uint32_t)0x80 << FLASH_WRPR_WRP1_Pos))
#define FLASH_WRPR_WRP0_Pos                   ((uint32_t)0)                     /* Write protect */
#define FLASH_WRPR_WRP0_Mask                  (((uint32_t)0xFF) << 0)
#define FLASH_WRPR_WRP0                       FLASH_WRPR_WRP0_Mask
#define FLASH_WRPR_WRP0_0                     (((uint32_t)0x1))
#define FLASH_WRPR_WRP0_1                     (((uint32_t)0x2))
#define FLASH_WRPR_WRP0_2                     (((uint32_t)0x4))
#define FLASH_WRPR_WRP0_3                     (((uint32_t)0x8))
#define FLASH_WRPR_WRP0_4                     (((uint32_t)0x10))
#define FLASH_WRPR_WRP0_5                     (((uint32_t)0x20))
#define FLASH_WRPR_WRP0_6                     (((uint32_t)0x40))
#define FLASH_WRPR_WRP0_7                     (((uint32_t)0x80))

/******************************* FLASH->INT_VEC_OFFSET  *********************************/
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_Pos  ((uint32_t)0)                  /* Interrupt Vector table address Offset */
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_Mask  (((uint32_t)0x3FFF) << 0)
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET   FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_Mask
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_0  (((uint32_t)0x1))
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_1  (((uint32_t)0x2))
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_2  (((uint32_t)0x4))
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_3  (((uint32_t)0x8))
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_4  (((uint32_t)0x10))
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_5  (((uint32_t)0x20))
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_6  (((uint32_t)0x40))
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_7  (((uint32_t)0x80))
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_8  (((uint32_t)0x100))
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_9  (((uint32_t)0x200))
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_10  (((uint32_t)0x400))
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_11  (((uint32_t)0x800))
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_12  (((uint32_t)0x1000))
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_13  (((uint32_t)0x2000))


/*****************************************************************************************
*                                     Peripheral OBR                                     *
*****************************************************************************************/
/** 
  * @brief Option Bytes Registers
  */
typedef struct
{
  __IO uint32_t USER_RDP;          /*!< FLASH option byte Read protection and user option,             Address offset: 0x00 */ 
  __IO uint32_t DATA;        /*!< User data byte 0 and 1 (stored in FLASH_OBR[23:16]), Address offset: 0x04 */
  __IO uint32_t WRP01;         /*!< FLASH option byte write protection 0 and 1,          Address offset: 0x08 */ 
  __IO uint32_t WRP23;         /*!< FLASH option byte write protection 2 and 3,          Address offset: 0x0C */  
  __IO uint32_t IWDG_CFGR;   /*!< IWDG_KEY and IWDG_RLR init value          				Address offset: 0x10 */
  __IO uint32_t DBG_CLK_LSI_LP_CTL;   /*!< DBG_CLK and LSI ,          								Address offset: 0x14 */
  __IO uint32_t NRST_SEL_KEY_BOR_LVL;      /*!< BOR_LVL and nreset pin,          							Address offset: 0x18 */  
} OB_TypeDef;

/******************  Bit definition for OB_RDP register  **********************/
#define OB_RDP_RDP_Pos       (0U)                                              
#define OB_RDP_RDP_Msk       (0xFFU << OB_RDP_RDP_Pos)                         /*!< 0x000000FF */
#define OB_RDP_RDP           OB_RDP_RDP_Msk                                    /*!< Read protection option byte */
#define OB_RDP_nRDP_Pos      (8U)                                              
#define OB_RDP_nRDP_Msk      (0x00U << OB_RDP_nRDP_Pos)                        /*!< 0x0000FF00 */
#define OB_RDP_nRDP          OB_RDP_nRDP_Msk                                   /*!< Read protection complemented option byte */

/******************  Bit definition for OB_USER register  *********************/
#define OB_USER_USER_Pos     (16U)                                             
#define OB_USER_USER_Msk     (0xFFU << OB_USER_USER_Pos)                       /*!< 0x00FF0000 */
#define OB_USER_USER         OB_USER_USER_Msk                                  /*!< User option byte */
#define OB_USER_nUSER_Pos    (24U)                                             
#define OB_USER_nUSER_Msk    (0x00U << OB_USER_nUSER_Pos)                      /*!< 0xFF000000 */
#define OB_USER_nUSER        OB_USER_nUSER_Msk                                 /*!< User complemented option byte */

/******************  Bit definition for OB_WRP0 register  *********************/
#define OB_WRP0_WRP0_Pos     (0U)                                              
#define OB_WRP0_WRP0_Msk     (0xFFU << OB_WRP0_WRP0_Pos)                       /*!< 0x000000FF */
#define OB_WRP0_WRP0         OB_WRP0_WRP0_Msk                                  /*!< Flash memory write protection option bytes */
#define OB_WRP0_nWRP0_Pos    (8U)                                              
#define OB_WRP0_nWRP0_Msk    (0x00U << OB_WRP0_nWRP0_Pos)                      /*!< 0x0000FF00 */
#define OB_WRP0_nWRP0        OB_WRP0_nWRP0_Msk                                 /*!< Flash memory write protection complemented option bytes */

/******************  Bit definition for OB_WRP1 register  *********************/
#define OB_WRP1_WRP1_Pos     (16U)                                             
#define OB_WRP1_WRP1_Msk     (0xFFU << OB_WRP1_WRP1_Pos)                       /*!< 0x00FF0000 */
#define OB_WRP1_WRP1         OB_WRP1_WRP1_Msk                                  /*!< Flash memory write protection option bytes */
#define OB_WRP1_nWRP1_Pos    (24U)                                             
#define OB_WRP1_nWRP1_Msk    (0x00U << OB_WRP1_nWRP1_Pos)                      /*!< 0xFF000000 */
#define OB_WRP1_nWRP1        OB_WRP1_nWRP1_Msk                                 /*!< Flash memory write protection complemented option bytes */



/******************************************************************************/
/*                                                                            */
/*                  Nested Vectored Interrupt Controller                      */
/*                                                                            */
/******************************************************************************/

/******************  Bit definition for NVIC_ISER register  *******************/
#define  NVIC_ISER_SETENA                    ((uint32_t)0xFFFFFFFF)        /*!< Interrupt set enable bits */
#define  NVIC_ISER_SETENA_0                  ((uint32_t)0x00000001)        /*!< bit 0 */
#define  NVIC_ISER_SETENA_1                  ((uint32_t)0x00000002)        /*!< bit 1 */
#define  NVIC_ISER_SETENA_2                  ((uint32_t)0x00000004)        /*!< bit 2 */
#define  NVIC_ISER_SETENA_3                  ((uint32_t)0x00000008)        /*!< bit 3 */
#define  NVIC_ISER_SETENA_4                  ((uint32_t)0x00000010)        /*!< bit 4 */
#define  NVIC_ISER_SETENA_5                  ((uint32_t)0x00000020)        /*!< bit 5 */
#define  NVIC_ISER_SETENA_6                  ((uint32_t)0x00000040)        /*!< bit 6 */
#define  NVIC_ISER_SETENA_7                  ((uint32_t)0x00000080)        /*!< bit 7 */
#define  NVIC_ISER_SETENA_8                  ((uint32_t)0x00000100)        /*!< bit 8 */
#define  NVIC_ISER_SETENA_9                  ((uint32_t)0x00000200)        /*!< bit 9 */
#define  NVIC_ISER_SETENA_10                 ((uint32_t)0x00000400)        /*!< bit 10 */
#define  NVIC_ISER_SETENA_11                 ((uint32_t)0x00000800)        /*!< bit 11 */
#define  NVIC_ISER_SETENA_12                 ((uint32_t)0x00001000)        /*!< bit 12 */
#define  NVIC_ISER_SETENA_13                 ((uint32_t)0x00002000)        /*!< bit 13 */
#define  NVIC_ISER_SETENA_14                 ((uint32_t)0x00004000)        /*!< bit 14 */
#define  NVIC_ISER_SETENA_15                 ((uint32_t)0x00008000)        /*!< bit 15 */
#define  NVIC_ISER_SETENA_16                 ((uint32_t)0x00010000)        /*!< bit 16 */
#define  NVIC_ISER_SETENA_17                 ((uint32_t)0x00020000)        /*!< bit 17 */
#define  NVIC_ISER_SETENA_18                 ((uint32_t)0x00040000)        /*!< bit 18 */
#define  NVIC_ISER_SETENA_19                 ((uint32_t)0x00080000)        /*!< bit 19 */
#define  NVIC_ISER_SETENA_20                 ((uint32_t)0x00100000)        /*!< bit 20 */
#define  NVIC_ISER_SETENA_21                 ((uint32_t)0x00200000)        /*!< bit 21 */
#define  NVIC_ISER_SETENA_22                 ((uint32_t)0x00400000)        /*!< bit 22 */
#define  NVIC_ISER_SETENA_23                 ((uint32_t)0x00800000)        /*!< bit 23 */
#define  NVIC_ISER_SETENA_24                 ((uint32_t)0x01000000)        /*!< bit 24 */
#define  NVIC_ISER_SETENA_25                 ((uint32_t)0x02000000)        /*!< bit 25 */
#define  NVIC_ISER_SETENA_26                 ((uint32_t)0x04000000)        /*!< bit 26 */
#define  NVIC_ISER_SETENA_27                 ((uint32_t)0x08000000)        /*!< bit 27 */
#define  NVIC_ISER_SETENA_28                 ((uint32_t)0x10000000)        /*!< bit 28 */
#define  NVIC_ISER_SETENA_29                 ((uint32_t)0x20000000)        /*!< bit 29 */
#define  NVIC_ISER_SETENA_30                 ((uint32_t)0x40000000)        /*!< bit 30 */
#define  NVIC_ISER_SETENA_31                 ((uint32_t)0x80000000)        /*!< bit 31 */

/******************  Bit definition for NVIC_ICER register  *******************/
#define  NVIC_ICER_CLRENA                   ((uint32_t)0xFFFFFFFF)        /*!< Interrupt clear-enable bits */
#define  NVIC_ICER_CLRENA_0                  ((uint32_t)0x00000001)        /*!< bit 0 */
#define  NVIC_ICER_CLRENA_1                  ((uint32_t)0x00000002)        /*!< bit 1 */
#define  NVIC_ICER_CLRENA_2                  ((uint32_t)0x00000004)        /*!< bit 2 */
#define  NVIC_ICER_CLRENA_3                  ((uint32_t)0x00000008)        /*!< bit 3 */
#define  NVIC_ICER_CLRENA_4                  ((uint32_t)0x00000010)        /*!< bit 4 */
#define  NVIC_ICER_CLRENA_5                  ((uint32_t)0x00000020)        /*!< bit 5 */
#define  NVIC_ICER_CLRENA_6                  ((uint32_t)0x00000040)        /*!< bit 6 */
#define  NVIC_ICER_CLRENA_7                  ((uint32_t)0x00000080)        /*!< bit 7 */
#define  NVIC_ICER_CLRENA_8                  ((uint32_t)0x00000100)        /*!< bit 8 */
#define  NVIC_ICER_CLRENA_9                  ((uint32_t)0x00000200)        /*!< bit 9 */
#define  NVIC_ICER_CLRENA_10                 ((uint32_t)0x00000400)        /*!< bit 10 */
#define  NVIC_ICER_CLRENA_11                 ((uint32_t)0x00000800)        /*!< bit 11 */
#define  NVIC_ICER_CLRENA_12                 ((uint32_t)0x00001000)        /*!< bit 12 */
#define  NVIC_ICER_CLRENA_13                 ((uint32_t)0x00002000)        /*!< bit 13 */
#define  NVIC_ICER_CLRENA_14                 ((uint32_t)0x00004000)        /*!< bit 14 */
#define  NVIC_ICER_CLRENA_15                 ((uint32_t)0x00008000)        /*!< bit 15 */
#define  NVIC_ICER_CLRENA_16                 ((uint32_t)0x00010000)        /*!< bit 16 */
#define  NVIC_ICER_CLRENA_17                 ((uint32_t)0x00020000)        /*!< bit 17 */
#define  NVIC_ICER_CLRENA_18                 ((uint32_t)0x00040000)        /*!< bit 18 */
#define  NVIC_ICER_CLRENA_19                 ((uint32_t)0x00080000)        /*!< bit 19 */
#define  NVIC_ICER_CLRENA_20                 ((uint32_t)0x00100000)        /*!< bit 20 */
#define  NVIC_ICER_CLRENA_21                 ((uint32_t)0x00200000)        /*!< bit 21 */
#define  NVIC_ICER_CLRENA_22                 ((uint32_t)0x00400000)        /*!< bit 22 */
#define  NVIC_ICER_CLRENA_23                 ((uint32_t)0x00800000)        /*!< bit 23 */
#define  NVIC_ICER_CLRENA_24                 ((uint32_t)0x01000000)        /*!< bit 24 */
#define  NVIC_ICER_CLRENA_25                 ((uint32_t)0x02000000)        /*!< bit 25 */
#define  NVIC_ICER_CLRENA_26                 ((uint32_t)0x04000000)        /*!< bit 26 */
#define  NVIC_ICER_CLRENA_27                 ((uint32_t)0x08000000)        /*!< bit 27 */
#define  NVIC_ICER_CLRENA_28                 ((uint32_t)0x10000000)        /*!< bit 28 */
#define  NVIC_ICER_CLRENA_29                 ((uint32_t)0x20000000)        /*!< bit 29 */
#define  NVIC_ICER_CLRENA_30                 ((uint32_t)0x40000000)        /*!< bit 30 */
#define  NVIC_ICER_CLRENA_31                 ((uint32_t)0x80000000)        /*!< bit 31 */

/******************  Bit definition for NVIC_ISPR register  *******************/
#define  NVIC_ISPR_SETPEND                   ((uint32_t)0xFFFFFFFF)        /*!< Interrupt set-pending bits */
#define  NVIC_ISPR_SETPEND_0                 ((uint32_t)0x00000001)        /*!< bit 0 */
#define  NVIC_ISPR_SETPEND_1                 ((uint32_t)0x00000002)        /*!< bit 1 */
#define  NVIC_ISPR_SETPEND_2                 ((uint32_t)0x00000004)        /*!< bit 2 */
#define  NVIC_ISPR_SETPEND_3                 ((uint32_t)0x00000008)        /*!< bit 3 */
#define  NVIC_ISPR_SETPEND_4                 ((uint32_t)0x00000010)        /*!< bit 4 */
#define  NVIC_ISPR_SETPEND_5                 ((uint32_t)0x00000020)        /*!< bit 5 */
#define  NVIC_ISPR_SETPEND_6                 ((uint32_t)0x00000040)        /*!< bit 6 */
#define  NVIC_ISPR_SETPEND_7                 ((uint32_t)0x00000080)        /*!< bit 7 */
#define  NVIC_ISPR_SETPEND_8                 ((uint32_t)0x00000100)        /*!< bit 8 */
#define  NVIC_ISPR_SETPEND_9                 ((uint32_t)0x00000200)        /*!< bit 9 */
#define  NVIC_ISPR_SETPEND_10                ((uint32_t)0x00000400)        /*!< bit 10 */
#define  NVIC_ISPR_SETPEND_11                ((uint32_t)0x00000800)        /*!< bit 11 */
#define  NVIC_ISPR_SETPEND_12                ((uint32_t)0x00001000)        /*!< bit 12 */
#define  NVIC_ISPR_SETPEND_13                ((uint32_t)0x00002000)        /*!< bit 13 */
#define  NVIC_ISPR_SETPEND_14                ((uint32_t)0x00004000)        /*!< bit 14 */
#define  NVIC_ISPR_SETPEND_15                ((uint32_t)0x00008000)        /*!< bit 15 */
#define  NVIC_ISPR_SETPEND_16                ((uint32_t)0x00010000)        /*!< bit 16 */
#define  NVIC_ISPR_SETPEND_17                ((uint32_t)0x00020000)        /*!< bit 17 */
#define  NVIC_ISPR_SETPEND_18                ((uint32_t)0x00040000)        /*!< bit 18 */
#define  NVIC_ISPR_SETPEND_19                ((uint32_t)0x00080000)        /*!< bit 19 */
#define  NVIC_ISPR_SETPEND_20                ((uint32_t)0x00100000)        /*!< bit 20 */
#define  NVIC_ISPR_SETPEND_21                ((uint32_t)0x00200000)        /*!< bit 21 */
#define  NVIC_ISPR_SETPEND_22                ((uint32_t)0x00400000)        /*!< bit 22 */
#define  NVIC_ISPR_SETPEND_23                ((uint32_t)0x00800000)        /*!< bit 23 */
#define  NVIC_ISPR_SETPEND_24                ((uint32_t)0x01000000)        /*!< bit 24 */
#define  NVIC_ISPR_SETPEND_25                ((uint32_t)0x02000000)        /*!< bit 25 */
#define  NVIC_ISPR_SETPEND_26                ((uint32_t)0x04000000)        /*!< bit 26 */
#define  NVIC_ISPR_SETPEND_27                ((uint32_t)0x08000000)        /*!< bit 27 */
#define  NVIC_ISPR_SETPEND_28                ((uint32_t)0x10000000)        /*!< bit 28 */
#define  NVIC_ISPR_SETPEND_29                ((uint32_t)0x20000000)        /*!< bit 29 */
#define  NVIC_ISPR_SETPEND_30                ((uint32_t)0x40000000)        /*!< bit 30 */
#define  NVIC_ISPR_SETPEND_31                ((uint32_t)0x80000000)        /*!< bit 31 */

/******************  Bit definition for NVIC_ICPR register  *******************/
#define  NVIC_ICPR_CLRPEND                   ((uint32_t)0xFFFFFFFF)        /*!< Interrupt clear-pending bits */
#define  NVIC_ICPR_CLRPEND_0                 ((uint32_t)0x00000001)        /*!< bit 0 */
#define  NVIC_ICPR_CLRPEND_1                 ((uint32_t)0x00000002)        /*!< bit 1 */
#define  NVIC_ICPR_CLRPEND_2                 ((uint32_t)0x00000004)        /*!< bit 2 */
#define  NVIC_ICPR_CLRPEND_3                 ((uint32_t)0x00000008)        /*!< bit 3 */
#define  NVIC_ICPR_CLRPEND_4                 ((uint32_t)0x00000010)        /*!< bit 4 */
#define  NVIC_ICPR_CLRPEND_5                 ((uint32_t)0x00000020)        /*!< bit 5 */
#define  NVIC_ICPR_CLRPEND_6                 ((uint32_t)0x00000040)        /*!< bit 6 */
#define  NVIC_ICPR_CLRPEND_7                 ((uint32_t)0x00000080)        /*!< bit 7 */
#define  NVIC_ICPR_CLRPEND_8                 ((uint32_t)0x00000100)        /*!< bit 8 */
#define  NVIC_ICPR_CLRPEND_9                 ((uint32_t)0x00000200)        /*!< bit 9 */
#define  NVIC_ICPR_CLRPEND_10                ((uint32_t)0x00000400)        /*!< bit 10 */
#define  NVIC_ICPR_CLRPEND_11                ((uint32_t)0x00000800)        /*!< bit 11 */
#define  NVIC_ICPR_CLRPEND_12                ((uint32_t)0x00001000)        /*!< bit 12 */
#define  NVIC_ICPR_CLRPEND_13                ((uint32_t)0x00002000)        /*!< bit 13 */
#define  NVIC_ICPR_CLRPEND_14                ((uint32_t)0x00004000)        /*!< bit 14 */
#define  NVIC_ICPR_CLRPEND_15                ((uint32_t)0x00008000)        /*!< bit 15 */
#define  NVIC_ICPR_CLRPEND_16                ((uint32_t)0x00010000)        /*!< bit 16 */
#define  NVIC_ICPR_CLRPEND_17                ((uint32_t)0x00020000)        /*!< bit 17 */
#define  NVIC_ICPR_CLRPEND_18                ((uint32_t)0x00040000)        /*!< bit 18 */
#define  NVIC_ICPR_CLRPEND_19                ((uint32_t)0x00080000)        /*!< bit 19 */
#define  NVIC_ICPR_CLRPEND_20                ((uint32_t)0x00100000)        /*!< bit 20 */
#define  NVIC_ICPR_CLRPEND_21                ((uint32_t)0x00200000)        /*!< bit 21 */
#define  NVIC_ICPR_CLRPEND_22                ((uint32_t)0x00400000)        /*!< bit 22 */
#define  NVIC_ICPR_CLRPEND_23                ((uint32_t)0x00800000)        /*!< bit 23 */
#define  NVIC_ICPR_CLRPEND_24                ((uint32_t)0x01000000)        /*!< bit 24 */
#define  NVIC_ICPR_CLRPEND_25                ((uint32_t)0x02000000)        /*!< bit 25 */
#define  NVIC_ICPR_CLRPEND_26                ((uint32_t)0x04000000)        /*!< bit 26 */
#define  NVIC_ICPR_CLRPEND_27                ((uint32_t)0x08000000)        /*!< bit 27 */
#define  NVIC_ICPR_CLRPEND_28                ((uint32_t)0x10000000)        /*!< bit 28 */
#define  NVIC_ICPR_CLRPEND_29                ((uint32_t)0x20000000)        /*!< bit 29 */
#define  NVIC_ICPR_CLRPEND_30                ((uint32_t)0x40000000)        /*!< bit 30 */
#define  NVIC_ICPR_CLRPEND_31                ((uint32_t)0x80000000)        /*!< bit 31 */

/******************  Bit definition for NVIC_IABR register  *******************/
#define  NVIC_IABR_ACTIVE                    ((uint32_t)0xFFFFFFFF)        /*!< Interrupt active flags */
#define  NVIC_IABR_ACTIVE_0                  ((uint32_t)0x00000001)        /*!< bit 0 */
#define  NVIC_IABR_ACTIVE_1                  ((uint32_t)0x00000002)        /*!< bit 1 */
#define  NVIC_IABR_ACTIVE_2                  ((uint32_t)0x00000004)        /*!< bit 2 */
#define  NVIC_IABR_ACTIVE_3                  ((uint32_t)0x00000008)        /*!< bit 3 */
#define  NVIC_IABR_ACTIVE_4                  ((uint32_t)0x00000010)        /*!< bit 4 */
#define  NVIC_IABR_ACTIVE_5                  ((uint32_t)0x00000020)        /*!< bit 5 */
#define  NVIC_IABR_ACTIVE_6                  ((uint32_t)0x00000040)        /*!< bit 6 */
#define  NVIC_IABR_ACTIVE_7                  ((uint32_t)0x00000080)        /*!< bit 7 */
#define  NVIC_IABR_ACTIVE_8                  ((uint32_t)0x00000100)        /*!< bit 8 */
#define  NVIC_IABR_ACTIVE_9                  ((uint32_t)0x00000200)        /*!< bit 9 */
#define  NVIC_IABR_ACTIVE_10                 ((uint32_t)0x00000400)        /*!< bit 10 */
#define  NVIC_IABR_ACTIVE_11                 ((uint32_t)0x00000800)        /*!< bit 11 */
#define  NVIC_IABR_ACTIVE_12                 ((uint32_t)0x00001000)        /*!< bit 12 */
#define  NVIC_IABR_ACTIVE_13                 ((uint32_t)0x00002000)        /*!< bit 13 */
#define  NVIC_IABR_ACTIVE_14                 ((uint32_t)0x00004000)        /*!< bit 14 */
#define  NVIC_IABR_ACTIVE_15                 ((uint32_t)0x00008000)        /*!< bit 15 */
#define  NVIC_IABR_ACTIVE_16                 ((uint32_t)0x00010000)        /*!< bit 16 */
#define  NVIC_IABR_ACTIVE_17                 ((uint32_t)0x00020000)        /*!< bit 17 */
#define  NVIC_IABR_ACTIVE_18                 ((uint32_t)0x00040000)        /*!< bit 18 */
#define  NVIC_IABR_ACTIVE_19                 ((uint32_t)0x00080000)        /*!< bit 19 */
#define  NVIC_IABR_ACTIVE_20                 ((uint32_t)0x00100000)        /*!< bit 20 */
#define  NVIC_IABR_ACTIVE_21                 ((uint32_t)0x00200000)        /*!< bit 21 */
#define  NVIC_IABR_ACTIVE_22                 ((uint32_t)0x00400000)        /*!< bit 22 */
#define  NVIC_IABR_ACTIVE_23                 ((uint32_t)0x00800000)        /*!< bit 23 */
#define  NVIC_IABR_ACTIVE_24                 ((uint32_t)0x01000000)        /*!< bit 24 */
#define  NVIC_IABR_ACTIVE_25                 ((uint32_t)0x02000000)        /*!< bit 25 */
#define  NVIC_IABR_ACTIVE_26                 ((uint32_t)0x04000000)        /*!< bit 26 */
#define  NVIC_IABR_ACTIVE_27                 ((uint32_t)0x08000000)        /*!< bit 27 */
#define  NVIC_IABR_ACTIVE_28                 ((uint32_t)0x10000000)        /*!< bit 28 */
#define  NVIC_IABR_ACTIVE_29                 ((uint32_t)0x20000000)        /*!< bit 29 */
#define  NVIC_IABR_ACTIVE_30                 ((uint32_t)0x40000000)        /*!< bit 30 */
#define  NVIC_IABR_ACTIVE_31                 ((uint32_t)0x80000000)        /*!< bit 31 */

/******************  Bit definition for NVIC_PRI0 register  *******************/
#define  NVIC_IPR0_PRI_0                     ((uint32_t)0x000000FF)        /*!< Priority of interrupt 0 */
#define  NVIC_IPR0_PRI_1                     ((uint32_t)0x0000FF00)        /*!< Priority of interrupt 1 */
#define  NVIC_IPR0_PRI_2                     ((uint32_t)0x00FF0000)        /*!< Priority of interrupt 2 */
#define  NVIC_IPR0_PRI_3                     ((uint32_t)0xFF000000)        /*!< Priority of interrupt 3 */

/******************  Bit definition for NVIC_PRI1 register  *******************/
#define  NVIC_IPR1_PRI_4                     ((uint32_t)0x000000FF)        /*!< Priority of interrupt 4 */
#define  NVIC_IPR1_PRI_5                     ((uint32_t)0x0000FF00)        /*!< Priority of interrupt 5 */
#define  NVIC_IPR1_PRI_6                     ((uint32_t)0x00FF0000)        /*!< Priority of interrupt 6 */
#define  NVIC_IPR1_PRI_7                     ((uint32_t)0xFF000000)        /*!< Priority of interrupt 7 */

/******************  Bit definition for NVIC_PRI2 register  *******************/
#define  NVIC_IPR2_PRI_8                     ((uint32_t)0x000000FF)        /*!< Priority of interrupt 8 */
#define  NVIC_IPR2_PRI_9                     ((uint32_t)0x0000FF00)        /*!< Priority of interrupt 9 */
#define  NVIC_IPR2_PRI_10                    ((uint32_t)0x00FF0000)        /*!< Priority of interrupt 10 */
#define  NVIC_IPR2_PRI_11                    ((uint32_t)0xFF000000)        /*!< Priority of interrupt 11 */

/******************  Bit definition for NVIC_PRI3 register  *******************/
#define  NVIC_IPR3_PRI_12                    ((uint32_t)0x000000FF)        /*!< Priority of interrupt 12 */
#define  NVIC_IPR3_PRI_13                    ((uint32_t)0x0000FF00)        /*!< Priority of interrupt 13 */
#define  NVIC_IPR3_PRI_14                    ((uint32_t)0x00FF0000)        /*!< Priority of interrupt 14 */
#define  NVIC_IPR3_PRI_15                    ((uint32_t)0xFF000000)        /*!< Priority of interrupt 15 */

/******************  Bit definition for NVIC_PRI4 register  *******************/
#define  NVIC_IPR4_PRI_16                    ((uint32_t)0x000000FF)        /*!< Priority of interrupt 16 */
#define  NVIC_IPR4_PRI_17                    ((uint32_t)0x0000FF00)        /*!< Priority of interrupt 17 */
#define  NVIC_IPR4_PRI_18                    ((uint32_t)0x00FF0000)        /*!< Priority of interrupt 18 */
#define  NVIC_IPR4_PRI_19                    ((uint32_t)0xFF000000)        /*!< Priority of interrupt 19 */

/******************  Bit definition for NVIC_PRI5 register  *******************/
#define  NVIC_IPR5_PRI_20                    ((uint32_t)0x000000FF)        /*!< Priority of interrupt 20 */
#define  NVIC_IPR5_PRI_21                    ((uint32_t)0x0000FF00)        /*!< Priority of interrupt 21 */
#define  NVIC_IPR5_PRI_22                    ((uint32_t)0x00FF0000)        /*!< Priority of interrupt 22 */
#define  NVIC_IPR5_PRI_23                    ((uint32_t)0xFF000000)        /*!< Priority of interrupt 23 */

/******************  Bit definition for NVIC_PRI6 register  *******************/
#define  NVIC_IPR6_PRI_24                    ((uint32_t)0x000000FF)        /*!< Priority of interrupt 24 */
#define  NVIC_IPR6_PRI_25                    ((uint32_t)0x0000FF00)        /*!< Priority of interrupt 25 */
#define  NVIC_IPR6_PRI_26                    ((uint32_t)0x00FF0000)        /*!< Priority of interrupt 26 */
#define  NVIC_IPR6_PRI_27                    ((uint32_t)0xFF000000)        /*!< Priority of interrupt 27 */

/******************  Bit definition for NVIC_PRI7 register  *******************/
#define  NVIC_IPR7_PRI_28                    ((uint32_t)0x000000FF)        /*!< Priority of interrupt 28 */
#define  NVIC_IPR7_PRI_29                    ((uint32_t)0x0000FF00)        /*!< Priority of interrupt 29 */
#define  NVIC_IPR7_PRI_30                    ((uint32_t)0x00FF0000)        /*!< Priority of interrupt 30 */
#define  NVIC_IPR7_PRI_31                    ((uint32_t)0xFF000000)        /*!< Priority of interrupt 31 */

/******************  Bit definition for SCB_CPUID register  *******************/
#define  SCB_CPUID_REVISION                  ((uint32_t)0x0000000F)        /*!< Implementation defined revision number */
#define  SCB_CPUID_PARTNO                    ((uint32_t)0x0000FFF0)        /*!< Number of processor within family */
#define  SCB_CPUID_Constant                  ((uint32_t)0x000F0000)        /*!< Reads as 0x0F */
#define  SCB_CPUID_VARIANT                   ((uint32_t)0x00F00000)        /*!< Implementation defined variant number */
#define  SCB_CPUID_IMPLEMENTER               ((uint32_t)0xFF000000)        /*!< Implementer code. ARM is 0x41 */

/*******************  Bit definition for SCB_ICSR register  *******************/
#define  SCB_ICSR_VECTACTIVE                 ((uint32_t)0x000001FF)        /*!< Active ISR number field */
#define  SCB_ICSR_RETTOBASE                  ((uint32_t)0x00000800)        /*!< All active exceptions minus the IPSR_current_exception yields the empty set */
#define  SCB_ICSR_VECTPENDING                ((uint32_t)0x003FF000)        /*!< Pending ISR number field */
#define  SCB_ICSR_ISRPENDING                 ((uint32_t)0x00400000)        /*!< Interrupt pending flag */
#define  SCB_ICSR_ISRPREEMPT                 ((uint32_t)0x00800000)        /*!< It indicates that a pending interrupt becomes active in the next running cycle */
#define  SCB_ICSR_PENDSTCLR                  ((uint32_t)0x02000000)        /*!< Clear pending SysTick bit */
#define  SCB_ICSR_PENDSTSET                  ((uint32_t)0x04000000)        /*!< Set pending SysTick bit */
#define  SCB_ICSR_PENDSVCLR                  ((uint32_t)0x08000000)        /*!< Clear pending pendSV bit */
#define  SCB_ICSR_PENDSVSET                  ((uint32_t)0x10000000)        /*!< Set pending pendSV bit */
#define  SCB_ICSR_NMIPENDSET                 ((uint32_t)0x80000000)        /*!< Set pending NMI bit */

/*******************  Bit definition for SCB_VTOR register  *******************/
#define  SCB_VTOR_TBLOFF                     ((uint32_t)0x1FFFFF80)        /*!< Vector table base offset field */
#define  SCB_VTOR_TBLBASE                    ((uint32_t)0x20000000)        /*!< Table base in code(0) or RAM(1) */

/*!<*****************  Bit definition for SCB_AIRCR register  *******************/
#define  SCB_AIRCR_VECTRESET                 ((uint32_t)0x00000001)        /*!< System Reset bit */
#define  SCB_AIRCR_VECTCLRACTIVE             ((uint32_t)0x00000002)        /*!< Clear active vector bit */
#define  SCB_AIRCR_SYSRESETREQ               ((uint32_t)0x00000004)        /*!< Requests chip control logic to generate a reset */

#define  SCB_AIRCR_PRIGROUP                  ((uint32_t)0x00000700)        /*!< PRIGROUP[2:0] bits (Priority group) */
#define  SCB_AIRCR_PRIGROUP_0                ((uint32_t)0x00000100)        /*!< Bit 0 */
#define  SCB_AIRCR_PRIGROUP_1                ((uint32_t)0x00000200)        /*!< Bit 1 */
#define  SCB_AIRCR_PRIGROUP_2                ((uint32_t)0x00000400)        /*!< Bit 2  */

/* prority group configuration */
#define  SCB_AIRCR_PRIGROUP0                 ((uint32_t)0x00000000)        /*!< Priority group=0 (7 bits of pre-emption priority, 1 bit of subpriority) */
#define  SCB_AIRCR_PRIGROUP1                 ((uint32_t)0x00000100)        /*!< Priority group=1 (6 bits of pre-emption priority, 2 bits of subpriority) */
#define  SCB_AIRCR_PRIGROUP2                 ((uint32_t)0x00000200)        /*!< Priority group=2 (5 bits of pre-emption priority, 3 bits of subpriority) */
#define  SCB_AIRCR_PRIGROUP3                 ((uint32_t)0x00000300)        /*!< Priority group=3 (4 bits of pre-emption priority, 4 bits of subpriority) */
#define  SCB_AIRCR_PRIGROUP4                 ((uint32_t)0x00000400)        /*!< Priority group=4 (3 bits of pre-emption priority, 5 bits of subpriority) */
#define  SCB_AIRCR_PRIGROUP5                 ((uint32_t)0x00000500)        /*!< Priority group=5 (2 bits of pre-emption priority, 6 bits of subpriority) */
#define  SCB_AIRCR_PRIGROUP6                 ((uint32_t)0x00000600)        /*!< Priority group=6 (1 bit of pre-emption priority, 7 bits of subpriority) */
#define  SCB_AIRCR_PRIGROUP7                 ((uint32_t)0x00000700)        /*!< Priority group=7 (no pre-emption priority, 8 bits of subpriority) */

#define  SCB_AIRCR_ENDIANESS                 ((uint32_t)0x00008000)        /*!< Data endianness bit */
#define  SCB_AIRCR_VECTKEY                   ((uint32_t)0xFFFF0000)        /*!< Register key (VECTKEY) - Reads as 0xFA05 (VECTKEYSTAT) */

/*******************  Bit definition for SCB_SCR register  ********************/
#define  SCB_SCR_SLEEPONEXIT                 ((uint8_t)0x02)               /*!< Sleep on exit bit */
#define  SCB_SCR_SLEEPDEEP                   ((uint8_t)0x04)               /*!< Sleep deep bit */
#define  SCB_SCR_SEVONPEND                   ((uint8_t)0x10)               /*!< Wake up from WFE */

/********************  Bit definition for SCB_CCR register  *******************/
#define  SCB_CCR_NONBASETHRDENA              ((uint16_t)0x0001)            /*!< Thread mode can be entered from any level in Handler mode by controlled return value */
#define  SCB_CCR_USERSETMPEND                ((uint16_t)0x0002)            /*!< Enables user code to write the Software Trigger Interrupt register to trigger (pend) a Main exception */
#define  SCB_CCR_UNALIGN_TRP                 ((uint16_t)0x0008)            /*!< Trap for unaligned access */
#define  SCB_CCR_DIV_0_TRP                   ((uint16_t)0x0010)            /*!< Trap on Divide by 0 */
#define  SCB_CCR_BFHFNMIGN                   ((uint16_t)0x0100)            /*!< Handlers running at priority -1 and -2 */
#define  SCB_CCR_STKALIGN                    ((uint16_t)0x0200)            /*!< On exception entry, the SP used prior to the exception is adjusted to be 8-byte aligned */

/*******************  Bit definition for SCB_SHPR register ********************/
#define  SCB_SHPR_PRI_N                      ((uint32_t)0x000000FF)        /*!< Priority of system handler 4,8, and 12. Mem Manage, reserved and Debug Monitor */
#define  SCB_SHPR_PRI_N1                     ((uint32_t)0x0000FF00)        /*!< Priority of system handler 5,9, and 13. Bus Fault, reserved and reserved */
#define  SCB_SHPR_PRI_N2                     ((uint32_t)0x00FF0000)        /*!< Priority of system handler 6,10, and 14. Usage Fault, reserved and PendSV */
#define  SCB_SHPR_PRI_N3                     ((uint32_t)0xFF000000)        /*!< Priority of system handler 7,11, and 15. Reserved, SVCall and SysTick */

/******************  Bit definition for SCB_SHCSR register  *******************/
#define  SCB_SHCSR_MEMFAULTACT               ((uint32_t)0x00000001)        /*!< MemManage is active */
#define  SCB_SHCSR_BUSFAULTACT               ((uint32_t)0x00000002)        /*!< BusFault is active */
#define  SCB_SHCSR_USGFAULTACT               ((uint32_t)0x00000008)        /*!< UsageFault is active */
#define  SCB_SHCSR_SVCALLACT                 ((uint32_t)0x00000080)        /*!< SVCall is active */
#define  SCB_SHCSR_MONITORACT                ((uint32_t)0x00000100)        /*!< Monitor is active */
#define  SCB_SHCSR_PENDSVACT                 ((uint32_t)0x00000400)        /*!< PendSV is active */
#define  SCB_SHCSR_SYSTICKACT                ((uint32_t)0x00000800)        /*!< SysTick is active */
#define  SCB_SHCSR_USGFAULTPENDED            ((uint32_t)0x00001000)        /*!< Usage Fault is pended */
#define  SCB_SHCSR_MEMFAULTPENDED            ((uint32_t)0x00002000)        /*!< MemManage is pended */
#define  SCB_SHCSR_BUSFAULTPENDED            ((uint32_t)0x00004000)        /*!< Bus Fault is pended */
#define  SCB_SHCSR_SVCALLPENDED              ((uint32_t)0x00008000)        /*!< SVCall is pended */
#define  SCB_SHCSR_MEMFAULTENA               ((uint32_t)0x00010000)        /*!< MemManage enable */
#define  SCB_SHCSR_BUSFAULTENA               ((uint32_t)0x00020000)        /*!< Bus Fault enable */
#define  SCB_SHCSR_USGFAULTENA               ((uint32_t)0x00040000)        /*!< UsageFault enable */

/*******************  Bit definition for SCB_CFSR register  *******************/
/*!< MFSR */
#define  SCB_CFSR_IACCVIOL                   ((uint32_t)0x00000001)        /*!< Instruction access violation */
#define  SCB_CFSR_DACCVIOL                   ((uint32_t)0x00000002)        /*!< Data access violation */
#define  SCB_CFSR_MUNSTKERR                  ((uint32_t)0x00000008)        /*!< Unstacking error */
#define  SCB_CFSR_MSTKERR                    ((uint32_t)0x00000010)        /*!< Stacking error */
#define  SCB_CFSR_MMARVALID                  ((uint32_t)0x00000080)        /*!< Memory Manage Address Register address valid flag */
/*!< BFSR */
#define  SCB_CFSR_IBUSERR                    ((uint32_t)0x00000100)        /*!< Instruction bus error flag */
#define  SCB_CFSR_PRECISERR                  ((uint32_t)0x00000200)        /*!< Precise data bus error */
#define  SCB_CFSR_IMPRECISERR                ((uint32_t)0x00000400)        /*!< Imprecise data bus error */
#define  SCB_CFSR_UNSTKERR                   ((uint32_t)0x00000800)        /*!< Unstacking error */
#define  SCB_CFSR_STKERR                     ((uint32_t)0x00001000)        /*!< Stacking error */
#define  SCB_CFSR_BFARVALID                  ((uint32_t)0x00008000)        /*!< Bus Fault Address Register address valid flag */
/*!< UFSR */
#define  SCB_CFSR_UNDEFINSTR                 ((uint32_t)0x00010000)        /*!< The processor attempt to execute an undefined instruction */
#define  SCB_CFSR_INVSTATE                   ((uint32_t)0x00020000)        /*!< Invalid combination of EPSR and instruction */
#define  SCB_CFSR_INVPC                      ((uint32_t)0x00040000)        /*!< Attempt to load EXC_RETURN into pc illegally */
#define  SCB_CFSR_NOCP                       ((uint32_t)0x00080000)        /*!< Attempt to use a coprocessor instruction */
#define  SCB_CFSR_UNALIGNED                  ((uint32_t)0x01000000)        /*!< Fault occurs when there is an attempt to make an unaligned memory access */
#define  SCB_CFSR_DIVBYZERO                  ((uint32_t)0x02000000)        /*!< Fault occurs when SDIV or DIV instruction is used with a divisor of 0 */

/*******************  Bit definition for SCB_HFSR register  *******************/
#define  SCB_HFSR_VECTTBL                    ((uint32_t)0x00000002)        /*!< Fault occurs because of vector table read on exception processing */
#define  SCB_HFSR_FORCED                     ((uint32_t)0x40000000)        /*!< Hard Fault activated when a configurable Fault was received and cannot activate */
#define  SCB_HFSR_DEBUGEVT                   ((uint32_t)0x80000000)        /*!< Fault related to debug */

/*******************  Bit definition for SCB_DFSR register  *******************/
#define  SCB_DFSR_HALTED                     ((uint8_t)0x01)               /*!< Halt request flag */
#define  SCB_DFSR_BKPT                       ((uint8_t)0x02)               /*!< BKPT flag */
#define  SCB_DFSR_DWTTRAP                    ((uint8_t)0x04)               /*!< Data Watchpoint and Trace (DWT) flag */
#define  SCB_DFSR_VCATCH                     ((uint8_t)0x08)               /*!< Vector catch flag */
#define  SCB_DFSR_EXTERNAL                   ((uint8_t)0x10)               /*!< External debug request flag */

/*******************  Bit definition for SCB_MMFAR register  ******************/
#define  SCB_MMFAR_ADDRESS                   ((uint32_t)0xFFFFFFFF)        /*!< Mem Manage fault address field */

/*******************  Bit definition for SCB_BFAR register  *******************/
#define  SCB_BFAR_ADDRESS                    ((uint32_t)0xFFFFFFFF)        /*!< Bus fault address field */

/*******************  Bit definition for SCB_afsr register  *******************/
#define  SCB_AFSR_IMPDEF                     ((uint32_t)0xFFFFFFFF)        /*!< Implementation defined */

/*****************************************************************************************
*                                     Peripheral CRC                                     *
*****************************************************************************************/
typedef struct{
  __IO uint32_t DR;                     /* DR */
  __IO uint32_t IDR;                    /* IDR */
  __IO uint32_t CR;                     /* CR */
       uint16_t RESERVED1[2];
  __IO uint32_t INIT;                   /* INIT */
}CRC_TypeDef;

/************************************** CRC->DR  ****************************************/
#define CRC_DR_DR_Pos                         ((uint32_t)0)                     /* Data register */
#define CRC_DR_DR_Mask                        (((uint32_t)0xFFFFFFFF) << 0)
#define CRC_DR_DR                             CRC_DR_DR_Mask

/************************************** CRC->IDR  ***************************************/
#define CRC_IDR_IDR_Pos                       ((uint32_t)0)                     /* General purpose 8-bit data register */
#define CRC_IDR_IDR_Mask                      (((uint32_t)0xFF) << 0)
#define CRC_IDR_IDR                           CRC_IDR_IDR_Mask
#define CRC_IDR_IDR_0                         (((uint32_t)0x1))
#define CRC_IDR_IDR_1                         (((uint32_t)0x2))
#define CRC_IDR_IDR_2                         (((uint32_t)0x4))
#define CRC_IDR_IDR_3                         (((uint32_t)0x8))
#define CRC_IDR_IDR_4                         (((uint32_t)0x10))
#define CRC_IDR_IDR_5                         (((uint32_t)0x20))
#define CRC_IDR_IDR_6                         (((uint32_t)0x40))
#define CRC_IDR_IDR_7                         (((uint32_t)0x80))

/************************************** CRC->CR  ****************************************/
#define CRC_CR_REV_OUT_Pos                    ((uint32_t)7)                     /* Output data revert */
#define CRC_CR_REV_OUT_Mask                   (((uint32_t)0x01) << 7)
#define CRC_CR_REV_OUT                        CRC_CR_REV_OUT_Mask
#define CRC_CR_REV_IN_Pos                     ((uint32_t)5)                     /* Input data revert */
#define CRC_CR_REV_IN_Mask                    (((uint32_t)0x03) << 5)
#define CRC_CR_REV_IN                         CRC_CR_REV_IN_Mask
#define CRC_CR_REV_IN_0                       (((uint32_t)0x1 << CRC_CR_REV_IN_Pos))
#define CRC_CR_REV_IN_1                       (((uint32_t)0x2 << CRC_CR_REV_IN_Pos))
#define CRC_CR_RESET_Pos                      ((uint32_t)0)                     /* Reset control */
#define CRC_CR_RESET_Mask                     (((uint32_t)0x01) << 0)
#define CRC_CR_RESET                          CRC_CR_RESET_Mask

/************************************* CRC->INIT  ***************************************/
#define CRC_INIT_CRC_INIT_Pos                 ((uint32_t)0)                     /* CRC initiate value */
#define CRC_INIT_CRC_INIT_Mask                (((uint32_t)0xFFFFFFFF) << 0)
#define CRC_INIT_CRC_INIT                     CRC_INIT_CRC_INIT_Mask

/*****************************************************************************************
*                                     Peripheral PWR                                     *
*****************************************************************************************/
typedef struct{
  __IO uint32_t CR;                     /* CR */
  __I  uint32_t CSR;                    /* CSR */ 
}PWR_TypeDef;

/************************************** PWR->CR  ****************************************/
#define PWR_CR_LPDS_Pos                       ((uint32_t)0)                     /* Low power deep sleep */
#define PWR_CR_LPDS_Mask                      (((uint32_t)0x01) << 0)
#define PWR_CR_LPDS                           PWR_CR_LPDS_Mask

/************************************** PWR->CSR  ***************************************/
#define PWR_CSR_LDORDY_Pos                    ((uint32_t)3)                     /* LDO status flag */
#define PWR_CSR_LDORDY_Mask                   (((uint32_t)0x01) << 3)
#define PWR_CSR_LDORDY                        PWR_CSR_LDORDY_Mask


/*****************************************************************************************
*                                     Peripheral RCC                                     *
*****************************************************************************************/
typedef struct{
  __IO uint32_t CR;                     /* CR */
  __IO uint32_t CFGR;                   /* CFGR */
  __IO uint32_t CIR;                    /* CIR */
  __IO uint32_t APBRSTR2;               /* APBRSTR2 */
  __IO uint32_t APBRSTR1;               /* APBRSTR1 */
  __IO uint32_t AHBENR;                 /* AHBENR */
  __IO uint32_t APBENR2;                /* APBENR2 */
  __IO uint32_t APBENR1;                /* APBENR1 */
       uint16_t RESERVED1[2];
  __IO uint32_t CSR;                    /* CSR */
  __IO uint32_t AHBRSTR;                /* AHBRSTR */
       uint16_t RESERVED2[2];
  __IO uint32_t CFGR3;                  /* CFGR3 */
       uint16_t RESERVED3[86];
  __IO uint32_t CSS;                    /* CSS */
       uint16_t RESERVED4[2];
  __IO uint32_t CFGR4;                  /* CFGR4 */
}RCC_TypeDef;

/************************************** RCC->CR  ****************************************/
#define RCC_CR_CSSON_Pos                      ((uint32_t)19)                    /* Clock Security System enable */
#define RCC_CR_CSSON_Mask                     (((uint32_t)0x01) << 19)
#define RCC_CR_CSSON                          RCC_CR_CSSON_Mask
#define RCC_CR_EXTCLKRDY_Pos                  ((uint32_t)17)                    /* External clock ready flag */
#define RCC_CR_EXTCLKRDY_Mask                 (((uint32_t)0x01) << 17)
#define RCC_CR_EXTCLKRDY                      RCC_CR_EXTCLKRDY_Mask
#define RCC_CR_EXTCLKON_Pos                   ((uint32_t)16)                    /* External clock enable */
#define RCC_CR_EXTCLKON_Mask                  (((uint32_t)0x01) << 16)
#define RCC_CR_EXTCLKON                       RCC_CR_EXTCLKON_Mask
#define RCC_CR_HSITRIM_Pos                    ((uint32_t)8)                     /* HSI clock trimming */
#define RCC_CR_HSITRIM_Mask                   (((uint32_t)0x3F) << 8)
#define RCC_CR_HSITRIM                        RCC_CR_HSITRIM_Mask
#define RCC_CR_HSITRIM_0                      (((uint32_t)0x1 << RCC_CR_HSITRIM_Pos))
#define RCC_CR_HSITRIM_1                      (((uint32_t)0x2 << RCC_CR_HSITRIM_Pos))
#define RCC_CR_HSITRIM_2                      (((uint32_t)0x4 << RCC_CR_HSITRIM_Pos))
#define RCC_CR_HSITRIM_3                      (((uint32_t)0x8 << RCC_CR_HSITRIM_Pos))
#define RCC_CR_HSITRIM_4                      (((uint32_t)0x10 << RCC_CR_HSITRIM_Pos))
#define RCC_CR_HSITRIM_5                      (((uint32_t)0x20 << RCC_CR_HSITRIM_Pos))
#define RCC_CR_HSICAL_Pos                     ((uint32_t)2)                     /* HSI clock calibration */
#define RCC_CR_HSICAL_Mask                    (((uint32_t)0x3F) << 2)
#define RCC_CR_HSICAL                         RCC_CR_HSICAL_Mask
#define RCC_CR_HSICAL_0                       (((uint32_t)0x1 << RCC_CR_HSICAL_Pos))
#define RCC_CR_HSICAL_1                       (((uint32_t)0x2 << RCC_CR_HSICAL_Pos))
#define RCC_CR_HSICAL_2                       (((uint32_t)0x4 << RCC_CR_HSICAL_Pos))
#define RCC_CR_HSICAL_3                       (((uint32_t)0x8 << RCC_CR_HSICAL_Pos))
#define RCC_CR_HSICAL_4                       (((uint32_t)0x10 << RCC_CR_HSICAL_Pos))
#define RCC_CR_HSICAL_5                       (((uint32_t)0x20 << RCC_CR_HSICAL_Pos))
#define RCC_CR_HSIRDY_Pos                     ((uint32_t)1)                     /* HSI clock ready flag */
#define RCC_CR_HSIRDY_Mask                    (((uint32_t)0x01) << 1)
#define RCC_CR_HSIRDY                         RCC_CR_HSIRDY_Mask
#define RCC_CR_HSION_Pos                      ((uint32_t)0)                     /* HSI clock enable */
#define RCC_CR_HSION_Mask                     (((uint32_t)0x01) << 0)
#define RCC_CR_HSION                          RCC_CR_HSION_Mask

/************************************* RCC->CFGR  ***************************************/
#define RCC_CFGR_MCOPRE_Pos                   ((uint32_t)28)                    /* Microcontroller clock output prescaler */
#define RCC_CFGR_MCOPRE_Mask                  (((uint32_t)0x07) << 28)
#define RCC_CFGR_MCOPRE                       RCC_CFGR_MCOPRE_Mask
#define RCC_CFGR_MCOPRE_0                     (((uint32_t)0x1 << RCC_CFGR_MCOPRE_Pos))
#define RCC_CFGR_MCOPRE_1                     (((uint32_t)0x2 << RCC_CFGR_MCOPRE_Pos))
#define RCC_CFGR_MCOPRE_2                     (((uint32_t)0x4 << RCC_CFGR_MCOPRE_Pos))
#define RCC_CFGR_MCO_Pos                      ((uint32_t)24)                    /* Microcontroller clock output */
#define RCC_CFGR_MCO_Mask                     (((uint32_t)0x0F) << 24)
#define RCC_CFGR_MCO                          RCC_CFGR_MCO_Mask
#define RCC_CFGR_MCO_0                        (((uint32_t)0x1 << RCC_CFGR_MCO_Pos))
#define RCC_CFGR_MCO_1                        (((uint32_t)0x2 << RCC_CFGR_MCO_Pos))
#define RCC_CFGR_MCO_2                        (((uint32_t)0x4 << RCC_CFGR_MCO_Pos))
#define RCC_CFGR_MCO_3                        (((uint32_t)0x8 << RCC_CFGR_MCO_Pos))
#define RCC_CFGR_PPRE_Pos                     ((uint32_t)8)                     /* PCLK prescaler */
#define RCC_CFGR_PPRE_Mask                    (((uint32_t)0x07) << 8)
#define RCC_CFGR_PPRE                         RCC_CFGR_PPRE_Mask
#define RCC_CFGR_PPRE_0                       (((uint32_t)0x1 << RCC_CFGR_PPRE_Pos))
#define RCC_CFGR_PPRE_1                       (((uint32_t)0x2 << RCC_CFGR_PPRE_Pos))
#define RCC_CFGR_PPRE_2                       (((uint32_t)0x4 << RCC_CFGR_PPRE_Pos))
#define RCC_CFGR_HPRE_Pos                     ((uint32_t)4)                     /* HCLK prescaler */
#define RCC_CFGR_HPRE_Mask                    (((uint32_t)0x0F) << 4)
#define RCC_CFGR_HPRE                         RCC_CFGR_HPRE_Mask
#define RCC_CFGR_HPRE_0                       (((uint32_t)0x1 << RCC_CFGR_HPRE_Pos))
#define RCC_CFGR_HPRE_1                       (((uint32_t)0x2 << RCC_CFGR_HPRE_Pos))
#define RCC_CFGR_HPRE_2                       (((uint32_t)0x4 << RCC_CFGR_HPRE_Pos))
#define RCC_CFGR_HPRE_3                       (((uint32_t)0x8 << RCC_CFGR_HPRE_Pos))
#define RCC_CFGR_SWS_Pos                      ((uint32_t)2)                     /* System clock switch status */
#define RCC_CFGR_SWS_Mask                     (((uint32_t)0x03) << 2)
#define RCC_CFGR_SWS                          RCC_CFGR_SWS_Mask
#define RCC_CFGR_SWS_0                        (((uint32_t)0x1 << RCC_CFGR_SWS_Pos))
#define RCC_CFGR_SWS_1                        (((uint32_t)0x2 << RCC_CFGR_SWS_Pos))
#define RCC_CFGR_SW_Pos                       ((uint32_t)0)                     /* System clock switch */
#define RCC_CFGR_SW_Mask                      (((uint32_t)0x03) << 0)
#define RCC_CFGR_SW                           RCC_CFGR_SW_Mask
#define RCC_CFGR_SW_0                         (((uint32_t)0x1))
#define RCC_CFGR_SW_1                         (((uint32_t)0x2))

/************************************** RCC->CIR  ***************************************/
#define RCC_CIR_CSSC_Pos                      ((uint32_t)23)                    /* Clock security system interrupt clear */
#define RCC_CIR_CSSC_Mask                     (((uint32_t)0x01) << 23)
#define RCC_CIR_CSSC                          RCC_CIR_CSSC_Mask
#define RCC_CIR_EXTRDYC_Pos                   ((uint32_t)19)                    /* External clock ready interrupt clear */
#define RCC_CIR_EXTRDYC_Mask                  (((uint32_t)0x01) << 19)
#define RCC_CIR_EXTRDYC                       RCC_CIR_EXTRDYC_Mask
#define RCC_CIR_HSIRDYC_Pos                   ((uint32_t)18)                    /* HSI ready interrupt clear */
#define RCC_CIR_HSIRDYC_Mask                  (((uint32_t)0x01) << 18)
#define RCC_CIR_HSIRDYC                       RCC_CIR_HSIRDYC_Mask
#define RCC_CIR_LSIRDYC_Pos                   ((uint32_t)16)                    /* LSI ready interrupt clear */
#define RCC_CIR_LSIRDYC_Mask                  (((uint32_t)0x01) << 16)
#define RCC_CIR_LSIRDYC                       RCC_CIR_LSIRDYC_Mask
#define RCC_CIR_EXTRDYIE_Pos                  ((uint32_t)11)                    /* External clock ready interrupt enable */
#define RCC_CIR_EXTRDYIE_Mask                 (((uint32_t)0x01) << 11)
#define RCC_CIR_EXTRDYIE                      RCC_CIR_EXTRDYIE_Mask
#define RCC_CIR_HSIRDYIE_Pos                  ((uint32_t)10)                    /* HSI ready interrupt enable */
#define RCC_CIR_HSIRDYIE_Mask                 (((uint32_t)0x01) << 10)
#define RCC_CIR_HSIRDYIE                      RCC_CIR_HSIRDYIE_Mask
#define RCC_CIR_LSIRDYIE_Pos                  ((uint32_t)8)                     /* LSI ready interrupt enable */
#define RCC_CIR_LSIRDYIE_Mask                 (((uint32_t)0x01) << 8)
#define RCC_CIR_LSIRDYIE                      RCC_CIR_LSIRDYIE_Mask
#define RCC_CIR_CSSF_Pos                      ((uint32_t)7)                     /* Clock security system interrupt flag */
#define RCC_CIR_CSSF_Mask                     (((uint32_t)0x01) << 7)
#define RCC_CIR_CSSF                          RCC_CIR_CSSF_Mask
#define RCC_CIR_EXTRDYF_Pos                   ((uint32_t)3)                     /* External clock ready interrupt flag */
#define RCC_CIR_EXTRDYF_Mask                  (((uint32_t)0x01) << 3)
#define RCC_CIR_EXTRDYF                       RCC_CIR_EXTRDYF_Mask
#define RCC_CIR_HSIRDYF_Pos                   ((uint32_t)2)                     /* HSI ready interrupt flag */
#define RCC_CIR_HSIRDYF_Mask                  (((uint32_t)0x01) << 2)
#define RCC_CIR_HSIRDYF                       RCC_CIR_HSIRDYF_Mask
#define RCC_CIR_LSIRDYF_Pos                   ((uint32_t)0)                     /* LSI ready interrupt flag */
#define RCC_CIR_LSIRDYF_Mask                  (((uint32_t)0x01) << 0)
#define RCC_CIR_LSIRDYF                       RCC_CIR_LSIRDYF_Mask

/*********************************** RCC->APBRSTR2  *************************************/
#define RCC_APBRSTR2_DBGMCURST_Pos            ((uint32_t)22)                    /* Debug MCU reset */
#define RCC_APBRSTR2_DBGMCURST_Mask           (((uint32_t)0x01) << 22)
#define RCC_APBRSTR2_DBGMCURST                RCC_APBRSTR2_DBGMCURST_Mask
#define RCC_APBRSTR2_UART1RST_Pos             ((uint32_t)14)                    /* Reset UART1 */
#define RCC_APBRSTR2_UART1RST_Mask            (((uint32_t)0x01) << 14)
#define RCC_APBRSTR2_UART1RST                 RCC_APBRSTR2_UART1RST_Mask
#define RCC_APBRSTR2_SPIRST_Pos               ((uint32_t)12)                    /* Reset SPI */
#define RCC_APBRSTR2_SPIRST_Mask              (((uint32_t)0x01) << 12)
#define RCC_APBRSTR2_SPIRST                   RCC_APBRSTR2_SPIRST_Mask
#define RCC_APBRSTR2_TIM1RST_Pos              ((uint32_t)11)                    /* Reset TIM1 timer */
#define RCC_APBRSTR2_TIM1RST_Mask             (((uint32_t)0x01) << 11)
#define RCC_APBRSTR2_TIM1RST                  RCC_APBRSTR2_TIM1RST_Mask
#define RCC_APBRSTR2_ADCRST_Pos               ((uint32_t)9)                     /* Reset ADC interface */
#define RCC_APBRSTR2_ADCRST_Mask              (((uint32_t)0x01) << 9)
#define RCC_APBRSTR2_ADCRST                   RCC_APBRSTR2_ADCRST_Mask
#define RCC_APBRSTR2_SYSCFGRST_Pos            ((uint32_t)0)                     /* Reset SYSCFG */
#define RCC_APBRSTR2_SYSCFGRST_Mask           (((uint32_t)0x01) << 0)
#define RCC_APBRSTR2_SYSCFGRST                RCC_APBRSTR2_SYSCFGRST_Mask

/*********************************** RCC->APBRSTR1  *************************************/
#define RCC_APBRSTR1_IOMUXRST_Pos             ((uint32_t)30)                    /* Reset IOMUX */
#define RCC_APBRSTR1_IOMUXRST_Mask            (((uint32_t)0x01) << 30)
#define RCC_APBRSTR1_IOMUXRST                 RCC_APBRSTR1_IOMUXRST_Mask
#define RCC_APBRSTR1_PWRRST_Pos               ((uint32_t)28)                    /* Reset power interface */
#define RCC_APBRSTR1_PWRRST_Mask              (((uint32_t)0x01) << 28)
#define RCC_APBRSTR1_PWRRST                   RCC_APBRSTR1_PWRRST_Mask
#define RCC_APBRSTR1_I2CRST_Pos               ((uint32_t)21)                    /* Reset I2C */
#define RCC_APBRSTR1_I2CRST_Mask              (((uint32_t)0x01) << 21)
#define RCC_APBRSTR1_I2CRST                   RCC_APBRSTR1_I2CRST_Mask
#define RCC_APBRSTR1_UART2RST_Pos             ((uint32_t)17)                    /* Reset UART2 */
#define RCC_APBRSTR1_UART2RST_Mask            (((uint32_t)0x01) << 17)
#define RCC_APBRSTR1_UART2RST                 RCC_APBRSTR1_UART2RST_Mask
#define RCC_APBRSTR1_AWURST_Pos               ((uint32_t)16)                    /* Auto_wake up reset in stop mode */
#define RCC_APBRSTR1_AWURST_Mask              (((uint32_t)0x01) << 16)
#define RCC_APBRSTR1_AWURST                   RCC_APBRSTR1_AWURST_Mask
#define RCC_APBRSTR1_WWDGRST_Pos              ((uint32_t)11)                    /* Reset Window watchdog */
#define RCC_APBRSTR1_WWDGRST_Mask             (((uint32_t)0x01) << 11)
#define RCC_APBRSTR1_WWDGRST                  RCC_APBRSTR1_WWDGRST_Mask
#define RCC_APBRSTR1_TIM6RST_Pos              ((uint32_t)4)                     /* Reset TIM6 timer */
#define RCC_APBRSTR1_TIM6RST_Mask             (((uint32_t)0x01) << 4)
#define RCC_APBRSTR1_TIM6RST                  RCC_APBRSTR1_TIM6RST_Mask
#define RCC_APBRSTR1_TIM2RST_Pos              ((uint32_t)0)                     /* Reset TIM2 timer */
#define RCC_APBRSTR1_TIM2RST_Mask             (((uint32_t)0x01) << 0)
#define RCC_APBRSTR1_TIM2RST                  RCC_APBRSTR1_TIM2RST_Mask

/************************************ RCC->AHBENR  **************************************/
#define RCC_AHBENR_IOPDEN_Pos                 ((uint32_t)20)                    /* I/O port D clock enable */
#define RCC_AHBENR_IOPDEN_Mask                (((uint32_t)0x01) << 20)
#define RCC_AHBENR_IOPDEN                     RCC_AHBENR_IOPDEN_Mask
#define RCC_AHBENR_IOPCEN_Pos                 ((uint32_t)19)                    /* I/O port C clock enable */
#define RCC_AHBENR_IOPCEN_Mask                (((uint32_t)0x01) << 19)
#define RCC_AHBENR_IOPCEN                     RCC_AHBENR_IOPCEN_Mask
#define RCC_AHBENR_IOPBEN_Pos                 ((uint32_t)18)                    /* I/O port B clock enable */
#define RCC_AHBENR_IOPBEN_Mask                (((uint32_t)0x01) << 18)
#define RCC_AHBENR_IOPBEN                     RCC_AHBENR_IOPBEN_Mask
#define RCC_AHBENR_IOPAEN_Pos                 ((uint32_t)17)                    /* I/O port A clock enable */
#define RCC_AHBENR_IOPAEN_Mask                (((uint32_t)0x01) << 17)
#define RCC_AHBENR_IOPAEN                     RCC_AHBENR_IOPAEN_Mask
#define RCC_AHBENR_CRCEN_Pos                  ((uint32_t)6)                     /* CRC clock enable */
#define RCC_AHBENR_CRCEN_Mask                 (((uint32_t)0x01) << 6)
#define RCC_AHBENR_CRCEN                      RCC_AHBENR_CRCEN_Mask
#define RCC_AHBENR_FLITFEN_Pos                ((uint32_t)4)                     /* FLITF clock enable */
#define RCC_AHBENR_FLITFEN_Mask               (((uint32_t)0x01) << 4)
#define RCC_AHBENR_FLITFEN                    RCC_AHBENR_FLITFEN_Mask
#define RCC_AHBENR_SRAMEN_Pos                 ((uint32_t)2)                     /* SRAM interface clock enable */
#define RCC_AHBENR_SRAMEN_Mask                (((uint32_t)0x01) << 2)
#define RCC_AHBENR_SRAMEN                     RCC_AHBENR_SRAMEN_Mask

/************************************ RCC->APBENR2  *************************************/
#define RCC_APBENR2_DBGMCUEN_Pos              ((uint32_t)22)                    /* MCU debug module clock enable */
#define RCC_APBENR2_DBGMCUEN_Mask             (((uint32_t)0x01) << 22)
#define RCC_APBENR2_DBGMCUEN                  RCC_APBENR2_DBGMCUEN_Mask
#define RCC_APBENR2_UART1EN_Pos               ((uint32_t)14)                    /* UART1 clock enable */
#define RCC_APBENR2_UART1EN_Mask              (((uint32_t)0x01) << 14)
#define RCC_APBENR2_UART1EN                   RCC_APBENR2_UART1EN_Mask
#define RCC_APBENR2_SPIEN_Pos                 ((uint32_t)12)                    /* SPI clock enable */
#define RCC_APBENR2_SPIEN_Mask                (((uint32_t)0x01) << 12)
#define RCC_APBENR2_SPIEN                     RCC_APBENR2_SPIEN_Mask
#define RCC_APBENR2_TIM1EN_Pos                ((uint32_t)11)                    /* TIM1 timer clock enable */
#define RCC_APBENR2_TIM1EN_Mask               (((uint32_t)0x01) << 11)
#define RCC_APBENR2_TIM1EN                    RCC_APBENR2_TIM1EN_Mask
#define RCC_APBENR2_ADCEN_Pos                 ((uint32_t)9)                     /* ADC interface clock enable */
#define RCC_APBENR2_ADCEN_Mask                (((uint32_t)0x01) << 9)
#define RCC_APBENR2_ADCEN                     RCC_APBENR2_ADCEN_Mask
#define RCC_APBENR2_SYSCFGEN_Pos              ((uint32_t)0)                     /* SYSCFG clock enable */
#define RCC_APBENR2_SYSCFGEN_Mask             (((uint32_t)0x01) << 0)
#define RCC_APBENR2_SYSCFGEN                  RCC_APBENR2_SYSCFGEN_Mask

/************************************ RCC->APBENR1  *************************************/
#define RCC_APBENR1_IOMUXEN_Pos               ((uint32_t)30)                    /* IOMUX clock enable */
#define RCC_APBENR1_IOMUXEN_Mask              (((uint32_t)0x01) << 30)
#define RCC_APBENR1_IOMUXEN                   RCC_APBENR1_IOMUXEN_Mask
#define RCC_APBENR1_PWREN_Pos                 ((uint32_t)28)                    /* Power interface clock enable */
#define RCC_APBENR1_PWREN_Mask                (((uint32_t)0x01) << 28)
#define RCC_APBENR1_PWREN                     RCC_APBENR1_PWREN_Mask
#define RCC_APBENR1_I2CEN_Pos                 ((uint32_t)21)                    /* I2C clock enable */
#define RCC_APBENR1_I2CEN_Mask                (((uint32_t)0x01) << 21)
#define RCC_APBENR1_I2CEN                     RCC_APBENR1_I2CEN_Mask
#define RCC_APBENR1_UART2EN_Pos               ((uint32_t)17)                    /* UART2 clock enable */
#define RCC_APBENR1_UART2EN_Mask              (((uint32_t)0x01) << 17)
#define RCC_APBENR1_UART2EN                   RCC_APBENR1_UART2EN_Mask
#define RCC_APBENR1_AWUEN_Pos                 ((uint32_t)16)                    /* Auto-wake up clock enable in stop mode */
#define RCC_APBENR1_AWUEN_Mask                (((uint32_t)0x01) << 16)
#define RCC_APBENR1_AWUEN                     RCC_APBENR1_AWUEN_Mask
#define RCC_APBENR1_WWDGEN_Pos                ((uint32_t)11)                    /* Window watchdog clock enable */
#define RCC_APBENR1_WWDGEN_Mask               (((uint32_t)0x01) << 11)
#define RCC_APBENR1_WWDGEN                    RCC_APBENR1_WWDGEN_Mask
#define RCC_APBENR1_TIM6EN_Pos                ((uint32_t)4)                     /* TIM6 timer clock enable */
#define RCC_APBENR1_TIM6EN_Mask               (((uint32_t)0x01) << 4)
#define RCC_APBENR1_TIM6EN                    RCC_APBENR1_TIM6EN_Mask
#define RCC_APBENR1_TIM2EN_Pos                ((uint32_t)0)                     /* TIM2 timer clock enable */
#define RCC_APBENR1_TIM2EN_Mask               (((uint32_t)0x01) << 0)
#define RCC_APBENR1_TIM2EN                    RCC_APBENR1_TIM2EN_Mask

/************************************** RCC->CSR  ***************************************/
#define RCC_CSR_LPWRRSTF_Pos                  ((uint32_t)31)                    /* Low-power reset flag */
#define RCC_CSR_LPWRRSTF_Mask                 (((uint32_t)0x01) << 31)
#define RCC_CSR_LPWRRSTF                      RCC_CSR_LPWRRSTF_Mask
#define RCC_CSR_WWDGRSTF_Pos                  ((uint32_t)30)                    /* Window watchdog reset flag */
#define RCC_CSR_WWDGRSTF_Mask                 (((uint32_t)0x01) << 30)
#define RCC_CSR_WWDGRSTF                      RCC_CSR_WWDGRSTF_Mask
#define RCC_CSR_IWDGRSTF_Pos                  ((uint32_t)29)                    /* Independent watchdog reset flag */
#define RCC_CSR_IWDGRSTF_Mask                 (((uint32_t)0x01) << 29)
#define RCC_CSR_IWDGRSTF                      RCC_CSR_IWDGRSTF_Mask
#define RCC_CSR_SFTRSTF_Pos                   ((uint32_t)28)                    /* Software reset flag */
#define RCC_CSR_SFTRSTF_Mask                  (((uint32_t)0x01) << 28)
#define RCC_CSR_SFTRSTF                       RCC_CSR_SFTRSTF_Mask
#define RCC_CSR_PORRSTF_Pos                   ((uint32_t)27)                    /* POR/PDR reset flag */
#define RCC_CSR_PORRSTF_Mask                  (((uint32_t)0x01) << 27)
#define RCC_CSR_PORRSTF                       RCC_CSR_PORRSTF_Mask
#define RCC_CSR_PINRSTF_Pos                   ((uint32_t)26)                    /* PIN reset flag */
#define RCC_CSR_PINRSTF_Mask                  (((uint32_t)0x01) << 26)
#define RCC_CSR_PINRSTF                       RCC_CSR_PINRSTF_Mask
#define RCC_CSR_RMVF_Pos                      ((uint32_t)24)                    /* Remove reset flag */
#define RCC_CSR_RMVF_Mask                     (((uint32_t)0x01) << 24)
#define RCC_CSR_RMVF                          RCC_CSR_RMVF_Mask
#define RCC_CSR_LSIRDY_Pos                    ((uint32_t)1)                     /* LSI oscillator ready */
#define RCC_CSR_LSIRDY_Mask                   (((uint32_t)0x01) << 1)
#define RCC_CSR_LSIRDY                        RCC_CSR_LSIRDY_Mask
#define RCC_CSR_LSION_Pos                     ((uint32_t)0)                     /* LSI oscillator enable */
#define RCC_CSR_LSION_Mask                    (((uint32_t)0x01) << 0)
#define RCC_CSR_LSION                         RCC_CSR_LSION_Mask

/************************************ RCC->AHBRSTR  *************************************/
#define RCC_AHBRSTR_IOPDRST_Pos               ((uint32_t)20)                    /* Reset I/O port D */
#define RCC_AHBRSTR_IOPDRST_Mask              (((uint32_t)0x01) << 20)
#define RCC_AHBRSTR_IOPDRST                   RCC_AHBRSTR_IOPDRST_Mask
#define RCC_AHBRSTR_IOPCRST_Pos               ((uint32_t)19)                    /* Reset I/O port C */
#define RCC_AHBRSTR_IOPCRST_Mask              (((uint32_t)0x01) << 19)
#define RCC_AHBRSTR_IOPCRST                   RCC_AHBRSTR_IOPCRST_Mask
#define RCC_AHBRSTR_IOPBRST_Pos               ((uint32_t)18)                    /* Reset I/O port B */
#define RCC_AHBRSTR_IOPBRST_Mask              (((uint32_t)0x01) << 18)
#define RCC_AHBRSTR_IOPBRST                   RCC_AHBRSTR_IOPBRST_Mask
#define RCC_AHBRSTR_IOPARST_Pos               ((uint32_t)17)                    /* Reset I/O port A */
#define RCC_AHBRSTR_IOPARST_Mask              (((uint32_t)0x01) << 17)
#define RCC_AHBRSTR_IOPARST                   RCC_AHBRSTR_IOPARST_Mask
#define RCC_AHBRSTR_CRCRST_Pos                ((uint32_t)6)                     /* Reset CRC */
#define RCC_AHBRSTR_CRCRST_Mask               (((uint32_t)0x01) << 6)
#define RCC_AHBRSTR_CRCRST                    RCC_AHBRSTR_CRCRST_Mask

/************************************* RCC->CFGR3  **************************************/
#define RCC_CFGR3_UART2SW_Pos                 ((uint32_t)16)                    /* UART2 clock source selection */
#define RCC_CFGR3_UART2SW_Mask                (((uint32_t)0x03) << 16)
#define RCC_CFGR3_UART2SW                     RCC_CFGR3_UART2SW_Mask
#define RCC_CFGR3_UART2SW_0                   (((uint32_t)0x1 << RCC_CFGR3_UART2SW_Pos))
#define RCC_CFGR3_UART2SW_1                   (((uint32_t)0x2 << RCC_CFGR3_UART2SW_Pos))
#define RCC_CFGR3_I2CSW_Pos                   ((uint32_t)4)                     /* I2C clock source selection */
#define RCC_CFGR3_I2CSW_Mask                  (((uint32_t)0x01) << 4)
#define RCC_CFGR3_I2CSW                       RCC_CFGR3_I2CSW_Mask
#define RCC_CFGR3_UART1SW_Pos                 ((uint32_t)0)                     /* UART1 clock source selection */
#define RCC_CFGR3_UART1SW_Mask                (((uint32_t)0x03) << 0)
#define RCC_CFGR3_UART1SW                     RCC_CFGR3_UART1SW_Mask
#define RCC_CFGR3_UART1SW_0                   (((uint32_t)0x1))
#define RCC_CFGR3_UART1SW_1                   (((uint32_t)0x2))

/************************************** RCC->CSS  ***************************************/
#define RCC_CSS_CSS_THRESHOLD_Pos             ((uint32_t)25)                    /* Clock security system threshold value */
#define RCC_CSS_CSS_THRESHOLD_Mask            (((uint32_t)0x7F) << 25)
#define RCC_CSS_CSS_THRESHOLD                 RCC_CSS_CSS_THRESHOLD_Mask
#define RCC_CSS_CSS_THRESHOLD_0               (((uint32_t)0x1 << RCC_CSS_CSS_THRESHOLD_Pos))
#define RCC_CSS_CSS_THRESHOLD_1               (((uint32_t)0x2 << RCC_CSS_CSS_THRESHOLD_Pos))
#define RCC_CSS_CSS_THRESHOLD_2               (((uint32_t)0x4 << RCC_CSS_CSS_THRESHOLD_Pos))
#define RCC_CSS_CSS_THRESHOLD_3               (((uint32_t)0x8 << RCC_CSS_CSS_THRESHOLD_Pos))
#define RCC_CSS_CSS_THRESHOLD_4               (((uint32_t)0x10 << RCC_CSS_CSS_THRESHOLD_Pos))
#define RCC_CSS_CSS_THRESHOLD_5               (((uint32_t)0x20 << RCC_CSS_CSS_THRESHOLD_Pos))
#define RCC_CSS_CSS_THRESHOLD_6               (((uint32_t)0x40 << RCC_CSS_CSS_THRESHOLD_Pos))

/************************************* RCC->CFGR4  **************************************/
#define RCC_CFGR4_ADCHSIPRE_Pos               ((uint32_t)26)                    /* ADC_HSI prescaler */
#define RCC_CFGR4_ADCHSIPRE_Mask              (((uint32_t)0x1F) << 26)
#define RCC_CFGR4_ADCHSIPRE                   RCC_CFGR4_ADCHSIPRE_Mask
#define RCC_CFGR4_ADCHSIPRE_0                 (((uint32_t)0x1 << RCC_CFGR4_ADCHSIPRE_Pos))
#define RCC_CFGR4_ADCHSIPRE_1                 (((uint32_t)0x2 << RCC_CFGR4_ADCHSIPRE_Pos))
#define RCC_CFGR4_ADCHSIPRE_2                 (((uint32_t)0x4 << RCC_CFGR4_ADCHSIPRE_Pos))
#define RCC_CFGR4_ADCHSIPRE_3                 (((uint32_t)0x8 << RCC_CFGR4_ADCHSIPRE_Pos))
#define RCC_CFGR4_ADCHSIPRE_4                 (((uint32_t)0x10 << RCC_CFGR4_ADCHSIPRE_Pos))
#define RCC_CFGR4_EXTCLK_SEL_Pos              ((uint32_t)24)                    /* External clock io selection */
#define RCC_CFGR4_EXTCLK_SEL_Mask             (((uint32_t)0x03) << 24)
#define RCC_CFGR4_EXTCLK_SEL                  RCC_CFGR4_EXTCLK_SEL_Mask
#define RCC_CFGR4_EXTCLK_SEL_0                (((uint32_t)0x1 << RCC_CFGR4_EXTCLK_SEL_Pos))
#define RCC_CFGR4_EXTCLK_SEL_1                (((uint32_t)0x2 << RCC_CFGR4_EXTCLK_SEL_Pos))
#define RCC_CFGR4_I2CHSIPRE_Pos               ((uint32_t)16)                    /* I2C_HSI prescaler */
#define RCC_CFGR4_I2CHSIPRE_Mask              (((uint32_t)0x1F) << 16)
#define RCC_CFGR4_I2CHSIPRE                   RCC_CFGR4_I2CHSIPRE_Mask
#define RCC_CFGR4_I2CHSIPRE_0                 (((uint32_t)0x1 << RCC_CFGR4_I2CHSIPRE_Pos))
#define RCC_CFGR4_I2CHSIPRE_1                 (((uint32_t)0x2 << RCC_CFGR4_I2CHSIPRE_Pos))
#define RCC_CFGR4_I2CHSIPRE_2                 (((uint32_t)0x4 << RCC_CFGR4_I2CHSIPRE_Pos))
#define RCC_CFGR4_I2CHSIPRE_3                 (((uint32_t)0x8 << RCC_CFGR4_I2CHSIPRE_Pos))
#define RCC_CFGR4_I2CHSIPRE_4                 (((uint32_t)0x10 << RCC_CFGR4_I2CHSIPRE_Pos))
#define RCC_CFGR4_I2CCLK_SEL_Pos              ((uint32_t)15)                    /* I2C clock selection */
#define RCC_CFGR4_I2CCLK_SEL_Mask             (((uint32_t)0x01) << 15)
#define RCC_CFGR4_I2CCLK_SEL                  RCC_CFGR4_I2CCLK_SEL_Mask
#define RCC_CFGR4_FLITFCLK_PRE_Pos            ((uint32_t)11)                    /* FLITFCLK prescaler */
#define RCC_CFGR4_FLITFCLK_PRE_Mask           (((uint32_t)0x0F) << 11)
#define RCC_CFGR4_FLITFCLK_PRE                RCC_CFGR4_FLITFCLK_PRE_Mask
#define RCC_CFGR4_FLITFCLK_PRE_0              (((uint32_t)0x1 << RCC_CFGR4_FLITFCLK_PRE_Pos))
#define RCC_CFGR4_FLITFCLK_PRE_1              (((uint32_t)0x2 << RCC_CFGR4_FLITFCLK_PRE_Pos))
#define RCC_CFGR4_FLITFCLK_PRE_2              (((uint32_t)0x4 << RCC_CFGR4_FLITFCLK_PRE_Pos))
#define RCC_CFGR4_FLITFCLK_PRE_3              (((uint32_t)0x8 << RCC_CFGR4_FLITFCLK_PRE_Pos))
#define RCC_CFGR4_FLITFCLK_SEL_Pos            ((uint32_t)9)                     /* FLITFCLK clock selection */
#define RCC_CFGR4_FLITFCLK_SEL_Mask           (((uint32_t)0x03) << 9)
#define RCC_CFGR4_FLITFCLK_SEL                RCC_CFGR4_FLITFCLK_SEL_Mask
#define RCC_CFGR4_FLITFCLK_SEL_0              (((uint32_t)0x1 << RCC_CFGR4_FLITFCLK_SEL_Pos))
#define RCC_CFGR4_FLITFCLK_SEL_1              (((uint32_t)0x2 << RCC_CFGR4_FLITFCLK_SEL_Pos))
#define RCC_CFGR4_UARTHSIPRE_Pos              ((uint32_t)0)                     /* UART_HSI prescaler */
#define RCC_CFGR4_UARTHSIPRE_Mask             (((uint32_t)0x1F) << 0)
#define RCC_CFGR4_UARTHSIPRE                  RCC_CFGR4_UARTHSIPRE_Mask
#define RCC_CFGR4_UARTHSIPRE_0                (((uint32_t)0x1))
#define RCC_CFGR4_UARTHSIPRE_1                (((uint32_t)0x2))
#define RCC_CFGR4_UARTHSIPRE_2                (((uint32_t)0x4))
#define RCC_CFGR4_UARTHSIPRE_3                (((uint32_t)0x8))
#define RCC_CFGR4_UARTHSIPRE_4                (((uint32_t)0x10))

/*****************************************************************************************
*                                    Peripheral SYSCFG                                   *
*****************************************************************************************/
typedef struct{
  __IO uint32_t CFGR1;                  /* CFGR1 */
       uint16_t RESERVED1[2];
  __IO uint32_t EXTICR1;                /* EXTICR1 */
  __IO uint32_t EXTICR2;                /* EXTICR2 */
}SYSCFG_TypeDef;

/*********************************** SYSCFG->CFGR1  *************************************/
#define SYSCFG_CFGR1_LOCKUP_LOCK_Pos          ((uint32_t)31)                    /* LOCKUP bit enable */
#define SYSCFG_CFGR1_LOCKUP_LOCK_Mask         (((uint32_t)0x01) << 31)
#define SYSCFG_CFGR1_LOCKUP_LOCK              SYSCFG_CFGR1_LOCKUP_LOCK_Mask
#define SYSCFG_CFGR1_MEM_MODE_Pos             ((uint32_t)0)                     /* Memory mapping selection */
#define SYSCFG_CFGR1_MEM_MODE_Mask            (((uint32_t)0x03) << 0)
#define SYSCFG_CFGR1_MEM_MODE                 SYSCFG_CFGR1_MEM_MODE_Mask
#define SYSCFG_CFGR1_MEM_MODE_0               (((uint32_t)0x1))
#define SYSCFG_CFGR1_MEM_MODE_1               (((uint32_t)0x2))

/********************************** SYSCFG->EXTICR1  ************************************/
#define SYSCFG_EXTICR1_EXTI0_Pos              ((uint32_t)0)                     /* EXTI y configuration bits */
#define SYSCFG_EXTICR1_EXTI0_Mask             (((uint32_t)0x0F) << 0)
#define SYSCFG_EXTICR1_EXTI0                  SYSCFG_EXTICR1_EXTI0_Mask
#define SYSCFG_EXTICR1_EXTI0_0                (((uint32_t)0x1))
#define SYSCFG_EXTICR1_EXTI0_1                (((uint32_t)0x2))
#define SYSCFG_EXTICR1_EXTI0_2                (((uint32_t)0x4))
#define SYSCFG_EXTICR1_EXTI0_3                (((uint32_t)0x8))
#define SYSCFG_EXTICR1_EXTI1_Pos              ((uint32_t)4)                     /* EXTI y configuration bits */
#define SYSCFG_EXTICR1_EXTI1_Mask             (((uint32_t)0x0F) << 4)
#define SYSCFG_EXTICR1_EXTI1                  SYSCFG_EXTICR1_EXTI1_Mask
#define SYSCFG_EXTICR1_EXTI1_0                (((uint32_t)0x1 << SYSCFG_EXTICR1_EXTI1_Pos))
#define SYSCFG_EXTICR1_EXTI1_1                (((uint32_t)0x2 << SYSCFG_EXTICR1_EXTI1_Pos))
#define SYSCFG_EXTICR1_EXTI1_2                (((uint32_t)0x4 << SYSCFG_EXTICR1_EXTI1_Pos))
#define SYSCFG_EXTICR1_EXTI1_3                (((uint32_t)0x8 << SYSCFG_EXTICR1_EXTI1_Pos))
#define SYSCFG_EXTICR1_EXTI2_Pos              ((uint32_t)8)                     /* EXTI y configuration bits */
#define SYSCFG_EXTICR1_EXTI2_Mask             (((uint32_t)0x0F) << 8)
#define SYSCFG_EXTICR1_EXTI2                  SYSCFG_EXTICR1_EXTI2_Mask
#define SYSCFG_EXTICR1_EXTI2_0                (((uint32_t)0x1 << SYSCFG_EXTICR1_EXTI2_Pos))
#define SYSCFG_EXTICR1_EXTI2_1                (((uint32_t)0x2 << SYSCFG_EXTICR1_EXTI2_Pos))
#define SYSCFG_EXTICR1_EXTI2_2                (((uint32_t)0x4 << SYSCFG_EXTICR1_EXTI2_Pos))
#define SYSCFG_EXTICR1_EXTI2_3                (((uint32_t)0x8 << SYSCFG_EXTICR1_EXTI2_Pos))
#define SYSCFG_EXTICR1_EXTI3_Pos              ((uint32_t)12)                    /* EXTI y configuration bits */
#define SYSCFG_EXTICR1_EXTI3_Mask             (((uint32_t)0x0F) << 12)
#define SYSCFG_EXTICR1_EXTI3                  SYSCFG_EXTICR1_EXTI3_Mask
#define SYSCFG_EXTICR1_EXTI3_0                (((uint32_t)0x1 << SYSCFG_EXTICR1_EXTI3_Pos))
#define SYSCFG_EXTICR1_EXTI3_1                (((uint32_t)0x2 << SYSCFG_EXTICR1_EXTI3_Pos))
#define SYSCFG_EXTICR1_EXTI3_2                (((uint32_t)0x4 << SYSCFG_EXTICR1_EXTI3_Pos))
#define SYSCFG_EXTICR1_EXTI3_3                (((uint32_t)0x8 << SYSCFG_EXTICR1_EXTI3_Pos))

/********************************** SYSCFG->EXTICR2  ************************************/
#define SYSCFG_EXTICR2_EXTI4_Pos              ((uint32_t)0)                     /* EXTI y configuration bits */
#define SYSCFG_EXTICR2_EXTI4_Mask             (((uint32_t)0x0F) << 0)
#define SYSCFG_EXTICR2_EXTI4                  SYSCFG_EXTICR2_EXTI4_Mask
#define SYSCFG_EXTICR2_EXTI4_0                (((uint32_t)0x1))
#define SYSCFG_EXTICR2_EXTI4_1                (((uint32_t)0x2))
#define SYSCFG_EXTICR2_EXTI4_2                (((uint32_t)0x4))
#define SYSCFG_EXTICR2_EXTI4_3                (((uint32_t)0x8))
#define SYSCFG_EXTICR2_EXTI5_Pos              ((uint32_t)4)                     /* EXTI y configuration bits */
#define SYSCFG_EXTICR2_EXTI5_Mask             (((uint32_t)0x0F) << 4)
#define SYSCFG_EXTICR2_EXTI5                  SYSCFG_EXTICR2_EXTI5_Mask
#define SYSCFG_EXTICR2_EXTI5_0                (((uint32_t)0x1 << SYSCFG_EXTICR2_EXTI5_Pos))
#define SYSCFG_EXTICR2_EXTI5_1                (((uint32_t)0x2 << SYSCFG_EXTICR2_EXTI5_Pos))
#define SYSCFG_EXTICR2_EXTI5_2                (((uint32_t)0x4 << SYSCFG_EXTICR2_EXTI5_Pos))
#define SYSCFG_EXTICR2_EXTI5_3                (((uint32_t)0x8 << SYSCFG_EXTICR2_EXTI5_Pos))
#define SYSCFG_EXTICR2_EXTI6_Pos              ((uint32_t)8)                     /* EXTI y configuration bits */
#define SYSCFG_EXTICR2_EXTI6_Mask             (((uint32_t)0x0F) << 8)
#define SYSCFG_EXTICR2_EXTI6                  SYSCFG_EXTICR2_EXTI6_Mask
#define SYSCFG_EXTICR2_EXTI6_0                (((uint32_t)0x1 << SYSCFG_EXTICR2_EXTI6_Pos))
#define SYSCFG_EXTICR2_EXTI6_1                (((uint32_t)0x2 << SYSCFG_EXTICR2_EXTI6_Pos))
#define SYSCFG_EXTICR2_EXTI6_2                (((uint32_t)0x4 << SYSCFG_EXTICR2_EXTI6_Pos))
#define SYSCFG_EXTICR2_EXTI6_3                (((uint32_t)0x8 << SYSCFG_EXTICR2_EXTI6_Pos))
#define SYSCFG_EXTICR2_EXTI7_Pos              ((uint32_t)12)                    /* EXTI y configuration bits */
#define SYSCFG_EXTICR2_EXTI7_Mask             (((uint32_t)0x0F) << 12)
#define SYSCFG_EXTICR2_EXTI7                  SYSCFG_EXTICR2_EXTI7_Mask
#define SYSCFG_EXTICR2_EXTI7_0                (((uint32_t)0x1 << SYSCFG_EXTICR2_EXTI7_Pos))
#define SYSCFG_EXTICR2_EXTI7_1                (((uint32_t)0x2 << SYSCFG_EXTICR2_EXTI7_Pos))
#define SYSCFG_EXTICR2_EXTI7_2                (((uint32_t)0x4 << SYSCFG_EXTICR2_EXTI7_Pos))
#define SYSCFG_EXTICR2_EXTI7_3                (((uint32_t)0x8 << SYSCFG_EXTICR2_EXTI7_Pos))

/*****************************************************************************************
*                                     Peripheral GPIO                                    *
*****************************************************************************************/
typedef struct{
  __IO uint32_t MODER;                  /* MODER */
  __IO uint32_t OTYPER;                 /* OTYPER */
  __IO uint32_t OSPEEDR;                /* OSPEEDR */
  __IO uint32_t PUPDR;                  /* PUPDR */
  __I  uint32_t IDR;                    /* IDR */
  __IO uint32_t ODR;                    /* ODR */
  __O  uint32_t BSRR;                   /* BSRR */
  __IO uint32_t LCKR;                   /* LCKR */
  __IO uint32_t AFR;                    /* AFR */
       uint16_t RESERVED1[2];
  __O  uint32_t BRR;                    /* BRR */
       uint16_t RESERVED2[2];
  __IO uint32_t IOSR;                   /* IOSR */
}GPIO_TypeDef;

/************************************ GPIO->MODER  **************************************/
#define GPIO_MODER_MODER0_Pos                 ((uint32_t)0)                     /* Port x pin y mode configuration bits */
#define GPIO_MODER_MODER0_Mask                (((uint32_t)0x03) << 0)
#define GPIO_MODER_MODER0                     GPIO_MODER_MODER0_Mask
#define GPIO_MODER_MODER0_0                   (((uint32_t)0x1))
#define GPIO_MODER_MODER0_1                   (((uint32_t)0x2))
#define GPIO_MODER_MODER1_Pos                 ((uint32_t)2)                     /* Port x pin y mode configuration bits */
#define GPIO_MODER_MODER1_Mask                (((uint32_t)0x03) << 2)
#define GPIO_MODER_MODER1                     GPIO_MODER_MODER1_Mask
#define GPIO_MODER_MODER1_0                   (((uint32_t)0x1 << GPIO_MODER_MODER1_Pos))
#define GPIO_MODER_MODER1_1                   (((uint32_t)0x2 << GPIO_MODER_MODER1_Pos))
#define GPIO_MODER_MODER2_Pos                 ((uint32_t)4)                     /* Port x pin y mode configuration bits */
#define GPIO_MODER_MODER2_Mask                (((uint32_t)0x03) << 4)
#define GPIO_MODER_MODER2                     GPIO_MODER_MODER2_Mask
#define GPIO_MODER_MODER2_0                   (((uint32_t)0x1 << GPIO_MODER_MODER2_Pos))
#define GPIO_MODER_MODER2_1                   (((uint32_t)0x2 << GPIO_MODER_MODER2_Pos))
#define GPIO_MODER_MODER3_Pos                 ((uint32_t)6)                     /* Port x pin y mode configuration bits */
#define GPIO_MODER_MODER3_Mask                (((uint32_t)0x03) << 6)
#define GPIO_MODER_MODER3                     GPIO_MODER_MODER3_Mask
#define GPIO_MODER_MODER3_0                   (((uint32_t)0x1 << GPIO_MODER_MODER3_Pos))
#define GPIO_MODER_MODER3_1                   (((uint32_t)0x2 << GPIO_MODER_MODER3_Pos))
#define GPIO_MODER_MODER4_Pos                 ((uint32_t)8)                     /* Port x pin y mode configuration bits */
#define GPIO_MODER_MODER4_Mask                (((uint32_t)0x03) << 8)
#define GPIO_MODER_MODER4                     GPIO_MODER_MODER4_Mask
#define GPIO_MODER_MODER4_0                   (((uint32_t)0x1 << GPIO_MODER_MODER4_Pos))
#define GPIO_MODER_MODER4_1                   (((uint32_t)0x2 << GPIO_MODER_MODER4_Pos))
#define GPIO_MODER_MODER5_Pos                 ((uint32_t)10)                    /* Port x pin y mode configuration bits */
#define GPIO_MODER_MODER5_Mask                (((uint32_t)0x03) << 10)
#define GPIO_MODER_MODER5                     GPIO_MODER_MODER5_Mask
#define GPIO_MODER_MODER5_0                   (((uint32_t)0x1 << GPIO_MODER_MODER5_Pos))
#define GPIO_MODER_MODER5_1                   (((uint32_t)0x2 << GPIO_MODER_MODER5_Pos))
#define GPIO_MODER_MODER6_Pos                 ((uint32_t)12)                    /* Port x pin y mode configuration bits */
#define GPIO_MODER_MODER6_Mask                (((uint32_t)0x03) << 12)
#define GPIO_MODER_MODER6                     GPIO_MODER_MODER6_Mask
#define GPIO_MODER_MODER6_0                   (((uint32_t)0x1 << GPIO_MODER_MODER6_Pos))
#define GPIO_MODER_MODER6_1                   (((uint32_t)0x2 << GPIO_MODER_MODER6_Pos))
#define GPIO_MODER_MODER7_Pos                 ((uint32_t)14)                    /* Port x pin y mode configuration bits */
#define GPIO_MODER_MODER7_Mask                (((uint32_t)0x03) << 14)
#define GPIO_MODER_MODER7                     GPIO_MODER_MODER7_Mask
#define GPIO_MODER_MODER7_0                   (((uint32_t)0x1 << GPIO_MODER_MODER7_Pos))
#define GPIO_MODER_MODER7_1                   (((uint32_t)0x2 << GPIO_MODER_MODER7_Pos))

/************************************ GPIO->OTYPER  *************************************/
#define GPIO_OTYPER_OT0_Pos                   ((uint32_t)0)                     /* Port x pin y output type configuration bits */
#define GPIO_OTYPER_OT0_Mask                  (((uint32_t)0x01) << 0)
#define GPIO_OTYPER_OT0                       GPIO_OTYPER_OT0_Mask
#define GPIO_OTYPER_OT1_Pos                   ((uint32_t)1)                     /* Port x pin y output type configuration bits */
#define GPIO_OTYPER_OT1_Mask                  (((uint32_t)0x01) << 1)
#define GPIO_OTYPER_OT1                       GPIO_OTYPER_OT1_Mask
#define GPIO_OTYPER_OT2_Pos                   ((uint32_t)2)                     /* Port x pin y output type configuration bits */
#define GPIO_OTYPER_OT2_Mask                  (((uint32_t)0x01) << 2)
#define GPIO_OTYPER_OT2                       GPIO_OTYPER_OT2_Mask
#define GPIO_OTYPER_OT3_Pos                   ((uint32_t)3)                     /* Port x pin y output type configuration bits */
#define GPIO_OTYPER_OT3_Mask                  (((uint32_t)0x01) << 3)
#define GPIO_OTYPER_OT3                       GPIO_OTYPER_OT3_Mask
#define GPIO_OTYPER_OT4_Pos                   ((uint32_t)4)                     /* Port x pin y output type configuration bits */
#define GPIO_OTYPER_OT4_Mask                  (((uint32_t)0x01) << 4)
#define GPIO_OTYPER_OT4                       GPIO_OTYPER_OT4_Mask
#define GPIO_OTYPER_OT5_Pos                   ((uint32_t)5)                     /* Port x pin y output type configuration bits */
#define GPIO_OTYPER_OT5_Mask                  (((uint32_t)0x01) << 5)
#define GPIO_OTYPER_OT5                       GPIO_OTYPER_OT5_Mask
#define GPIO_OTYPER_OT6_Pos                   ((uint32_t)6)                     /* Port x pin y output type configuration bits */
#define GPIO_OTYPER_OT6_Mask                  (((uint32_t)0x01) << 6)
#define GPIO_OTYPER_OT6                       GPIO_OTYPER_OT6_Mask
#define GPIO_OTYPER_OT7_Pos                   ((uint32_t)7)                     /* Port x pin y output type configuration bits */
#define GPIO_OTYPER_OT7_Mask                  (((uint32_t)0x01) << 7)
#define GPIO_OTYPER_OT7                       GPIO_OTYPER_OT7_Mask

/*********************************** GPIO->OSPEEDR  *************************************/
#define GPIO_OSPEEDR_OSPEEDR0_Pos             ((uint32_t)0)                     /* Port x pin y output speed configuration bits */
#define GPIO_OSPEEDR_OSPEEDR0_Mask            (((uint32_t)0x03) << 0)
#define GPIO_OSPEEDR_OSPEEDR0                 GPIO_OSPEEDR_OSPEEDR0_Mask
#define GPIO_OSPEEDR_OSPEEDR0_0               (((uint32_t)0x1))
#define GPIO_OSPEEDR_OSPEEDR0_1               (((uint32_t)0x2))
#define GPIO_OSPEEDR_OSPEEDR1_Pos             ((uint32_t)2)                     /* Port x pin y output speed configuration bits */
#define GPIO_OSPEEDR_OSPEEDR1_Mask            (((uint32_t)0x03) << 2)
#define GPIO_OSPEEDR_OSPEEDR1                 GPIO_OSPEEDR_OSPEEDR1_Mask
#define GPIO_OSPEEDR_OSPEEDR1_0               (((uint32_t)0x1 << GPIO_OSPEEDR_OSPEEDR1_Pos))
#define GPIO_OSPEEDR_OSPEEDR1_1               (((uint32_t)0x2 << GPIO_OSPEEDR_OSPEEDR1_Pos))
#define GPIO_OSPEEDR_OSPEEDR2_Pos             ((uint32_t)4)                     /* Port x pin y output speed configuration bits */
#define GPIO_OSPEEDR_OSPEEDR2_Mask            (((uint32_t)0x03) << 4)
#define GPIO_OSPEEDR_OSPEEDR2                 GPIO_OSPEEDR_OSPEEDR2_Mask
#define GPIO_OSPEEDR_OSPEEDR2_0               (((uint32_t)0x1 << GPIO_OSPEEDR_OSPEEDR2_Pos))
#define GPIO_OSPEEDR_OSPEEDR2_1               (((uint32_t)0x2 << GPIO_OSPEEDR_OSPEEDR2_Pos))
#define GPIO_OSPEEDR_OSPEEDR3_Pos             ((uint32_t)6)                     /* Port x pin y output speed configuration bits */
#define GPIO_OSPEEDR_OSPEEDR3_Mask            (((uint32_t)0x03) << 6)
#define GPIO_OSPEEDR_OSPEEDR3                 GPIO_OSPEEDR_OSPEEDR3_Mask
#define GPIO_OSPEEDR_OSPEEDR3_0               (((uint32_t)0x1 << GPIO_OSPEEDR_OSPEEDR3_Pos))
#define GPIO_OSPEEDR_OSPEEDR3_1               (((uint32_t)0x2 << GPIO_OSPEEDR_OSPEEDR3_Pos))
#define GPIO_OSPEEDR_OSPEEDR4_Pos             ((uint32_t)8)                     /* Port x pin y output speed configuration bits */
#define GPIO_OSPEEDR_OSPEEDR4_Mask            (((uint32_t)0x03) << 8)
#define GPIO_OSPEEDR_OSPEEDR4                 GPIO_OSPEEDR_OSPEEDR4_Mask
#define GPIO_OSPEEDR_OSPEEDR4_0               (((uint32_t)0x1 << GPIO_OSPEEDR_OSPEEDR4_Pos))
#define GPIO_OSPEEDR_OSPEEDR4_1               (((uint32_t)0x2 << GPIO_OSPEEDR_OSPEEDR4_Pos))
#define GPIO_OSPEEDR_OSPEEDR5_Pos             ((uint32_t)10)                    /* Port x pin y output speed configuration bits */
#define GPIO_OSPEEDR_OSPEEDR5_Mask            (((uint32_t)0x03) << 10)
#define GPIO_OSPEEDR_OSPEEDR5                 GPIO_OSPEEDR_OSPEEDR5_Mask
#define GPIO_OSPEEDR_OSPEEDR5_0               (((uint32_t)0x1 << GPIO_OSPEEDR_OSPEEDR5_Pos))
#define GPIO_OSPEEDR_OSPEEDR5_1               (((uint32_t)0x2 << GPIO_OSPEEDR_OSPEEDR5_Pos))
#define GPIO_OSPEEDR_OSPEEDR6_Pos             ((uint32_t)12)                    /* Port x pin y output speed configuration bits */
#define GPIO_OSPEEDR_OSPEEDR6_Mask            (((uint32_t)0x03) << 12)
#define GPIO_OSPEEDR_OSPEEDR6                 GPIO_OSPEEDR_OSPEEDR6_Mask
#define GPIO_OSPEEDR_OSPEEDR6_0               (((uint32_t)0x1 << GPIO_OSPEEDR_OSPEEDR6_Pos))
#define GPIO_OSPEEDR_OSPEEDR6_1               (((uint32_t)0x2 << GPIO_OSPEEDR_OSPEEDR6_Pos))
#define GPIO_OSPEEDR_OSPEEDR7_Pos             ((uint32_t)14)                    /* Port x pin y output speed configuration bits */
#define GPIO_OSPEEDR_OSPEEDR7_Mask            (((uint32_t)0x03) << 14)
#define GPIO_OSPEEDR_OSPEEDR7                 GPIO_OSPEEDR_OSPEEDR7_Mask
#define GPIO_OSPEEDR_OSPEEDR7_0               (((uint32_t)0x1 << GPIO_OSPEEDR_OSPEEDR7_Pos))
#define GPIO_OSPEEDR_OSPEEDR7_1               (((uint32_t)0x2 << GPIO_OSPEEDR_OSPEEDR7_Pos))

/************************************ GPIO->PUPDR  **************************************/
#define GPIO_PUPDR_PUPDR0_Pos                 ((uint32_t)0)                     /* Port x pin y pull-up/down configuration bits */
#define GPIO_PUPDR_PUPDR0_Mask                (((uint32_t)0x03) << 0)
#define GPIO_PUPDR_PUPDR0                     GPIO_PUPDR_PUPDR0_Mask
#define GPIO_PUPDR_PUPDR0_0                   (((uint32_t)0x1))
#define GPIO_PUPDR_PUPDR0_1                   (((uint32_t)0x2))
#define GPIO_PUPDR_PUPDR1_Pos                 ((uint32_t)2)                     /* Port x pin y pull-up/down configuration bits */
#define GPIO_PUPDR_PUPDR1_Mask                (((uint32_t)0x03) << 2)
#define GPIO_PUPDR_PUPDR1                     GPIO_PUPDR_PUPDR1_Mask
#define GPIO_PUPDR_PUPDR1_0                   (((uint32_t)0x1 << GPIO_PUPDR_PUPDR1_Pos))
#define GPIO_PUPDR_PUPDR1_1                   (((uint32_t)0x2 << GPIO_PUPDR_PUPDR1_Pos))
#define GPIO_PUPDR_PUPDR2_Pos                 ((uint32_t)4)                     /* Port x pin y pull-up/down configuration bits */
#define GPIO_PUPDR_PUPDR2_Mask                (((uint32_t)0x03) << 4)
#define GPIO_PUPDR_PUPDR2                     GPIO_PUPDR_PUPDR2_Mask
#define GPIO_PUPDR_PUPDR2_0                   (((uint32_t)0x1 << GPIO_PUPDR_PUPDR2_Pos))
#define GPIO_PUPDR_PUPDR2_1                   (((uint32_t)0x2 << GPIO_PUPDR_PUPDR2_Pos))
#define GPIO_PUPDR_PUPDR3_Pos                 ((uint32_t)6)                     /* Port x pin y pull-up/down configuration bits */
#define GPIO_PUPDR_PUPDR3_Mask                (((uint32_t)0x03) << 6)
#define GPIO_PUPDR_PUPDR3                     GPIO_PUPDR_PUPDR3_Mask
#define GPIO_PUPDR_PUPDR3_0                   (((uint32_t)0x1 << GPIO_PUPDR_PUPDR3_Pos))
#define GPIO_PUPDR_PUPDR3_1                   (((uint32_t)0x2 << GPIO_PUPDR_PUPDR3_Pos))
#define GPIO_PUPDR_PUPDR4_Pos                 ((uint32_t)8)                     /* Port x pin y pull-up/down configuration bits */
#define GPIO_PUPDR_PUPDR4_Mask                (((uint32_t)0x03) << 8)
#define GPIO_PUPDR_PUPDR4                     GPIO_PUPDR_PUPDR4_Mask
#define GPIO_PUPDR_PUPDR4_0                   (((uint32_t)0x1 << GPIO_PUPDR_PUPDR4_Pos))
#define GPIO_PUPDR_PUPDR4_1                   (((uint32_t)0x2 << GPIO_PUPDR_PUPDR4_Pos))
#define GPIO_PUPDR_PUPDR5_Pos                 ((uint32_t)10)                    /* Port x pin y pull-up/down configuration bits */
#define GPIO_PUPDR_PUPDR5_Mask                (((uint32_t)0x03) << 10)
#define GPIO_PUPDR_PUPDR5                     GPIO_PUPDR_PUPDR5_Mask
#define GPIO_PUPDR_PUPDR5_0                   (((uint32_t)0x1 << GPIO_PUPDR_PUPDR5_Pos))
#define GPIO_PUPDR_PUPDR5_1                   (((uint32_t)0x2 << GPIO_PUPDR_PUPDR5_Pos))
#define GPIO_PUPDR_PUPDR6_Pos                 ((uint32_t)12)                    /* Port x pin y pull-up/down configuration bits */
#define GPIO_PUPDR_PUPDR6_Mask                (((uint32_t)0x03) << 12)
#define GPIO_PUPDR_PUPDR6                     GPIO_PUPDR_PUPDR6_Mask
#define GPIO_PUPDR_PUPDR6_0                   (((uint32_t)0x1 << GPIO_PUPDR_PUPDR6_Pos))
#define GPIO_PUPDR_PUPDR6_1                   (((uint32_t)0x2 << GPIO_PUPDR_PUPDR6_Pos))
#define GPIO_PUPDR_PUPDR7_Pos                 ((uint32_t)14)                    /* Port x pin y pull-up/down configuration bits */
#define GPIO_PUPDR_PUPDR7_Mask                (((uint32_t)0x03) << 14)
#define GPIO_PUPDR_PUPDR7                     GPIO_PUPDR_PUPDR7_Mask
#define GPIO_PUPDR_PUPDR7_0                   (((uint32_t)0x1 << GPIO_PUPDR_PUPDR7_Pos))
#define GPIO_PUPDR_PUPDR7_1                   (((uint32_t)0x2 << GPIO_PUPDR_PUPDR7_Pos))

/************************************* GPIO->IDR  ***************************************/
#define GPIO_IDR_ID0_Pos                      ((uint32_t)0)                     /* Port x pin y input data */
#define GPIO_IDR_ID0_Mask                     (((uint32_t)0x01) << 0)
#define GPIO_IDR_ID0                          GPIO_IDR_ID0_Mask
#define GPIO_IDR_ID1_Pos                      ((uint32_t)1)                     /* Port x pin y input data */
#define GPIO_IDR_ID1_Mask                     (((uint32_t)0x01) << 1)
#define GPIO_IDR_ID1                          GPIO_IDR_ID1_Mask
#define GPIO_IDR_ID2_Pos                      ((uint32_t)2)                     /* Port x pin y input data */
#define GPIO_IDR_ID2_Mask                     (((uint32_t)0x01) << 2)
#define GPIO_IDR_ID2                          GPIO_IDR_ID2_Mask
#define GPIO_IDR_ID3_Pos                      ((uint32_t)3)                     /* Port x pin y input data */
#define GPIO_IDR_ID3_Mask                     (((uint32_t)0x01) << 3)
#define GPIO_IDR_ID3                          GPIO_IDR_ID3_Mask
#define GPIO_IDR_ID4_Pos                      ((uint32_t)4)                     /* Port x pin y input data */
#define GPIO_IDR_ID4_Mask                     (((uint32_t)0x01) << 4)
#define GPIO_IDR_ID4                          GPIO_IDR_ID4_Mask
#define GPIO_IDR_ID5_Pos                      ((uint32_t)5)                     /* Port x pin y input data */
#define GPIO_IDR_ID5_Mask                     (((uint32_t)0x01) << 5)
#define GPIO_IDR_ID5                          GPIO_IDR_ID5_Mask
#define GPIO_IDR_ID6_Pos                      ((uint32_t)6)                     /* Port x pin y input data */
#define GPIO_IDR_ID6_Mask                     (((uint32_t)0x01) << 6)
#define GPIO_IDR_ID6                          GPIO_IDR_ID6_Mask
#define GPIO_IDR_ID7_Pos                      ((uint32_t)7)                     /* Port x pin y input data */
#define GPIO_IDR_ID7_Mask                     (((uint32_t)0x01) << 7)
#define GPIO_IDR_ID7                          GPIO_IDR_ID7_Mask

/************************************* GPIO->ODR  ***************************************/
#define GPIO_ODR_OD0_Pos                      ((uint32_t)0)                     /* Port x pin y output data */
#define GPIO_ODR_OD0_Mask                     (((uint32_t)0x01) << 0)
#define GPIO_ODR_OD0                          GPIO_ODR_OD0_Mask
#define GPIO_ODR_OD1_Pos                      ((uint32_t)1)                     /* Port x pin y output data */
#define GPIO_ODR_OD1_Mask                     (((uint32_t)0x01) << 1)
#define GPIO_ODR_OD1                          GPIO_ODR_OD1_Mask
#define GPIO_ODR_OD2_Pos                      ((uint32_t)2)                     /* Port x pin y output data */
#define GPIO_ODR_OD2_Mask                     (((uint32_t)0x01) << 2)
#define GPIO_ODR_OD2                          GPIO_ODR_OD2_Mask
#define GPIO_ODR_OD3_Pos                      ((uint32_t)3)                     /* Port x pin y output data */
#define GPIO_ODR_OD3_Mask                     (((uint32_t)0x01) << 3)
#define GPIO_ODR_OD3                          GPIO_ODR_OD3_Mask
#define GPIO_ODR_OD4_Pos                      ((uint32_t)4)                     /* Port x pin y output data */
#define GPIO_ODR_OD4_Mask                     (((uint32_t)0x01) << 4)
#define GPIO_ODR_OD4                          GPIO_ODR_OD4_Mask
#define GPIO_ODR_OD5_Pos                      ((uint32_t)5)                     /* Port x pin y output data */
#define GPIO_ODR_OD5_Mask                     (((uint32_t)0x01) << 5)
#define GPIO_ODR_OD5                          GPIO_ODR_OD5_Mask
#define GPIO_ODR_OD6_Pos                      ((uint32_t)6)                     /* Port x pin y output data */
#define GPIO_ODR_OD6_Mask                     (((uint32_t)0x01) << 6)
#define GPIO_ODR_OD6                          GPIO_ODR_OD6_Mask
#define GPIO_ODR_OD7_Pos                      ((uint32_t)7)                     /* Port x pin y output data */
#define GPIO_ODR_OD7_Mask                     (((uint32_t)0x01) << 7)
#define GPIO_ODR_OD7                          GPIO_ODR_OD7_Mask

/************************************* GPIO->BSRR  **************************************/
#define GPIO_BSRR_BR0_Pos                     ((uint32_t)16)                    /* Port x reset bit y */
#define GPIO_BSRR_BR0_Mask                    (((uint32_t)0x01) << 16)
#define GPIO_BSRR_BR0                         GPIO_BSRR_BR0_Mask
#define GPIO_BSRR_BR1_Pos                     ((uint32_t)17)                    /* Port x reset bit y */
#define GPIO_BSRR_BR1_Mask                    (((uint32_t)0x01) << 17)
#define GPIO_BSRR_BR1                         GPIO_BSRR_BR1_Mask
#define GPIO_BSRR_BR2_Pos                     ((uint32_t)18)                    /* Port x reset bit y */
#define GPIO_BSRR_BR2_Mask                    (((uint32_t)0x01) << 18)
#define GPIO_BSRR_BR2                         GPIO_BSRR_BR2_Mask
#define GPIO_BSRR_BR3_Pos                     ((uint32_t)19)                    /* Port x reset bit y */
#define GPIO_BSRR_BR3_Mask                    (((uint32_t)0x01) << 19)
#define GPIO_BSRR_BR3                         GPIO_BSRR_BR3_Mask
#define GPIO_BSRR_BR4_Pos                     ((uint32_t)20)                    /* Port x reset bit y */
#define GPIO_BSRR_BR4_Mask                    (((uint32_t)0x01) << 20)
#define GPIO_BSRR_BR4                         GPIO_BSRR_BR4_Mask
#define GPIO_BSRR_BR5_Pos                     ((uint32_t)21)                    /* Port x reset bit y */
#define GPIO_BSRR_BR5_Mask                    (((uint32_t)0x01) << 21)
#define GPIO_BSRR_BR5                         GPIO_BSRR_BR5_Mask
#define GPIO_BSRR_BR6_Pos                     ((uint32_t)22)                    /* Port x reset bit y */
#define GPIO_BSRR_BR6_Mask                    (((uint32_t)0x01) << 22)
#define GPIO_BSRR_BR6                         GPIO_BSRR_BR6_Mask
#define GPIO_BSRR_BR7_Pos                     ((uint32_t)23)                    /* Port x reset bit y */
#define GPIO_BSRR_BR7_Mask                    (((uint32_t)0x01) << 23)
#define GPIO_BSRR_BR7                         GPIO_BSRR_BR7_Mask
#define GPIO_BSRR_BS0_Pos                     ((uint32_t)0)                     /* Port x set bit y */
#define GPIO_BSRR_BS0_Mask                    (((uint32_t)0x01) << 0)
#define GPIO_BSRR_BS0                         GPIO_BSRR_BS0_Mask
#define GPIO_BSRR_BS1_Pos                     ((uint32_t)1)                     /* Port x set bit y */
#define GPIO_BSRR_BS1_Mask                    (((uint32_t)0x01) << 1)
#define GPIO_BSRR_BS1                         GPIO_BSRR_BS1_Mask
#define GPIO_BSRR_BS2_Pos                     ((uint32_t)2)                     /* Port x set bit y */
#define GPIO_BSRR_BS2_Mask                    (((uint32_t)0x01) << 2)
#define GPIO_BSRR_BS2                         GPIO_BSRR_BS2_Mask
#define GPIO_BSRR_BS3_Pos                     ((uint32_t)3)                     /* Port x set bit y */
#define GPIO_BSRR_BS3_Mask                    (((uint32_t)0x01) << 3)
#define GPIO_BSRR_BS3                         GPIO_BSRR_BS3_Mask
#define GPIO_BSRR_BS4_Pos                     ((uint32_t)4)                     /* Port x set bit y */
#define GPIO_BSRR_BS4_Mask                    (((uint32_t)0x01) << 4)
#define GPIO_BSRR_BS4                         GPIO_BSRR_BS4_Mask
#define GPIO_BSRR_BS5_Pos                     ((uint32_t)5)                     /* Port x set bit y */
#define GPIO_BSRR_BS5_Mask                    (((uint32_t)0x01) << 5)
#define GPIO_BSRR_BS5                         GPIO_BSRR_BS5_Mask
#define GPIO_BSRR_BS6_Pos                     ((uint32_t)6)                     /* Port x set bit y */
#define GPIO_BSRR_BS6_Mask                    (((uint32_t)0x01) << 6)
#define GPIO_BSRR_BS6                         GPIO_BSRR_BS6_Mask
#define GPIO_BSRR_BS7_Pos                     ((uint32_t)7)                     /* Port x set bit y */
#define GPIO_BSRR_BS7_Mask                    (((uint32_t)0x01) << 7)
#define GPIO_BSRR_BS7                         GPIO_BSRR_BS7_Mask

/************************************* GPIO->LCKR  **************************************/
#define GPIO_LCKR_LCKK_Pos                    ((uint32_t)16)                    /* Lock key */
#define GPIO_LCKR_LCKK_Mask                   (((uint32_t)0x01) << 16)
#define GPIO_LCKR_LCKK                        GPIO_LCKR_LCKK_Mask
#define GPIO_LCKR_LCK0_Pos                    ((uint32_t)0)                     /* Port x pin y lock bit y */
#define GPIO_LCKR_LCK0_Mask                   (((uint32_t)0x01) << 0)
#define GPIO_LCKR_LCK0                        GPIO_LCKR_LCK0_Mask
#define GPIO_LCKR_LCK1_Pos                    ((uint32_t)1)                     /* Port x pin y lock bit y */
#define GPIO_LCKR_LCK1_Mask                   (((uint32_t)0x01) << 1)
#define GPIO_LCKR_LCK1                        GPIO_LCKR_LCK1_Mask
#define GPIO_LCKR_LCK2_Pos                    ((uint32_t)2)                     /* Port x pin y lock bit y */
#define GPIO_LCKR_LCK2_Mask                   (((uint32_t)0x01) << 2)
#define GPIO_LCKR_LCK2                        GPIO_LCKR_LCK2_Mask
#define GPIO_LCKR_LCK3_Pos                    ((uint32_t)3)                     /* Port x pin y lock bit y */
#define GPIO_LCKR_LCK3_Mask                   (((uint32_t)0x01) << 3)
#define GPIO_LCKR_LCK3                        GPIO_LCKR_LCK3_Mask
#define GPIO_LCKR_LCK4_Pos                    ((uint32_t)4)                     /* Port x pin y lock bit y */
#define GPIO_LCKR_LCK4_Mask                   (((uint32_t)0x01) << 4)
#define GPIO_LCKR_LCK4                        GPIO_LCKR_LCK4_Mask
#define GPIO_LCKR_LCK5_Pos                    ((uint32_t)5)                     /* Port x pin y lock bit y */
#define GPIO_LCKR_LCK5_Mask                   (((uint32_t)0x01) << 5)
#define GPIO_LCKR_LCK5                        GPIO_LCKR_LCK5_Mask
#define GPIO_LCKR_LCK6_Pos                    ((uint32_t)6)                     /* Port x pin y lock bit y */
#define GPIO_LCKR_LCK6_Mask                   (((uint32_t)0x01) << 6)
#define GPIO_LCKR_LCK6                        GPIO_LCKR_LCK6_Mask
#define GPIO_LCKR_LCK7_Pos                    ((uint32_t)7)                     /* Port x pin y lock bit y */
#define GPIO_LCKR_LCK7_Mask                   (((uint32_t)0x01) << 7)
#define GPIO_LCKR_LCK7                        GPIO_LCKR_LCK7_Mask

/************************************* GPIO->AFR  ***************************************/
#define GPIO_AFR_AFR0_Pos                     ((uint32_t)0)                     /* Alternate function selection bits for port x pin y */
#define GPIO_AFR_AFR0_Mask                    (((uint32_t)0x0F) << 0)
#define GPIO_AFR_AFR0                         GPIO_AFR_AFR0_Mask
#define GPIO_AFR_AFR0_0                       (((uint32_t)0x1))
#define GPIO_AFR_AFR0_1                       (((uint32_t)0x2))
#define GPIO_AFR_AFR0_2                       (((uint32_t)0x4))
#define GPIO_AFR_AFR0_3                       (((uint32_t)0x8))
#define GPIO_AFR_AFR1_Pos                     ((uint32_t)4)                     /* Alternate function selection bits for port x pin y */
#define GPIO_AFR_AFR1_Mask                    (((uint32_t)0x0F) << 4)
#define GPIO_AFR_AFR1                         GPIO_AFR_AFR1_Mask
#define GPIO_AFR_AFR1_0                       (((uint32_t)0x1 << GPIO_AFR_AFR1_Pos))
#define GPIO_AFR_AFR1_1                       (((uint32_t)0x2 << GPIO_AFR_AFR1_Pos))
#define GPIO_AFR_AFR1_2                       (((uint32_t)0x4 << GPIO_AFR_AFR1_Pos))
#define GPIO_AFR_AFR1_3                       (((uint32_t)0x8 << GPIO_AFR_AFR1_Pos))
#define GPIO_AFR_AFR2_Pos                     ((uint32_t)8)                     /* Alternate function selection bits for port x pin y */
#define GPIO_AFR_AFR2_Mask                    (((uint32_t)0x0F) << 8)
#define GPIO_AFR_AFR2                         GPIO_AFR_AFR2_Mask
#define GPIO_AFR_AFR2_0                       (((uint32_t)0x1 << GPIO_AFR_AFR2_Pos))
#define GPIO_AFR_AFR2_1                       (((uint32_t)0x2 << GPIO_AFR_AFR2_Pos))
#define GPIO_AFR_AFR2_2                       (((uint32_t)0x4 << GPIO_AFR_AFR2_Pos))
#define GPIO_AFR_AFR2_3                       (((uint32_t)0x8 << GPIO_AFR_AFR2_Pos))
#define GPIO_AFR_AFR3_Pos                     ((uint32_t)12)                    /* Alternate function selection bits for port x pin y */
#define GPIO_AFR_AFR3_Mask                    (((uint32_t)0x0F) << 12)
#define GPIO_AFR_AFR3                         GPIO_AFR_AFR3_Mask
#define GPIO_AFR_AFR3_0                       (((uint32_t)0x1 << GPIO_AFR_AFR3_Pos))
#define GPIO_AFR_AFR3_1                       (((uint32_t)0x2 << GPIO_AFR_AFR3_Pos))
#define GPIO_AFR_AFR3_2                       (((uint32_t)0x4 << GPIO_AFR_AFR3_Pos))
#define GPIO_AFR_AFR3_3                       (((uint32_t)0x8 << GPIO_AFR_AFR3_Pos))
#define GPIO_AFR_AFR4_Pos                     ((uint32_t)16)                    /* Alternate function selection bits for port x pin y */
#define GPIO_AFR_AFR4_Mask                    (((uint32_t)0x0F) << 16)
#define GPIO_AFR_AFR4                         GPIO_AFR_AFR4_Mask
#define GPIO_AFR_AFR4_0                       (((uint32_t)0x1 << GPIO_AFR_AFR4_Pos))
#define GPIO_AFR_AFR4_1                       (((uint32_t)0x2 << GPIO_AFR_AFR4_Pos))
#define GPIO_AFR_AFR4_2                       (((uint32_t)0x4 << GPIO_AFR_AFR4_Pos))
#define GPIO_AFR_AFR4_3                       (((uint32_t)0x8 << GPIO_AFR_AFR4_Pos))
#define GPIO_AFR_AFR5_Pos                     ((uint32_t)20)                    /* Alternate function selection bits for port x pin y */
#define GPIO_AFR_AFR5_Mask                    (((uint32_t)0x0F) << 20)
#define GPIO_AFR_AFR5                         GPIO_AFR_AFR5_Mask
#define GPIO_AFR_AFR5_0                       (((uint32_t)0x1 << GPIO_AFR_AFR5_Pos))
#define GPIO_AFR_AFR5_1                       (((uint32_t)0x2 << GPIO_AFR_AFR5_Pos))
#define GPIO_AFR_AFR5_2                       (((uint32_t)0x4 << GPIO_AFR_AFR5_Pos))
#define GPIO_AFR_AFR5_3                       (((uint32_t)0x8 << GPIO_AFR_AFR5_Pos))
#define GPIO_AFR_AFR6_Pos                     ((uint32_t)24)                    /* Alternate function selection bits for port x pin y */
#define GPIO_AFR_AFR6_Mask                    (((uint32_t)0x0F) << 24)
#define GPIO_AFR_AFR6                         GPIO_AFR_AFR6_Mask
#define GPIO_AFR_AFR6_0                       (((uint32_t)0x1 << GPIO_AFR_AFR6_Pos))
#define GPIO_AFR_AFR6_1                       (((uint32_t)0x2 << GPIO_AFR_AFR6_Pos))
#define GPIO_AFR_AFR6_2                       (((uint32_t)0x4 << GPIO_AFR_AFR6_Pos))
#define GPIO_AFR_AFR6_3                       (((uint32_t)0x8 << GPIO_AFR_AFR6_Pos))
#define GPIO_AFR_AFR7_Pos                     ((uint32_t)28)                    /* Alternate function selection bits for port x pin y */
#define GPIO_AFR_AFR7_Mask                    (((uint32_t)0x0F) << 28)
#define GPIO_AFR_AFR7                         GPIO_AFR_AFR7_Mask
#define GPIO_AFR_AFR7_0                       (((uint32_t)0x1 << GPIO_AFR_AFR7_Pos))
#define GPIO_AFR_AFR7_1                       (((uint32_t)0x2 << GPIO_AFR_AFR7_Pos))
#define GPIO_AFR_AFR7_2                       (((uint32_t)0x4 << GPIO_AFR_AFR7_Pos))
#define GPIO_AFR_AFR7_3                       (((uint32_t)0x8 << GPIO_AFR_AFR7_Pos))

/************************************* GPIO->BRR  ***************************************/
#define GPIO_BRR_BR0_Pos                      ((uint32_t)0)                     /* Port x pin y reset bit y */
#define GPIO_BRR_BR0_Mask                     (((uint32_t)0x01) << 0)
#define GPIO_BRR_BR0                          GPIO_BRR_BR0_Mask
#define GPIO_BRR_BR1_Pos                      ((uint32_t)1)                     /* Port x pin y reset bit y */
#define GPIO_BRR_BR1_Mask                     (((uint32_t)0x01) << 1)
#define GPIO_BRR_BR1                          GPIO_BRR_BR1_Mask
#define GPIO_BRR_BR2_Pos                      ((uint32_t)2)                     /* Port x pin y reset bit y */
#define GPIO_BRR_BR2_Mask                     (((uint32_t)0x01) << 2)
#define GPIO_BRR_BR2                          GPIO_BRR_BR2_Mask
#define GPIO_BRR_BR3_Pos                      ((uint32_t)3)                     /* Port x pin y reset bit y */
#define GPIO_BRR_BR3_Mask                     (((uint32_t)0x01) << 3)
#define GPIO_BRR_BR3                          GPIO_BRR_BR3_Mask
#define GPIO_BRR_BR4_Pos                      ((uint32_t)4)                     /* Port x pin y reset bit y */
#define GPIO_BRR_BR4_Mask                     (((uint32_t)0x01) << 4)
#define GPIO_BRR_BR4                          GPIO_BRR_BR4_Mask
#define GPIO_BRR_BR5_Pos                      ((uint32_t)5)                     /* Port x pin y reset bit y */
#define GPIO_BRR_BR5_Mask                     (((uint32_t)0x01) << 5)
#define GPIO_BRR_BR5                          GPIO_BRR_BR5_Mask
#define GPIO_BRR_BR6_Pos                      ((uint32_t)6)                     /* Port x pin y reset bit y */
#define GPIO_BRR_BR6_Mask                     (((uint32_t)0x01) << 6)
#define GPIO_BRR_BR6                          GPIO_BRR_BR6_Mask
#define GPIO_BRR_BR7_Pos                      ((uint32_t)7)                     /* Port x pin y reset bit y */
#define GPIO_BRR_BR7_Mask                     (((uint32_t)0x01) << 7)
#define GPIO_BRR_BR7                          GPIO_BRR_BR7_Mask

/************************************* GPIO->IOSR  **************************************/
#define GPIO_IOSR_SEN0_Pos                    ((uint32_t)0)                     /* Port x pin y Schmitt switch */
#define GPIO_IOSR_SEN0_Mask                   (((uint32_t)0x01) << 0)
#define GPIO_IOSR_SEN0                        GPIO_IOSR_SEN0_Mask
#define GPIO_IOSR_SEN1_Pos                    ((uint32_t)1)                     /* Port x pin y Schmitt switch */
#define GPIO_IOSR_SEN1_Mask                   (((uint32_t)0x01) << 1)
#define GPIO_IOSR_SEN1                        GPIO_IOSR_SEN1_Mask
#define GPIO_IOSR_SEN2_Pos                    ((uint32_t)2)                     /* Port x pin y Schmitt switch */
#define GPIO_IOSR_SEN2_Mask                   (((uint32_t)0x01) << 2)
#define GPIO_IOSR_SEN2                        GPIO_IOSR_SEN2_Mask
#define GPIO_IOSR_SEN3_Pos                    ((uint32_t)3)                     /* Port x pin y Schmitt switch */
#define GPIO_IOSR_SEN3_Mask                   (((uint32_t)0x01) << 3)
#define GPIO_IOSR_SEN3                        GPIO_IOSR_SEN3_Mask
#define GPIO_IOSR_SEN4_Pos                    ((uint32_t)4)                     /* Port x pin y Schmitt switch */
#define GPIO_IOSR_SEN4_Mask                   (((uint32_t)0x01) << 4)
#define GPIO_IOSR_SEN4                        GPIO_IOSR_SEN4_Mask
#define GPIO_IOSR_SEN5_Pos                    ((uint32_t)5)                     /* Port x pin y Schmitt switch */
#define GPIO_IOSR_SEN5_Mask                   (((uint32_t)0x01) << 5)
#define GPIO_IOSR_SEN5                        GPIO_IOSR_SEN5_Mask
#define GPIO_IOSR_SEN6_Pos                    ((uint32_t)6)                     /* Port x pin y Schmitt switch */
#define GPIO_IOSR_SEN6_Mask                   (((uint32_t)0x01) << 6)
#define GPIO_IOSR_SEN6                        GPIO_IOSR_SEN6_Mask
#define GPIO_IOSR_SEN7_Pos                    ((uint32_t)7)                     /* Port x pin y Schmitt switch */
#define GPIO_IOSR_SEN7_Mask                   (((uint32_t)0x01) << 7)
#define GPIO_IOSR_SEN7                        GPIO_IOSR_SEN7_Mask

/*****************************************************************************************
*                                    Peripheral IOMUX                                    *
*****************************************************************************************/
typedef struct{
  __IO uint32_t PIN_FUNC_SEL;           /* PIN_FUNC_SEL */
  __IO uint32_t PKG_PIN_SEL;            /* PKG_PIN_SEL */
  __IO uint32_t NRST_PIN_KEY;           /* NRST_PIN_KEY */
  __IO uint32_t NRST_PA0_SEL;           /* NRST_PA0_SEL */
}IOMUX_TypeDef;

/******************************** IOMUX->PIN_FUNC_SEL  **********************************/
#define IOMUX_PIN_FUNC_SEL_PD7_BKIN_SEL_Pos   ((uint32_t)3)                     /* Pin functional selection for PD5 */
#define IOMUX_PIN_FUNC_SEL_PD7_BKIN_SEL_Mask  (((uint32_t)0x01) << 3)
#define IOMUX_PIN_FUNC_SEL_PD7_BKIN_SEL       IOMUX_PIN_FUNC_SEL_PD7_BKIN_SEL_Mask
#define IOMUX_PIN_FUNC_SEL_PB5_I2C_SEL_Pos    ((uint32_t)2)                     /* Pin functional selection for PB5 */
#define IOMUX_PIN_FUNC_SEL_PB5_I2C_SEL_Mask   (((uint32_t)0x01) << 2)
#define IOMUX_PIN_FUNC_SEL_PB5_I2C_SEL        IOMUX_PIN_FUNC_SEL_PB5_I2C_SEL_Mask
#define IOMUX_PIN_FUNC_SEL_PC4_TIM1_SEL_Pos   ((uint32_t)1)                     /* Pin functional selection for PC4 */
#define IOMUX_PIN_FUNC_SEL_PC4_TIM1_SEL_Mask  (((uint32_t)0x01) << 1)
#define IOMUX_PIN_FUNC_SEL_PC4_TIM1_SEL       IOMUX_PIN_FUNC_SEL_PC4_TIM1_SEL_Mask
#define IOMUX_PIN_FUNC_SEL_PC3_TIM1_SEL_Pos   ((uint32_t)0)                     /* Pin functional selection for PC3 */
#define IOMUX_PIN_FUNC_SEL_PC3_TIM1_SEL_Mask  (((uint32_t)0x01) << 0)
#define IOMUX_PIN_FUNC_SEL_PC3_TIM1_SEL       IOMUX_PIN_FUNC_SEL_PC3_TIM1_SEL_Mask

/********************************* IOMUX->PKG_PIN_SEL  **********************************/
#define IOMUX_PKG_PIN_SEL_PD6_PIN_SEL_Pos     ((uint32_t)7)                     /* Pin MUX for PD6 */
#define IOMUX_PKG_PIN_SEL_PD6_PIN_SEL_Mask    (((uint32_t)0x03) << 7)
#define IOMUX_PKG_PIN_SEL_PD6_PIN_SEL         IOMUX_PKG_PIN_SEL_PD6_PIN_SEL_Mask
#define IOMUX_PKG_PIN_SEL_PD6_PIN_SEL_0       (((uint32_t)0x1 << IOMUX_PKG_PIN_SEL_PD6_PIN_SEL_Pos))
#define IOMUX_PKG_PIN_SEL_PD6_PIN_SEL_1       (((uint32_t)0x2 << IOMUX_PKG_PIN_SEL_PD6_PIN_SEL_Pos))
#define IOMUX_PKG_PIN_SEL_PD5_PIN_SEL_Pos     ((uint32_t)5)                     /* Pin MUX for PD5 */
#define IOMUX_PKG_PIN_SEL_PD5_PIN_SEL_Mask    (((uint32_t)0x03) << 5)
#define IOMUX_PKG_PIN_SEL_PD5_PIN_SEL         IOMUX_PKG_PIN_SEL_PD5_PIN_SEL_Mask
#define IOMUX_PKG_PIN_SEL_PD5_PIN_SEL_0       (((uint32_t)0x1 << IOMUX_PKG_PIN_SEL_PD5_PIN_SEL_Pos))
#define IOMUX_PKG_PIN_SEL_PD5_PIN_SEL_1       (((uint32_t)0x2 << IOMUX_PKG_PIN_SEL_PD5_PIN_SEL_Pos))
#define IOMUX_PKG_PIN_SEL_PC4_PIN_SEL_Pos     ((uint32_t)3)                     /* Pin MUX for PC4 */
#define IOMUX_PKG_PIN_SEL_PC4_PIN_SEL_Mask    (((uint32_t)0x03) << 3)
#define IOMUX_PKG_PIN_SEL_PC4_PIN_SEL         IOMUX_PKG_PIN_SEL_PC4_PIN_SEL_Mask
#define IOMUX_PKG_PIN_SEL_PC4_PIN_SEL_0       (((uint32_t)0x1 << IOMUX_PKG_PIN_SEL_PC4_PIN_SEL_Pos))
#define IOMUX_PKG_PIN_SEL_PC4_PIN_SEL_1       (((uint32_t)0x2 << IOMUX_PKG_PIN_SEL_PC4_PIN_SEL_Pos))
#define IOMUX_PKG_PIN_SEL_PB5_PIN_SEL_Pos     ((uint32_t)1)                     /* Pin MUX for PB5 */
#define IOMUX_PKG_PIN_SEL_PB5_PIN_SEL_Mask    (((uint32_t)0x03) << 1)
#define IOMUX_PKG_PIN_SEL_PB5_PIN_SEL         IOMUX_PKG_PIN_SEL_PB5_PIN_SEL_Mask
#define IOMUX_PKG_PIN_SEL_PB5_PIN_SEL_0       (((uint32_t)0x1 << IOMUX_PKG_PIN_SEL_PB5_PIN_SEL_Pos))
#define IOMUX_PKG_PIN_SEL_PB5_PIN_SEL_1       (((uint32_t)0x2 << IOMUX_PKG_PIN_SEL_PB5_PIN_SEL_Pos))
#define IOMUX_PKG_PIN_SEL_NRSTPA0_PIN_SEL_Pos  ((uint32_t)0)                    /* Pin MUX for NRST */
#define IOMUX_PKG_PIN_SEL_NRSTPA0_PIN_SEL_Mask  (((uint32_t)0x01) << 0)
#define IOMUX_PKG_PIN_SEL_NRSTPA0_PIN_SEL     IOMUX_PKG_PIN_SEL_NRSTPA0_PIN_SEL_Mask

/******************************** IOMUX->NRST_PIN_KEY  **********************************/
#define IOMUX_NRST_PIN_KEY_NRST_PIN_KEY_Pos   ((uint32_t)0)                     /* The key of pin NRST change to PA0 */
#define IOMUX_NRST_PIN_KEY_NRST_PIN_KEY_Mask  (((uint32_t)0xFFFF) << 0)
#define IOMUX_NRST_PIN_KEY_NRST_PIN_KEY       IOMUX_NRST_PIN_KEY_NRST_PIN_KEY_Mask

/******************************** IOMUX->NRST_PA0_SEL  **********************************/
#define IOMUX_NRST_PA0_SEL_NRST_PA0_SEL_Pos   ((uint32_t)0)                     /* Pin Functional Selection for NRST/PA0 */
#define IOMUX_NRST_PA0_SEL_NRST_PA0_SEL_Mask  (((uint32_t)0x01) << 0)
#define IOMUX_NRST_PA0_SEL_NRST_PA0_SEL       IOMUX_NRST_PA0_SEL_NRST_PA0_SEL_Mask

/*****************************************************************************************
*                                     Peripheral EXTI                                    *
*****************************************************************************************/
typedef struct{
  __IO uint32_t IMR;                    /* IMR */
  __IO uint32_t EMR;                    /* EMR */
  __IO uint32_t RTSR;                   /* RTSR */
  __IO uint32_t FTSR;                   /* FTSR */
  __IO uint32_t SWIER;                  /* SWIER */
  __IO uint32_t PR;                     /* PR */
}EXTI_TypeDef;

/************************************* EXTI->IMR  ***************************************/
#define EXTI_IMR_IM10_Pos                     ((uint32_t)10)                    /* Interrupt mask on line x */
#define EXTI_IMR_IM10_Mask                    (((uint32_t)0x01) << 10)
#define EXTI_IMR_IM10                         EXTI_IMR_IM10_Mask
#define EXTI_IMR_IM11_Pos                     ((uint32_t)11)                    /* Interrupt mask on line x */
#define EXTI_IMR_IM11_Mask                    (((uint32_t)0x01) << 11)
#define EXTI_IMR_IM11                         EXTI_IMR_IM11_Mask
#define EXTI_IMR_IM0_Pos                      ((uint32_t)0)                     /* Interrupt mask on line x */
#define EXTI_IMR_IM0_Mask                     (((uint32_t)0x01) << 0)
#define EXTI_IMR_IM0                          EXTI_IMR_IM0_Mask
#define EXTI_IMR_IM1_Pos                      ((uint32_t)1)                     /* Interrupt mask on line x */
#define EXTI_IMR_IM1_Mask                     (((uint32_t)0x01) << 1)
#define EXTI_IMR_IM1                          EXTI_IMR_IM1_Mask
#define EXTI_IMR_IM2_Pos                      ((uint32_t)2)                     /* Interrupt mask on line x */
#define EXTI_IMR_IM2_Mask                     (((uint32_t)0x01) << 2)
#define EXTI_IMR_IM2                          EXTI_IMR_IM2_Mask
#define EXTI_IMR_IM3_Pos                      ((uint32_t)3)                     /* Interrupt mask on line x */
#define EXTI_IMR_IM3_Mask                     (((uint32_t)0x01) << 3)
#define EXTI_IMR_IM3                          EXTI_IMR_IM3_Mask
#define EXTI_IMR_IM4_Pos                      ((uint32_t)4)                     /* Interrupt mask on line x */
#define EXTI_IMR_IM4_Mask                     (((uint32_t)0x01) << 4)
#define EXTI_IMR_IM4                          EXTI_IMR_IM4_Mask
#define EXTI_IMR_IM5_Pos                      ((uint32_t)5)                     /* Interrupt mask on line x */
#define EXTI_IMR_IM5_Mask                     (((uint32_t)0x01) << 5)
#define EXTI_IMR_IM5                          EXTI_IMR_IM5_Mask
#define EXTI_IMR_IM6_Pos                      ((uint32_t)6)                     /* Interrupt mask on line x */
#define EXTI_IMR_IM6_Mask                     (((uint32_t)0x01) << 6)
#define EXTI_IMR_IM6                          EXTI_IMR_IM6_Mask
#define EXTI_IMR_IM7_Pos                      ((uint32_t)7)                     /* Interrupt mask on line x */
#define EXTI_IMR_IM7_Mask                     (((uint32_t)0x01) << 7)
#define EXTI_IMR_IM7                          EXTI_IMR_IM7_Mask
#define EXTI_IMR_IM8_Pos                      ((uint32_t)8)                     /* Interrupt mask on line x */
#define EXTI_IMR_IM8_Mask                     (((uint32_t)0x01) << 8)
#define EXTI_IMR_IM8                          EXTI_IMR_IM8_Mask

/************************************* EXTI->EMR  ***************************************/
#define EXTI_EMR_EM10_Pos                     ((uint32_t)10)                    /* Event mask on line x */
#define EXTI_EMR_EM10_Mask                    (((uint32_t)0x01) << 10)
#define EXTI_EMR_EM10                         EXTI_EMR_EM10_Mask
#define EXTI_EMR_EM11_Pos                     ((uint32_t)11)                    /* Event mask on line x */
#define EXTI_EMR_EM11_Mask                    (((uint32_t)0x01) << 11)
#define EXTI_EMR_EM11                         EXTI_EMR_EM11_Mask
#define EXTI_EMR_EM0_Pos                      ((uint32_t)0)                     /* Event mask on line x */
#define EXTI_EMR_EM0_Mask                     (((uint32_t)0x01) << 0)
#define EXTI_EMR_EM0                          EXTI_EMR_EM0_Mask
#define EXTI_EMR_EM1_Pos                      ((uint32_t)1)                     /* Event mask on line x */
#define EXTI_EMR_EM1_Mask                     (((uint32_t)0x01) << 1)
#define EXTI_EMR_EM1                          EXTI_EMR_EM1_Mask
#define EXTI_EMR_EM2_Pos                      ((uint32_t)2)                     /* Event mask on line x */
#define EXTI_EMR_EM2_Mask                     (((uint32_t)0x01) << 2)
#define EXTI_EMR_EM2                          EXTI_EMR_EM2_Mask
#define EXTI_EMR_EM3_Pos                      ((uint32_t)3)                     /* Event mask on line x */
#define EXTI_EMR_EM3_Mask                     (((uint32_t)0x01) << 3)
#define EXTI_EMR_EM3                          EXTI_EMR_EM3_Mask
#define EXTI_EMR_EM4_Pos                      ((uint32_t)4)                     /* Event mask on line x */
#define EXTI_EMR_EM4_Mask                     (((uint32_t)0x01) << 4)
#define EXTI_EMR_EM4                          EXTI_EMR_EM4_Mask
#define EXTI_EMR_EM5_Pos                      ((uint32_t)5)                     /* Event mask on line x */
#define EXTI_EMR_EM5_Mask                     (((uint32_t)0x01) << 5)
#define EXTI_EMR_EM5                          EXTI_EMR_EM5_Mask
#define EXTI_EMR_EM6_Pos                      ((uint32_t)6)                     /* Event mask on line x */
#define EXTI_EMR_EM6_Mask                     (((uint32_t)0x01) << 6)
#define EXTI_EMR_EM6                          EXTI_EMR_EM6_Mask
#define EXTI_EMR_EM7_Pos                      ((uint32_t)7)                     /* Event mask on line x */
#define EXTI_EMR_EM7_Mask                     (((uint32_t)0x01) << 7)
#define EXTI_EMR_EM7                          EXTI_EMR_EM7_Mask
#define EXTI_EMR_EM8_Pos                      ((uint32_t)8)                     /* Event mask on line x */
#define EXTI_EMR_EM8_Mask                     (((uint32_t)0x01) << 8)
#define EXTI_EMR_EM8                          EXTI_EMR_EM8_Mask

/************************************* EXTI->RTSR  **************************************/
#define EXTI_RTSR_RT11_Pos                    ((uint32_t)11)                    /* Rising trigger event configuration bit of line 11 */
#define EXTI_RTSR_RT11_Mask                   (((uint32_t)0x01) << 11)
#define EXTI_RTSR_RT11                        EXTI_RTSR_RT11_Mask
#define EXTI_RTSR_RT0_Pos                     ((uint32_t)0)                     /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_RT0_Mask                    (((uint32_t)0x01) << 0)
#define EXTI_RTSR_RT0                         EXTI_RTSR_RT0_Mask
#define EXTI_RTSR_RT1_Pos                     ((uint32_t)1)                     /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_RT1_Mask                    (((uint32_t)0x01) << 1)
#define EXTI_RTSR_RT1                         EXTI_RTSR_RT1_Mask
#define EXTI_RTSR_RT2_Pos                     ((uint32_t)2)                     /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_RT2_Mask                    (((uint32_t)0x01) << 2)
#define EXTI_RTSR_RT2                         EXTI_RTSR_RT2_Mask
#define EXTI_RTSR_RT3_Pos                     ((uint32_t)3)                     /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_RT3_Mask                    (((uint32_t)0x01) << 3)
#define EXTI_RTSR_RT3                         EXTI_RTSR_RT3_Mask
#define EXTI_RTSR_RT4_Pos                     ((uint32_t)4)                     /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_RT4_Mask                    (((uint32_t)0x01) << 4)
#define EXTI_RTSR_RT4                         EXTI_RTSR_RT4_Mask
#define EXTI_RTSR_RT5_Pos                     ((uint32_t)5)                     /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_RT5_Mask                    (((uint32_t)0x01) << 5)
#define EXTI_RTSR_RT5                         EXTI_RTSR_RT5_Mask
#define EXTI_RTSR_RT6_Pos                     ((uint32_t)6)                     /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_RT6_Mask                    (((uint32_t)0x01) << 6)
#define EXTI_RTSR_RT6                         EXTI_RTSR_RT6_Mask
#define EXTI_RTSR_RT7_Pos                     ((uint32_t)7)                     /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_RT7_Mask                    (((uint32_t)0x01) << 7)
#define EXTI_RTSR_RT7                         EXTI_RTSR_RT7_Mask

/************************************* EXTI->FTSR  **************************************/
#define EXTI_FTSR_FT11_Pos                    ((uint32_t)11)                    /* Falling trigger event configuration bit of line 11 */
#define EXTI_FTSR_FT11_Mask                   (((uint32_t)0x01) << 11)
#define EXTI_FTSR_FT11                        EXTI_FTSR_FT11_Mask
#define EXTI_FTSR_FT0_Pos                     ((uint32_t)0)                     /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_FT0_Mask                    (((uint32_t)0x01) << 0)
#define EXTI_FTSR_FT0                         EXTI_FTSR_FT0_Mask
#define EXTI_FTSR_FT1_Pos                     ((uint32_t)1)                     /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_FT1_Mask                    (((uint32_t)0x01) << 1)
#define EXTI_FTSR_FT1                         EXTI_FTSR_FT1_Mask
#define EXTI_FTSR_FT2_Pos                     ((uint32_t)2)                     /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_FT2_Mask                    (((uint32_t)0x01) << 2)
#define EXTI_FTSR_FT2                         EXTI_FTSR_FT2_Mask
#define EXTI_FTSR_FT3_Pos                     ((uint32_t)3)                     /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_FT3_Mask                    (((uint32_t)0x01) << 3)
#define EXTI_FTSR_FT3                         EXTI_FTSR_FT3_Mask
#define EXTI_FTSR_FT4_Pos                     ((uint32_t)4)                     /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_FT4_Mask                    (((uint32_t)0x01) << 4)
#define EXTI_FTSR_FT4                         EXTI_FTSR_FT4_Mask
#define EXTI_FTSR_FT5_Pos                     ((uint32_t)5)                     /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_FT5_Mask                    (((uint32_t)0x01) << 5)
#define EXTI_FTSR_FT5                         EXTI_FTSR_FT5_Mask
#define EXTI_FTSR_FT6_Pos                     ((uint32_t)6)                     /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_FT6_Mask                    (((uint32_t)0x01) << 6)
#define EXTI_FTSR_FT6                         EXTI_FTSR_FT6_Mask
#define EXTI_FTSR_FT7_Pos                     ((uint32_t)7)                     /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_FT7_Mask                    (((uint32_t)0x01) << 7)
#define EXTI_FTSR_FT7                         EXTI_FTSR_FT7_Mask

/************************************ EXTI->SWIER  **************************************/
#define EXTI_SWIER_SWI11_Pos                  ((uint32_t)11)                    /* Software interrupt on line 11 */
#define EXTI_SWIER_SWI11_Mask                 (((uint32_t)0x01) << 11)
#define EXTI_SWIER_SWI11                      EXTI_SWIER_SWI11_Mask
#define EXTI_SWIER_SWI0_Pos                   ((uint32_t)0)                     /* Software interrupt on line x */
#define EXTI_SWIER_SWI0_Mask                  (((uint32_t)0x01) << 0)
#define EXTI_SWIER_SWI0                       EXTI_SWIER_SWI0_Mask
#define EXTI_SWIER_SWI1_Pos                   ((uint32_t)1)                     /* Software interrupt on line x */
#define EXTI_SWIER_SWI1_Mask                  (((uint32_t)0x01) << 1)
#define EXTI_SWIER_SWI1                       EXTI_SWIER_SWI1_Mask
#define EXTI_SWIER_SWI2_Pos                   ((uint32_t)2)                     /* Software interrupt on line x */
#define EXTI_SWIER_SWI2_Mask                  (((uint32_t)0x01) << 2)
#define EXTI_SWIER_SWI2                       EXTI_SWIER_SWI2_Mask
#define EXTI_SWIER_SWI3_Pos                   ((uint32_t)3)                     /* Software interrupt on line x */
#define EXTI_SWIER_SWI3_Mask                  (((uint32_t)0x01) << 3)
#define EXTI_SWIER_SWI3                       EXTI_SWIER_SWI3_Mask
#define EXTI_SWIER_SWI4_Pos                   ((uint32_t)4)                     /* Software interrupt on line x */
#define EXTI_SWIER_SWI4_Mask                  (((uint32_t)0x01) << 4)
#define EXTI_SWIER_SWI4                       EXTI_SWIER_SWI4_Mask
#define EXTI_SWIER_SWI5_Pos                   ((uint32_t)5)                     /* Software interrupt on line x */
#define EXTI_SWIER_SWI5_Mask                  (((uint32_t)0x01) << 5)
#define EXTI_SWIER_SWI5                       EXTI_SWIER_SWI5_Mask
#define EXTI_SWIER_SWI6_Pos                   ((uint32_t)6)                     /* Software interrupt on line x */
#define EXTI_SWIER_SWI6_Mask                  (((uint32_t)0x01) << 6)
#define EXTI_SWIER_SWI6                       EXTI_SWIER_SWI6_Mask
#define EXTI_SWIER_SWI7_Pos                   ((uint32_t)7)                     /* Software interrupt on line x */
#define EXTI_SWIER_SWI7_Mask                  (((uint32_t)0x01) << 7)
#define EXTI_SWIER_SWI7                       EXTI_SWIER_SWI7_Mask

/************************************** EXTI->PR  ***************************************/
#define EXTI_PR_PIF11_Pos                     ((uint32_t)11)                    /* Pending interrupt flag on line 11 */
#define EXTI_PR_PIF11_Mask                    (((uint32_t)0x01) << 11)
#define EXTI_PR_PIF11                         EXTI_PR_PIF11_Mask
#define EXTI_PR_PIF0_Pos                      ((uint32_t)0)                     /* Pending interrupt flag on line x */
#define EXTI_PR_PIF0_Mask                     (((uint32_t)0x01) << 0)
#define EXTI_PR_PIF0                          EXTI_PR_PIF0_Mask
#define EXTI_PR_PIF1_Pos                      ((uint32_t)1)                     /* Pending interrupt flag on line x */
#define EXTI_PR_PIF1_Mask                     (((uint32_t)0x01) << 1)
#define EXTI_PR_PIF1                          EXTI_PR_PIF1_Mask
#define EXTI_PR_PIF2_Pos                      ((uint32_t)2)                     /* Pending interrupt flag on line x */
#define EXTI_PR_PIF2_Mask                     (((uint32_t)0x01) << 2)
#define EXTI_PR_PIF2                          EXTI_PR_PIF2_Mask
#define EXTI_PR_PIF3_Pos                      ((uint32_t)3)                     /* Pending interrupt flag on line x */
#define EXTI_PR_PIF3_Mask                     (((uint32_t)0x01) << 3)
#define EXTI_PR_PIF3                          EXTI_PR_PIF3_Mask
#define EXTI_PR_PIF4_Pos                      ((uint32_t)4)                     /* Pending interrupt flag on line x */
#define EXTI_PR_PIF4_Mask                     (((uint32_t)0x01) << 4)
#define EXTI_PR_PIF4                          EXTI_PR_PIF4_Mask
#define EXTI_PR_PIF5_Pos                      ((uint32_t)5)                     /* Pending interrupt flag on line x */
#define EXTI_PR_PIF5_Mask                     (((uint32_t)0x01) << 5)
#define EXTI_PR_PIF5                          EXTI_PR_PIF5_Mask
#define EXTI_PR_PIF6_Pos                      ((uint32_t)6)                     /* Pending interrupt flag on line x */
#define EXTI_PR_PIF6_Mask                     (((uint32_t)0x01) << 6)
#define EXTI_PR_PIF6                          EXTI_PR_PIF6_Mask
#define EXTI_PR_PIF7_Pos                      ((uint32_t)7)                     /* Pending interrupt flag on line x */
#define EXTI_PR_PIF7_Mask                     (((uint32_t)0x01) << 7)
#define EXTI_PR_PIF7                          EXTI_PR_PIF7_Mask

/*****************************************************************************************
*                                     Peripheral ADC                                     *
*****************************************************************************************/
typedef struct{
  __IO uint32_t ISR;                    /* ISR */
  __IO uint32_t IER;                    /* IER */
  __IO uint32_t CR;                     /* CR */
  __IO uint32_t CFGR1;                  /* CFGR1 */
  __IO uint32_t CFGR2;                  /* CFGR2 */
  __IO uint32_t SMPR;                   /* SMPR */
       uint16_t RESERVED1[4];
  __IO uint32_t TR;                     /* TR */
       uint16_t RESERVED2[2];
  __IO uint32_t CHSELR;                 /* CHSELR */
       uint16_t RESERVED3[10];
  __I  uint32_t DR;                     /* DR */
       uint16_t RESERVED4[354];
  __IO uint32_t CCR;                    /* CCR */
       uint16_t RESERVED5[90];
  __I  uint32_t DR0;                    /* DR0 */
  __I  uint32_t DR1;                    /* DR1 */
  __I  uint32_t DR2;                    /* DR2 */
  __I  uint32_t DR3;                    /* DR3 */
  __I  uint32_t DR4;                    /* DR4 */
  __I  uint32_t DR5;                    /* DR5 */
  __I  uint32_t DR6;                    /* DR6 */
  __I  uint32_t DR7;                    /* DR7 */
  __I  uint32_t DR8;                    /* DR8 */
       uint16_t RESERVED6[6];
  __IO uint32_t CR2;                    /* CR2 */
  __IO uint32_t OFFSET;                 /* OFFSET */
  __IO uint32_t GAIN;                   /* GAIN */
}ADC_TypeDef;

/************************************** ADC->ISR  ***************************************/
#define ADC_ISR_AWD_Pos                       ((uint32_t)7)                     /* End of calibration flag */
#define ADC_ISR_AWD_Mask                      (((uint32_t)0x01) << 7)
#define ADC_ISR_AWD                           ADC_ISR_AWD_Mask
#define ADC_ISR_OVR_Pos                       ((uint32_t)4)                     /* ADC overrun */
#define ADC_ISR_OVR_Mask                      (((uint32_t)0x01) << 4)
#define ADC_ISR_OVR                           ADC_ISR_OVR_Mask
#define ADC_ISR_EOS_Pos                       ((uint32_t)3)                     /* End of sequence flag */
#define ADC_ISR_EOS_Mask                      (((uint32_t)0x01) << 3)
#define ADC_ISR_EOS                           ADC_ISR_EOS_Mask
#define ADC_ISR_EOC_Pos                       ((uint32_t)2)                     /* End of conversion flag */
#define ADC_ISR_EOC_Mask                      (((uint32_t)0x01) << 2)
#define ADC_ISR_EOC                           ADC_ISR_EOC_Mask
#define ADC_ISR_EOSMP_Pos                     ((uint32_t)1)                     /* End of sampling flag */
#define ADC_ISR_EOSMP_Mask                    (((uint32_t)0x01) << 1)
#define ADC_ISR_EOSMP                         ADC_ISR_EOSMP_Mask
#define ADC_ISR_ADRDY_Pos                     ((uint32_t)0)                     /* ADC ready */
#define ADC_ISR_ADRDY_Mask                    (((uint32_t)0x01) << 0)
#define ADC_ISR_ADRDY                         ADC_ISR_ADRDY_Mask

/************************************** ADC->IER  ***************************************/
#define ADC_IER_AWDIE_Pos                     ((uint32_t)7)                     /* Analog watchdog interrupt enable */
#define ADC_IER_AWDIE_Mask                    (((uint32_t)0x01) << 7)
#define ADC_IER_AWDIE                         ADC_IER_AWDIE_Mask
#define ADC_IER_OVRIE_Pos                     ((uint32_t)4)                     /* Overrun interrupt enable */
#define ADC_IER_OVRIE_Mask                    (((uint32_t)0x01) << 4)
#define ADC_IER_OVRIE                         ADC_IER_OVRIE_Mask
#define ADC_IER_EOSIE_Pos                     ((uint32_t)3)                     /* End of conversion sequence interrupt enable */
#define ADC_IER_EOSIE_Mask                    (((uint32_t)0x01) << 3)
#define ADC_IER_EOSIE                         ADC_IER_EOSIE_Mask
#define ADC_IER_EOCIE_Pos                     ((uint32_t)2)                     /* End of conversion interrupt enable */
#define ADC_IER_EOCIE_Mask                    (((uint32_t)0x01) << 2)
#define ADC_IER_EOCIE                         ADC_IER_EOCIE_Mask
#define ADC_IER_EOSMPIE_Pos                   ((uint32_t)1)                     /* End of sampling flag interrupt enable */
#define ADC_IER_EOSMPIE_Mask                  (((uint32_t)0x01) << 1)
#define ADC_IER_EOSMPIE                       ADC_IER_EOSMPIE_Mask
#define ADC_IER_ADRDYIE_Pos                   ((uint32_t)0)                     /* ADC ready interrupt enable */
#define ADC_IER_ADRDYIE_Mask                  (((uint32_t)0x01) << 0)
#define ADC_IER_ADRDYIE                       ADC_IER_ADRDYIE_Mask

/************************************** ADC->CR  ****************************************/
#define ADC_CR_ADSTP_Pos                      ((uint32_t)4)                     /* ADC stop conversion command */
#define ADC_CR_ADSTP_Mask                     (((uint32_t)0x01) << 4)
#define ADC_CR_ADSTP                          ADC_CR_ADSTP_Mask
#define ADC_CR_ADSTART_Pos                    ((uint32_t)2)                     /* ADC start conversion command */
#define ADC_CR_ADSTART_Mask                   (((uint32_t)0x01) << 2)
#define ADC_CR_ADSTART                        ADC_CR_ADSTART_Mask
#define ADC_CR_ADDIS_Pos                      ((uint32_t)1)                     /* ADC disable command */
#define ADC_CR_ADDIS_Mask                     (((uint32_t)0x01) << 1)
#define ADC_CR_ADDIS                          ADC_CR_ADDIS_Mask
#define ADC_CR_ADEN_Pos                       ((uint32_t)0)                     /* ADC enable command */
#define ADC_CR_ADEN_Mask                      (((uint32_t)0x01) << 0)
#define ADC_CR_ADEN                           ADC_CR_ADEN_Mask

/************************************* ADC->CFGR1  **************************************/
#define ADC_CFGR1_AWDCH_Pos                   ((uint32_t)26)                    /* Analog watchdog channel selection */
#define ADC_CFGR1_AWDCH_Mask                  (((uint32_t)0x0F) << 26)
#define ADC_CFGR1_AWDCH                       ADC_CFGR1_AWDCH_Mask
#define ADC_CFGR1_AWDCH_0                     (((uint32_t)0x1 << ADC_CFGR1_AWDCH_Pos))
#define ADC_CFGR1_AWDCH_1                     (((uint32_t)0x2 << ADC_CFGR1_AWDCH_Pos))
#define ADC_CFGR1_AWDCH_2                     (((uint32_t)0x4 << ADC_CFGR1_AWDCH_Pos))
#define ADC_CFGR1_AWDCH_3                     (((uint32_t)0x8 << ADC_CFGR1_AWDCH_Pos))
#define ADC_CFGR1_AWDEN_Pos                   ((uint32_t)23)                    /* Analog watchdog enable */
#define ADC_CFGR1_AWDEN_Mask                  (((uint32_t)0x01) << 23)
#define ADC_CFGR1_AWDEN                       ADC_CFGR1_AWDEN_Mask
#define ADC_CFGR1_AWDSGL_Pos                  ((uint32_t)22)                    /* Enable the watchdog on a single channel or on all channels */
#define ADC_CFGR1_AWDSGL_Mask                 (((uint32_t)0x01) << 22)
#define ADC_CFGR1_AWDSGL                      ADC_CFGR1_AWDSGL_Mask
#define ADC_CFGR1_DISCEN_Pos                  ((uint32_t)16)                    /* Discontinuous mode */
#define ADC_CFGR1_DISCEN_Mask                 (((uint32_t)0x01) << 16)
#define ADC_CFGR1_DISCEN                      ADC_CFGR1_DISCEN_Mask
#define ADC_CFGR1_AUTOFF_Pos                  ((uint32_t)15)                    /* Auto-off mode */
#define ADC_CFGR1_AUTOFF_Mask                 (((uint32_t)0x01) << 15)
#define ADC_CFGR1_AUTOFF                      ADC_CFGR1_AUTOFF_Mask
#define ADC_CFGR1_WAIT_Pos                    ((uint32_t)14)                    /* Wait conversion mode */
#define ADC_CFGR1_WAIT_Mask                   (((uint32_t)0x01) << 14)
#define ADC_CFGR1_WAIT                        ADC_CFGR1_WAIT_Mask
#define ADC_CFGR1_CONT_Pos                    ((uint32_t)13)                    /* Single/continuous conversion mode */
#define ADC_CFGR1_CONT_Mask                   (((uint32_t)0x01) << 13)
#define ADC_CFGR1_CONT                        ADC_CFGR1_CONT_Mask
#define ADC_CFGR1_OVRMOD_Pos                  ((uint32_t)12)                    /* Overrun management mode */
#define ADC_CFGR1_OVRMOD_Mask                 (((uint32_t)0x01) << 12)
#define ADC_CFGR1_OVRMOD                      ADC_CFGR1_OVRMOD_Mask
#define ADC_CFGR1_EXTEN_Pos                   ((uint32_t)10)                    /* External trigger enable and polarity selection */
#define ADC_CFGR1_EXTEN_Mask                  (((uint32_t)0x03) << 10)
#define ADC_CFGR1_EXTEN                       ADC_CFGR1_EXTEN_Mask
#define ADC_CFGR1_EXTEN_0                     (((uint32_t)0x1 << ADC_CFGR1_EXTEN_Pos))
#define ADC_CFGR1_EXTEN_1                     (((uint32_t)0x2 << ADC_CFGR1_EXTEN_Pos))
#define ADC_CFGR1_EXTSEL_Pos                  ((uint32_t)6)                     /* External trigger selection */
#define ADC_CFGR1_EXTSEL_Mask                 (((uint32_t)0x07) << 6)
#define ADC_CFGR1_EXTSEL                      ADC_CFGR1_EXTSEL_Mask
#define ADC_CFGR1_EXTSEL_0                    (((uint32_t)0x1 << ADC_CFGR1_EXTSEL_Pos))
#define ADC_CFGR1_EXTSEL_1                    (((uint32_t)0x2 << ADC_CFGR1_EXTSEL_Pos))
#define ADC_CFGR1_EXTSEL_2                    (((uint32_t)0x4 << ADC_CFGR1_EXTSEL_Pos))
#define ADC_CFGR1_ALIGN_Pos                   ((uint32_t)5)                     /* Data alignment */
#define ADC_CFGR1_ALIGN_Mask                  (((uint32_t)0x01) << 5)
#define ADC_CFGR1_ALIGN                       ADC_CFGR1_ALIGN_Mask
#define ADC_CFGR1_SCANDIR_Pos                 ((uint32_t)2)                     /* Scan sequence direction */
#define ADC_CFGR1_SCANDIR_Mask                (((uint32_t)0x01) << 2)
#define ADC_CFGR1_SCANDIR                     ADC_CFGR1_SCANDIR_Mask

/************************************* ADC->CFGR2  **************************************/
#define ADC_CFGR2_CKMODE_Pos                  ((uint32_t)30)                    /* ADC clock mode */
#define ADC_CFGR2_CKMODE_Mask                 (((uint32_t)0x03) << 30)
#define ADC_CFGR2_CKMODE                      ADC_CFGR2_CKMODE_Mask
#define ADC_CFGR2_CKMODE_0                    (((uint32_t)0x1 << ADC_CFGR2_CKMODE_Pos))
#define ADC_CFGR2_CKMODE_1                    (((uint32_t)0x2 << ADC_CFGR2_CKMODE_Pos))

/************************************* ADC->SMPR  ***************************************/
#define ADC_SMPR_SMP_Pos                      ((uint32_t)0)                     /* Sampling time selection */
#define ADC_SMPR_SMP_Mask                     (((uint32_t)0x07) << 0)
#define ADC_SMPR_SMP                          ADC_SMPR_SMP_Mask
#define ADC_SMPR_SMP_0                        (((uint32_t)0x1))
#define ADC_SMPR_SMP_1                        (((uint32_t)0x2))
#define ADC_SMPR_SMP_2                        (((uint32_t)0x4))

/************************************** ADC->TR  ****************************************/
#define ADC_TR_HT_Pos                         ((uint32_t)16)                    /* Analog watchdog higher threshold */
#define ADC_TR_HT_Mask                        (((uint32_t)0x0FFF) << 16)
#define ADC_TR_HT                             ADC_TR_HT_Mask
#define ADC_TR_HT_0                           (((uint32_t)0x1 << ADC_TR_HT_Pos))
#define ADC_TR_HT_1                           (((uint32_t)0x2 << ADC_TR_HT_Pos))
#define ADC_TR_HT_2                           (((uint32_t)0x4 << ADC_TR_HT_Pos))
#define ADC_TR_HT_3                           (((uint32_t)0x8 << ADC_TR_HT_Pos))
#define ADC_TR_HT_4                           (((uint32_t)0x10 << ADC_TR_HT_Pos))
#define ADC_TR_HT_5                           (((uint32_t)0x20 << ADC_TR_HT_Pos))
#define ADC_TR_HT_6                           (((uint32_t)0x40 << ADC_TR_HT_Pos))
#define ADC_TR_HT_7                           (((uint32_t)0x80 << ADC_TR_HT_Pos))
#define ADC_TR_HT_8                           (((uint32_t)0x100 << ADC_TR_HT_Pos))
#define ADC_TR_HT_9                           (((uint32_t)0x200 << ADC_TR_HT_Pos))
#define ADC_TR_HT_10                          (((uint32_t)0x400 << ADC_TR_HT_Pos))
#define ADC_TR_HT_11                          (((uint32_t)0x800 << ADC_TR_HT_Pos))
#define ADC_TR_LT_Pos                         ((uint32_t)0)                     /* Analog watchdog lower threshold */
#define ADC_TR_LT_Mask                        (((uint32_t)0x0FFF) << 0)
#define ADC_TR_LT                             ADC_TR_LT_Mask
#define ADC_TR_LT_0                           (((uint32_t)0x1))
#define ADC_TR_LT_1                           (((uint32_t)0x2))
#define ADC_TR_LT_2                           (((uint32_t)0x4))
#define ADC_TR_LT_3                           (((uint32_t)0x8))
#define ADC_TR_LT_4                           (((uint32_t)0x10))
#define ADC_TR_LT_5                           (((uint32_t)0x20))
#define ADC_TR_LT_6                           (((uint32_t)0x40))
#define ADC_TR_LT_7                           (((uint32_t)0x80))
#define ADC_TR_LT_8                           (((uint32_t)0x100))
#define ADC_TR_LT_9                           (((uint32_t)0x200))
#define ADC_TR_LT_10                          (((uint32_t)0x400))
#define ADC_TR_LT_11                          (((uint32_t)0x800))

/************************************ ADC->CHSELR  **************************************/
#define ADC_CHSELR_CHSEL0_Pos                 ((uint32_t)0)                     /* Channel-x selection */
#define ADC_CHSELR_CHSEL0_Mask                (((uint32_t)0x01) << 0)
#define ADC_CHSELR_CHSEL0                     ADC_CHSELR_CHSEL0_Mask
#define ADC_CHSELR_CHSEL1_Pos                 ((uint32_t)1)                     /* Channel-x selection */
#define ADC_CHSELR_CHSEL1_Mask                (((uint32_t)0x01) << 1)
#define ADC_CHSELR_CHSEL1                     ADC_CHSELR_CHSEL1_Mask
#define ADC_CHSELR_CHSEL2_Pos                 ((uint32_t)2)                     /* Channel-x selection */
#define ADC_CHSELR_CHSEL2_Mask                (((uint32_t)0x01) << 2)
#define ADC_CHSELR_CHSEL2                     ADC_CHSELR_CHSEL2_Mask
#define ADC_CHSELR_CHSEL3_Pos                 ((uint32_t)3)                     /* Channel-x selection */
#define ADC_CHSELR_CHSEL3_Mask                (((uint32_t)0x01) << 3)
#define ADC_CHSELR_CHSEL3                     ADC_CHSELR_CHSEL3_Mask
#define ADC_CHSELR_CHSEL4_Pos                 ((uint32_t)4)                     /* Channel-x selection */
#define ADC_CHSELR_CHSEL4_Mask                (((uint32_t)0x01) << 4)
#define ADC_CHSELR_CHSEL4                     ADC_CHSELR_CHSEL4_Mask
#define ADC_CHSELR_CHSEL5_Pos                 ((uint32_t)5)                     /* Channel-x selection */
#define ADC_CHSELR_CHSEL5_Mask                (((uint32_t)0x01) << 5)
#define ADC_CHSELR_CHSEL5                     ADC_CHSELR_CHSEL5_Mask
#define ADC_CHSELR_CHSEL6_Pos                 ((uint32_t)6)                     /* Channel-x selection */
#define ADC_CHSELR_CHSEL6_Mask                (((uint32_t)0x01) << 6)
#define ADC_CHSELR_CHSEL6                     ADC_CHSELR_CHSEL6_Mask
#define ADC_CHSELR_CHSEL7_Pos                 ((uint32_t)7)                     /* Channel-x selection */
#define ADC_CHSELR_CHSEL7_Mask                (((uint32_t)0x01) << 7)
#define ADC_CHSELR_CHSEL7                     ADC_CHSELR_CHSEL7_Mask
#define ADC_CHSELR_CHSEL8_Pos                 ((uint32_t)8)                     /* Channel-x selection */
#define ADC_CHSELR_CHSEL8_Mask                (((uint32_t)0x01) << 8)
#define ADC_CHSELR_CHSEL8                     ADC_CHSELR_CHSEL8_Mask

/************************************** ADC->DR  ****************************************/
#define ADC_DR_DATA_Pos                       ((uint32_t)0)                     /* Converted data */
#define ADC_DR_DATA_Mask                      (((uint32_t)0xFFFF) << 0)
#define ADC_DR_DATA                           ADC_DR_DATA_Mask

/************************************** ADC->DR0  ***************************************/
#define ADC_DR0_DRx_Pos                       ((uint32_t)0)                     /* Channel x latest converted data */
#define ADC_DR0_DRx_Mask                      (((uint32_t)0x0FFF) << 0)
#define ADC_DR0_DRx                           ADC_DR0_DRx_Mask
#define ADC_DR0_DRx_0                         (((uint32_t)0x1))
#define ADC_DR0_DRx_1                         (((uint32_t)0x2))
#define ADC_DR0_DRx_2                         (((uint32_t)0x4))
#define ADC_DR0_DRx_3                         (((uint32_t)0x8))
#define ADC_DR0_DRx_4                         (((uint32_t)0x10))
#define ADC_DR0_DRx_5                         (((uint32_t)0x20))
#define ADC_DR0_DRx_6                         (((uint32_t)0x40))
#define ADC_DR0_DRx_7                         (((uint32_t)0x80))
#define ADC_DR0_DRx_8                         (((uint32_t)0x100))
#define ADC_DR0_DRx_9                         (((uint32_t)0x200))
#define ADC_DR0_DRx_10                        (((uint32_t)0x400))
#define ADC_DR0_DRx_11                        (((uint32_t)0x800))

/************************************** ADC->DR1  ***************************************/
#define ADC_DR1_DRx_Pos                       ((uint32_t)0)                     /* Channel x latest converted data */
#define ADC_DR1_DRx_Mask                      (((uint32_t)0x0FFF) << 0)
#define ADC_DR1_DRx                           ADC_DR1_DRx_Mask
#define ADC_DR1_DRx_0                         (((uint32_t)0x1))
#define ADC_DR1_DRx_1                         (((uint32_t)0x2))
#define ADC_DR1_DRx_2                         (((uint32_t)0x4))
#define ADC_DR1_DRx_3                         (((uint32_t)0x8))
#define ADC_DR1_DRx_4                         (((uint32_t)0x10))
#define ADC_DR1_DRx_5                         (((uint32_t)0x20))
#define ADC_DR1_DRx_6                         (((uint32_t)0x40))
#define ADC_DR1_DRx_7                         (((uint32_t)0x80))
#define ADC_DR1_DRx_8                         (((uint32_t)0x100))
#define ADC_DR1_DRx_9                         (((uint32_t)0x200))
#define ADC_DR1_DRx_10                        (((uint32_t)0x400))
#define ADC_DR1_DRx_11                        (((uint32_t)0x800))

/************************************** ADC->DR2  ***************************************/
#define ADC_DR2_DRx_Pos                       ((uint32_t)0)                     /* Channel x latest converted data */
#define ADC_DR2_DRx_Mask                      (((uint32_t)0x0FFF) << 0)
#define ADC_DR2_DRx                           ADC_DR2_DRx_Mask
#define ADC_DR2_DRx_0                         (((uint32_t)0x1))
#define ADC_DR2_DRx_1                         (((uint32_t)0x2))
#define ADC_DR2_DRx_2                         (((uint32_t)0x4))
#define ADC_DR2_DRx_3                         (((uint32_t)0x8))
#define ADC_DR2_DRx_4                         (((uint32_t)0x10))
#define ADC_DR2_DRx_5                         (((uint32_t)0x20))
#define ADC_DR2_DRx_6                         (((uint32_t)0x40))
#define ADC_DR2_DRx_7                         (((uint32_t)0x80))
#define ADC_DR2_DRx_8                         (((uint32_t)0x100))
#define ADC_DR2_DRx_9                         (((uint32_t)0x200))
#define ADC_DR2_DRx_10                        (((uint32_t)0x400))
#define ADC_DR2_DRx_11                        (((uint32_t)0x800))

/************************************** ADC->DR3  ***************************************/
#define ADC_DR3_DRx_Pos                       ((uint32_t)0)                     /* Channel x latest converted data */
#define ADC_DR3_DRx_Mask                      (((uint32_t)0x0FFF) << 0)
#define ADC_DR3_DRx                           ADC_DR3_DRx_Mask
#define ADC_DR3_DRx_0                         (((uint32_t)0x1))
#define ADC_DR3_DRx_1                         (((uint32_t)0x2))
#define ADC_DR3_DRx_2                         (((uint32_t)0x4))
#define ADC_DR3_DRx_3                         (((uint32_t)0x8))
#define ADC_DR3_DRx_4                         (((uint32_t)0x10))
#define ADC_DR3_DRx_5                         (((uint32_t)0x20))
#define ADC_DR3_DRx_6                         (((uint32_t)0x40))
#define ADC_DR3_DRx_7                         (((uint32_t)0x80))
#define ADC_DR3_DRx_8                         (((uint32_t)0x100))
#define ADC_DR3_DRx_9                         (((uint32_t)0x200))
#define ADC_DR3_DRx_10                        (((uint32_t)0x400))
#define ADC_DR3_DRx_11                        (((uint32_t)0x800))

/************************************** ADC->DR4  ***************************************/
#define ADC_DR4_DRx_Pos                       ((uint32_t)0)                     /* Channel x latest converted data */
#define ADC_DR4_DRx_Mask                      (((uint32_t)0x0FFF) << 0)
#define ADC_DR4_DRx                           ADC_DR4_DRx_Mask
#define ADC_DR4_DRx_0                         (((uint32_t)0x1))
#define ADC_DR4_DRx_1                         (((uint32_t)0x2))
#define ADC_DR4_DRx_2                         (((uint32_t)0x4))
#define ADC_DR4_DRx_3                         (((uint32_t)0x8))
#define ADC_DR4_DRx_4                         (((uint32_t)0x10))
#define ADC_DR4_DRx_5                         (((uint32_t)0x20))
#define ADC_DR4_DRx_6                         (((uint32_t)0x40))
#define ADC_DR4_DRx_7                         (((uint32_t)0x80))
#define ADC_DR4_DRx_8                         (((uint32_t)0x100))
#define ADC_DR4_DRx_9                         (((uint32_t)0x200))
#define ADC_DR4_DRx_10                        (((uint32_t)0x400))
#define ADC_DR4_DRx_11                        (((uint32_t)0x800))

/************************************** ADC->DR5  ***************************************/
#define ADC_DR5_DRx_Pos                       ((uint32_t)0)                     /* Channel x latest converted data */
#define ADC_DR5_DRx_Mask                      (((uint32_t)0x0FFF) << 0)
#define ADC_DR5_DRx                           ADC_DR5_DRx_Mask
#define ADC_DR5_DRx_0                         (((uint32_t)0x1))
#define ADC_DR5_DRx_1                         (((uint32_t)0x2))
#define ADC_DR5_DRx_2                         (((uint32_t)0x4))
#define ADC_DR5_DRx_3                         (((uint32_t)0x8))
#define ADC_DR5_DRx_4                         (((uint32_t)0x10))
#define ADC_DR5_DRx_5                         (((uint32_t)0x20))
#define ADC_DR5_DRx_6                         (((uint32_t)0x40))
#define ADC_DR5_DRx_7                         (((uint32_t)0x80))
#define ADC_DR5_DRx_8                         (((uint32_t)0x100))
#define ADC_DR5_DRx_9                         (((uint32_t)0x200))
#define ADC_DR5_DRx_10                        (((uint32_t)0x400))
#define ADC_DR5_DRx_11                        (((uint32_t)0x800))

/************************************** ADC->DR6  ***************************************/
#define ADC_DR6_DRx_Pos                       ((uint32_t)0)                     /* Channel x latest converted data */
#define ADC_DR6_DRx_Mask                      (((uint32_t)0x0FFF) << 0)
#define ADC_DR6_DRx                           ADC_DR6_DRx_Mask
#define ADC_DR6_DRx_0                         (((uint32_t)0x1))
#define ADC_DR6_DRx_1                         (((uint32_t)0x2))
#define ADC_DR6_DRx_2                         (((uint32_t)0x4))
#define ADC_DR6_DRx_3                         (((uint32_t)0x8))
#define ADC_DR6_DRx_4                         (((uint32_t)0x10))
#define ADC_DR6_DRx_5                         (((uint32_t)0x20))
#define ADC_DR6_DRx_6                         (((uint32_t)0x40))
#define ADC_DR6_DRx_7                         (((uint32_t)0x80))
#define ADC_DR6_DRx_8                         (((uint32_t)0x100))
#define ADC_DR6_DRx_9                         (((uint32_t)0x200))
#define ADC_DR6_DRx_10                        (((uint32_t)0x400))
#define ADC_DR6_DRx_11                        (((uint32_t)0x800))

/************************************** ADC->DR7  ***************************************/
#define ADC_DR7_DRx_Pos                       ((uint32_t)0)                     /* Channel x latest converted data */
#define ADC_DR7_DRx_Mask                      (((uint32_t)0x0FFF) << 0)
#define ADC_DR7_DRx                           ADC_DR7_DRx_Mask
#define ADC_DR7_DRx_0                         (((uint32_t)0x1))
#define ADC_DR7_DRx_1                         (((uint32_t)0x2))
#define ADC_DR7_DRx_2                         (((uint32_t)0x4))
#define ADC_DR7_DRx_3                         (((uint32_t)0x8))
#define ADC_DR7_DRx_4                         (((uint32_t)0x10))
#define ADC_DR7_DRx_5                         (((uint32_t)0x20))
#define ADC_DR7_DRx_6                         (((uint32_t)0x40))
#define ADC_DR7_DRx_7                         (((uint32_t)0x80))
#define ADC_DR7_DRx_8                         (((uint32_t)0x100))
#define ADC_DR7_DRx_9                         (((uint32_t)0x200))
#define ADC_DR7_DRx_10                        (((uint32_t)0x400))
#define ADC_DR7_DRx_11                        (((uint32_t)0x800))

/************************************** ADC->DR8  ***************************************/
#define ADC_DR8_DRx_Pos                       ((uint32_t)0)                     /* Channel x latest converted data */
#define ADC_DR8_DRx_Mask                      (((uint32_t)0x0FFF) << 0)
#define ADC_DR8_DRx                           ADC_DR8_DRx_Mask
#define ADC_DR8_DRx_0                         (((uint32_t)0x1))
#define ADC_DR8_DRx_1                         (((uint32_t)0x2))
#define ADC_DR8_DRx_2                         (((uint32_t)0x4))
#define ADC_DR8_DRx_3                         (((uint32_t)0x8))
#define ADC_DR8_DRx_4                         (((uint32_t)0x10))
#define ADC_DR8_DRx_5                         (((uint32_t)0x20))
#define ADC_DR8_DRx_6                         (((uint32_t)0x40))
#define ADC_DR8_DRx_7                         (((uint32_t)0x80))
#define ADC_DR8_DRx_8                         (((uint32_t)0x100))
#define ADC_DR8_DRx_9                         (((uint32_t)0x200))
#define ADC_DR8_DRx_10                        (((uint32_t)0x400))
#define ADC_DR8_DRx_11                        (((uint32_t)0x800))

/************************************** ADC->CCR  ***************************************/
#define ADC_CCR_VREFEN_Pos                    ((uint32_t)22)                    /* VREFINT enable */
#define ADC_CCR_VREFEN_Mask                   (((uint32_t)0x01) << 22)
#define ADC_CCR_VREFEN                        ADC_CCR_VREFEN_Mask

/************************************** ADC->CR2  ***************************************/
#define ADC_CR2_SDIF_Pos                      ((uint32_t)1)                     /* Differential input enable */
#define ADC_CR2_SDIF_Mask                     (((uint32_t)0x01) << 1)
#define ADC_CR2_SDIF                          ADC_CR2_SDIF_Mask
#define ADC_CR2_GCMP_Pos                      ((uint32_t)0)                     /* ADC internal delay control */
#define ADC_CR2_GCMP_Mask                     (((uint32_t)0x01) << 0)
#define ADC_CR2_GCMP                          ADC_CR2_GCMP_Mask

/************************************ ADC->OFFSET  **************************************/
#define ADC_OFFSET_OFFSET_EN_Pos              ((uint32_t)6)                     /* Calibration Offset enable */
#define ADC_OFFSET_OFFSET_EN_Mask             (((uint32_t)0x01) << 6)
#define ADC_OFFSET_OFFSET_EN                  ADC_OFFSET_OFFSET_EN_Mask
#define ADC_OFFSET_CAL_OFFSET_Pos             ((uint32_t)0)                     /* ADC Calibration Offset data */
#define ADC_OFFSET_CAL_OFFSET_Mask            (((uint32_t)0x3F) << 0)
#define ADC_OFFSET_CAL_OFFSET                 ADC_OFFSET_CAL_OFFSET_Mask
#define ADC_OFFSET_CAL_OFFSET_0               (((uint32_t)0x1))
#define ADC_OFFSET_CAL_OFFSET_1               (((uint32_t)0x2))
#define ADC_OFFSET_CAL_OFFSET_2               (((uint32_t)0x4))
#define ADC_OFFSET_CAL_OFFSET_3               (((uint32_t)0x8))
#define ADC_OFFSET_CAL_OFFSET_4               (((uint32_t)0x10))
#define ADC_OFFSET_CAL_OFFSET_5               (((uint32_t)0x20))

/************************************* ADC->GAIN  ***************************************/
#define ADC_GAIN_GAIN_SEL2_Pos                ((uint32_t)3)                     /* Gain calibration factor 2 selection */
#define ADC_GAIN_GAIN_SEL2_Mask               (((uint32_t)0x07) << 3)
#define ADC_GAIN_GAIN_SEL2                    ADC_GAIN_GAIN_SEL2_Mask
#define ADC_GAIN_GAIN_SEL2_0                  (((uint32_t)0x1 << ADC_GAIN_GAIN_SEL2_Pos))
#define ADC_GAIN_GAIN_SEL2_1                  (((uint32_t)0x2 << ADC_GAIN_GAIN_SEL2_Pos))
#define ADC_GAIN_GAIN_SEL2_2                  (((uint32_t)0x4 << ADC_GAIN_GAIN_SEL2_Pos))
#define ADC_GAIN_GAIN_SEL1_Pos                ((uint32_t)0)                     /* Gain calibration factor 1 selection */
#define ADC_GAIN_GAIN_SEL1_Mask               (((uint32_t)0x07) << 0)
#define ADC_GAIN_GAIN_SEL1                    ADC_GAIN_GAIN_SEL1_Mask
#define ADC_GAIN_GAIN_SEL1_0                  (((uint32_t)0x1))
#define ADC_GAIN_GAIN_SEL1_1                  (((uint32_t)0x2))
#define ADC_GAIN_GAIN_SEL1_2                  (((uint32_t)0x4))

/*****************************************************************************************
*                                     Peripheral TIM                                     *
*****************************************************************************************/
typedef struct{
  __IO uint32_t CR1;                    /* CR1 */
  __IO uint32_t CR2;                    /* CR2 */
  __IO uint32_t SMCR;                   /* SMCR */
  __IO uint32_t DIER;                   /* DIER */
  __IO uint32_t SR;                     /* SR */
  __O  uint32_t EGR;                    /* EGR */
  union{
    __IO uint32_t CCMR1_Output;         /* CCMR1_Output */
    __IO uint32_t CCMR1_Input;          /* CCMR1_Input */
  };
  union{
    __IO uint32_t CCMR2_Output;         /* CCMR2_Output */
    __IO uint32_t CCMR2_Input;          /* CCMR2_Input */
  };
  __IO uint32_t CCER;                   /* CCER */
  __IO uint32_t CNT;                    /* CNT */
  __IO uint32_t PSC;                    /* PSC */
  __IO uint32_t ARR;                    /* ARR */
  __IO uint32_t RCR;                    /* RCR */
  __IO uint32_t CCR1;                   /* CCR1 */
  __IO uint32_t CCR2;                   /* CCR2 */
  __IO uint32_t CCR3;                   /* CCR3 */
  __IO uint32_t CCR4;                   /* CCR4 */
  __IO uint32_t BDTR;                   /* BDTR */
}TIM_TypeDef;

/************************************** TIM->CR1  ***************************************/
#define TIM_CR1_CC4_ADC_SEL_Pos               ((uint32_t)31)                    /* ACD triger CC4 generation source selection */
#define TIM_CR1_CC4_ADC_SEL_Mask              (((uint32_t)0x01) << 31)
#define TIM_CR1_CC4_ADC_SEL                   TIM_CR1_CC4_ADC_SEL_Mask
#define TIM_CR1_CC3_ADC_SEL_Pos               ((uint32_t)30)                    /* ACD triger CC3 generation source selection */
#define TIM_CR1_CC3_ADC_SEL_Mask              (((uint32_t)0x01) << 30)
#define TIM_CR1_CC3_ADC_SEL                   TIM_CR1_CC3_ADC_SEL_Mask
#define TIM_CR1_CC2_ADC_SEL_Pos               ((uint32_t)29)                    /* ACD triger CC2 generation source selection */
#define TIM_CR1_CC2_ADC_SEL_Mask              (((uint32_t)0x01) << 29)
#define TIM_CR1_CC2_ADC_SEL                   TIM_CR1_CC2_ADC_SEL_Mask
#define TIM_CR1_CC1_ADC_SEL_Pos               ((uint32_t)28)                    /* ACD triger CC1 generation source selection */
#define TIM_CR1_CC1_ADC_SEL_Mask              (((uint32_t)0x01) << 28)
#define TIM_CR1_CC1_ADC_SEL                   TIM_CR1_CC1_ADC_SEL_Mask
#define TIM_CR1_CKD_Pos                       ((uint32_t)8)                     /* Clock division factor */
#define TIM_CR1_CKD_Mask                      (((uint32_t)0x03) << 8)
#define TIM_CR1_CKD                           TIM_CR1_CKD_Mask
#define TIM_CR1_CKD_0                         (((uint32_t)0x1 << TIM_CR1_CKD_Pos))
#define TIM_CR1_CKD_1                         (((uint32_t)0x2 << TIM_CR1_CKD_Pos))
#define TIM_CR1_ARPE_Pos                      ((uint32_t)7)                     /* Auto-reload preload enable */
#define TIM_CR1_ARPE_Mask                     (((uint32_t)0x01) << 7)
#define TIM_CR1_ARPE                          TIM_CR1_ARPE_Mask
#define TIM_CR1_CMS_Pos                       ((uint32_t)5)                     /* Center-aligned mode selection */
#define TIM_CR1_CMS_Mask                      (((uint32_t)0x03) << 5)
#define TIM_CR1_CMS                           TIM_CR1_CMS_Mask
#define TIM_CR1_CMS_0                         (((uint32_t)0x1 << TIM_CR1_CMS_Pos))
#define TIM_CR1_CMS_1                         (((uint32_t)0x2 << TIM_CR1_CMS_Pos))
#define TIM_CR1_DIR_Pos                       ((uint32_t)4)                     /* Direction */
#define TIM_CR1_DIR_Mask                      (((uint32_t)0x01) << 4)
#define TIM_CR1_DIR                           TIM_CR1_DIR_Mask
#define TIM_CR1_OPM_Pos                       ((uint32_t)3)                     /* One pulse mode */
#define TIM_CR1_OPM_Mask                      (((uint32_t)0x01) << 3)
#define TIM_CR1_OPM                           TIM_CR1_OPM_Mask
#define TIM_CR1_URS_Pos                       ((uint32_t)2)                     /* Update request source */
#define TIM_CR1_URS_Mask                      (((uint32_t)0x01) << 2)
#define TIM_CR1_URS                           TIM_CR1_URS_Mask
#define TIM_CR1_UDIS_Pos                      ((uint32_t)1)                     /* Update disable */
#define TIM_CR1_UDIS_Mask                     (((uint32_t)0x01) << 1)
#define TIM_CR1_UDIS                          TIM_CR1_UDIS_Mask
#define TIM_CR1_CEN_Pos                       ((uint32_t)0)                     /* Update disable */
#define TIM_CR1_CEN_Mask                      (((uint32_t)0x01) << 0)
#define TIM_CR1_CEN                           TIM_CR1_CEN_Mask

/************************************** TIM->CR2  ***************************************/
#define TIM_CR2_OIS4_Pos                      ((uint32_t)14)                    /* Output Idle state 4 */
#define TIM_CR2_OIS4_Mask                     (((uint32_t)0x01) << 14)
#define TIM_CR2_OIS4                          TIM_CR2_OIS4_Mask
#define TIM_CR2_OIS3N_Pos                     ((uint32_t)13)                    /* Output Idle state 3 */
#define TIM_CR2_OIS3N_Mask                    (((uint32_t)0x01) << 13)
#define TIM_CR2_OIS3N                         TIM_CR2_OIS3N_Mask
#define TIM_CR2_OIS3_Pos                      ((uint32_t)12)                    /* Output Idle state 3 */
#define TIM_CR2_OIS3_Mask                     (((uint32_t)0x01) << 12)
#define TIM_CR2_OIS3                          TIM_CR2_OIS3_Mask
#define TIM_CR2_OIS2N_Pos                     ((uint32_t)11)                    /* Output Idle state 2 */
#define TIM_CR2_OIS2N_Mask                    (((uint32_t)0x01) << 11)
#define TIM_CR2_OIS2N                         TIM_CR2_OIS2N_Mask
#define TIM_CR2_OIS2_Pos                      ((uint32_t)10)                    /* Output Idle state 2 */
#define TIM_CR2_OIS2_Mask                     (((uint32_t)0x01) << 10)
#define TIM_CR2_OIS2                          TIM_CR2_OIS2_Mask
#define TIM_CR2_OIS1N_Pos                     ((uint32_t)9)                     /* Output Idle state 1 */
#define TIM_CR2_OIS1N_Mask                    (((uint32_t)0x01) << 9)
#define TIM_CR2_OIS1N                         TIM_CR2_OIS1N_Mask
#define TIM_CR2_OIS1_Pos                      ((uint32_t)8)                     /* Output Idle state 1 */
#define TIM_CR2_OIS1_Mask                     (((uint32_t)0x01) << 8)
#define TIM_CR2_OIS1                          TIM_CR2_OIS1_Mask
#define TIM_CR2_TI1S_Pos                      ((uint32_t)7)                     /* TI1 selection */
#define TIM_CR2_TI1S_Mask                     (((uint32_t)0x01) << 7)
#define TIM_CR2_TI1S                          TIM_CR2_TI1S_Mask
#define TIM_CR2_MMS_Pos                       ((uint32_t)4)                     /* Master mode selection */
#define TIM_CR2_MMS_Mask                      (((uint32_t)0x07) << 4)
#define TIM_CR2_MMS                           TIM_CR2_MMS_Mask
#define TIM_CR2_MMS_0                         (((uint32_t)0x1 << TIM_CR2_MMS_Pos))
#define TIM_CR2_MMS_1                         (((uint32_t)0x2 << TIM_CR2_MMS_Pos))
#define TIM_CR2_MMS_2                         (((uint32_t)0x4 << TIM_CR2_MMS_Pos))
#define TIM_CR2_CCUS_Pos                      ((uint32_t)2)                     /* Capture/compare control update selection */
#define TIM_CR2_CCUS_Mask                     (((uint32_t)0x01) << 2)
#define TIM_CR2_CCUS                          TIM_CR2_CCUS_Mask
#define TIM_CR2_CCPC_Pos                      ((uint32_t)0)                     /* Capture/compare preloaded control */
#define TIM_CR2_CCPC_Mask                     (((uint32_t)0x01) << 0)
#define TIM_CR2_CCPC                          TIM_CR2_CCPC_Mask

/************************************* TIM->SMCR  ***************************************/
#define TIM_SMCR_ETP_Pos                      ((uint32_t)15)                    /* External trigger polarity */
#define TIM_SMCR_ETP_Mask                     (((uint32_t)0x01) << 15)
#define TIM_SMCR_ETP                          TIM_SMCR_ETP_Mask
#define TIM_SMCR_ECE_Pos                      ((uint32_t)14)                    /* External clock enable */
#define TIM_SMCR_ECE_Mask                     (((uint32_t)0x01) << 14)
#define TIM_SMCR_ECE                          TIM_SMCR_ECE_Mask
#define TIM_SMCR_ETPS_Pos                     ((uint32_t)12)                    /* External trigger filter */
#define TIM_SMCR_ETPS_Mask                    (((uint32_t)0x03) << 12)
#define TIM_SMCR_ETPS                         TIM_SMCR_ETPS_Mask
#define TIM_SMCR_ETPS_0                       (((uint32_t)0x1 << TIM_SMCR_ETPS_Pos))
#define TIM_SMCR_ETPS_1                       (((uint32_t)0x2 << TIM_SMCR_ETPS_Pos))
#define TIM_SMCR_ETF_Pos                      ((uint32_t)8)                     /* External trigger filter */
#define TIM_SMCR_ETF_Mask                     (((uint32_t)0x0F) << 8)
#define TIM_SMCR_ETF                          TIM_SMCR_ETF_Mask
#define TIM_SMCR_ETF_0                        (((uint32_t)0x1 << TIM_SMCR_ETF_Pos))
#define TIM_SMCR_ETF_1                        (((uint32_t)0x2 << TIM_SMCR_ETF_Pos))
#define TIM_SMCR_ETF_2                        (((uint32_t)0x4 << TIM_SMCR_ETF_Pos))
#define TIM_SMCR_ETF_3                        (((uint32_t)0x8 << TIM_SMCR_ETF_Pos))
#define TIM_SMCR_MSM_Pos                      ((uint32_t)7)                     /* Master/slave mode */
#define TIM_SMCR_MSM_Mask                     (((uint32_t)0x01) << 7)
#define TIM_SMCR_MSM                          TIM_SMCR_MSM_Mask
#define TIM_SMCR_TS_Pos                       ((uint32_t)4)                     /* Trigger selection */
#define TIM_SMCR_TS_Mask                      (((uint32_t)0x07) << 4)
#define TIM_SMCR_TS                           TIM_SMCR_TS_Mask
#define TIM_SMCR_TS_0                         (((uint32_t)0x1 << TIM_SMCR_TS_Pos))
#define TIM_SMCR_TS_1                         (((uint32_t)0x2 << TIM_SMCR_TS_Pos))
#define TIM_SMCR_TS_2                         (((uint32_t)0x4 << TIM_SMCR_TS_Pos))
#define TIM_SMCR_OCCS_Pos                     ((uint32_t)3)                     /* OCREF clear selection */
#define TIM_SMCR_OCCS_Mask                    (((uint32_t)0x01) << 3)
#define TIM_SMCR_OCCS                         TIM_SMCR_OCCS_Mask
#define TIM_SMCR_SMS_Pos                      ((uint32_t)0)                     /* Slave mode selection */
#define TIM_SMCR_SMS_Mask                     (((uint32_t)0x07) << 0)
#define TIM_SMCR_SMS                          TIM_SMCR_SMS_Mask
#define TIM_SMCR_SMS_0                        (((uint32_t)0x1))
#define TIM_SMCR_SMS_1                        (((uint32_t)0x2))
#define TIM_SMCR_SMS_2                        (((uint32_t)0x4))

/************************************* TIM->DIER  ***************************************/
#define TIM_DIER_BIE_Pos                      ((uint32_t)7)                     /* Break interrupt enable */
#define TIM_DIER_BIE_Mask                     (((uint32_t)0x01) << 7)
#define TIM_DIER_BIE                          TIM_DIER_BIE_Mask
#define TIM_DIER_TIE_Pos                      ((uint32_t)6)                     /* Trigger interrupt enable */
#define TIM_DIER_TIE_Mask                     (((uint32_t)0x01) << 6)
#define TIM_DIER_TIE                          TIM_DIER_TIE_Mask
#define TIM_DIER_COMIE_Pos                    ((uint32_t)5)                     /* COM interrupt enable */
#define TIM_DIER_COMIE_Mask                   (((uint32_t)0x01) << 5)
#define TIM_DIER_COMIE                        TIM_DIER_COMIE_Mask
#define TIM_DIER_CC4IE_Pos                    ((uint32_t)4)                     /* Capture/Compare 4 interrupt enable */
#define TIM_DIER_CC4IE_Mask                   (((uint32_t)0x01) << 4)
#define TIM_DIER_CC4IE                        TIM_DIER_CC4IE_Mask
#define TIM_DIER_CC3IE_Pos                    ((uint32_t)3)                     /* Capture/Compare 3 interrupt enable */
#define TIM_DIER_CC3IE_Mask                   (((uint32_t)0x01) << 3)
#define TIM_DIER_CC3IE                        TIM_DIER_CC3IE_Mask
#define TIM_DIER_CC2IE_Pos                    ((uint32_t)2)                     /* Capture/Compare 2 interrupt enable */
#define TIM_DIER_CC2IE_Mask                   (((uint32_t)0x01) << 2)
#define TIM_DIER_CC2IE                        TIM_DIER_CC2IE_Mask
#define TIM_DIER_CC1IE_Pos                    ((uint32_t)1)                     /* Capture/Compare 1 interrupt enable */
#define TIM_DIER_CC1IE_Mask                   (((uint32_t)0x01) << 1)
#define TIM_DIER_CC1IE                        TIM_DIER_CC1IE_Mask
#define TIM_DIER_UIE_Pos                      ((uint32_t)0)                     /* Update interrupt enable */
#define TIM_DIER_UIE_Mask                     (((uint32_t)0x01) << 0)
#define TIM_DIER_UIE                          TIM_DIER_UIE_Mask

/************************************** TIM->SR  ****************************************/
#define TIM_SR_CC4OF_Pos                      ((uint32_t)12)                    /* Capture/Compare 4 overcapture flag */
#define TIM_SR_CC4OF_Mask                     (((uint32_t)0x01) << 12)
#define TIM_SR_CC4OF                          TIM_SR_CC4OF_Mask
#define TIM_SR_CC3OF_Pos                      ((uint32_t)11)                    /* Capture/Compare 3 overcapture flag */
#define TIM_SR_CC3OF_Mask                     (((uint32_t)0x01) << 11)
#define TIM_SR_CC3OF                          TIM_SR_CC3OF_Mask
#define TIM_SR_CC2OF_Pos                      ((uint32_t)10)                    /* Capture/Compare 2 overcapture flag */
#define TIM_SR_CC2OF_Mask                     (((uint32_t)0x01) << 10)
#define TIM_SR_CC2OF                          TIM_SR_CC2OF_Mask
#define TIM_SR_CC1OF_Pos                      ((uint32_t)9)                     /* Capture/Compare 1 overcapture flag */
#define TIM_SR_CC1OF_Mask                     (((uint32_t)0x01) << 9)
#define TIM_SR_CC1OF                          TIM_SR_CC1OF_Mask
#define TIM_SR_BIF_Pos                        ((uint32_t)7)                     /* Break interrupt flag */
#define TIM_SR_BIF_Mask                       (((uint32_t)0x01) << 7)
#define TIM_SR_BIF                            TIM_SR_BIF_Mask
#define TIM_SR_TIF_Pos                        ((uint32_t)6)                     /* Trigger interrupt flag */
#define TIM_SR_TIF_Mask                       (((uint32_t)0x01) << 6)
#define TIM_SR_TIF                            TIM_SR_TIF_Mask
#define TIM_SR_COMIF_Pos                      ((uint32_t)5)                     /* COM interrupt flag */
#define TIM_SR_COMIF_Mask                     (((uint32_t)0x01) << 5)
#define TIM_SR_COMIF                          TIM_SR_COMIF_Mask
#define TIM_SR_CC4IF_Pos                      ((uint32_t)4)                     /* Capture/Compare 4 interrupt flag */
#define TIM_SR_CC4IF_Mask                     (((uint32_t)0x01) << 4)
#define TIM_SR_CC4IF                          TIM_SR_CC4IF_Mask
#define TIM_SR_CC3IF_Pos                      ((uint32_t)3)                     /* Capture/Compare 3 interrupt flag */
#define TIM_SR_CC3IF_Mask                     (((uint32_t)0x01) << 3)
#define TIM_SR_CC3IF                          TIM_SR_CC3IF_Mask
#define TIM_SR_CC2IF_Pos                      ((uint32_t)2)                     /* Capture/Compare 2 interrupt flag */
#define TIM_SR_CC2IF_Mask                     (((uint32_t)0x01) << 2)
#define TIM_SR_CC2IF                          TIM_SR_CC2IF_Mask
#define TIM_SR_CC1IF_Pos                      ((uint32_t)1)                     /* Capture/Compare 1 interrupt flag */
#define TIM_SR_CC1IF_Mask                     (((uint32_t)0x01) << 1)
#define TIM_SR_CC1IF                          TIM_SR_CC1IF_Mask
#define TIM_SR_UIF_Pos                        ((uint32_t)0)                     /* Update interrupt flag */
#define TIM_SR_UIF_Mask                       (((uint32_t)0x01) << 0)
#define TIM_SR_UIF                            TIM_SR_UIF_Mask

/************************************** TIM->EGR  ***************************************/
#define TIM_EGR_BG_Pos                        ((uint32_t)7)                     /* Break generation */
#define TIM_EGR_BG_Mask                       (((uint32_t)0x01) << 7)
#define TIM_EGR_BG                            TIM_EGR_BG_Mask
#define TIM_EGR_TG_Pos                        ((uint32_t)6)                     /* Trigger generation */
#define TIM_EGR_TG_Mask                       (((uint32_t)0x01) << 6)
#define TIM_EGR_TG                            TIM_EGR_TG_Mask
#define TIM_EGR_COMG_Pos                      ((uint32_t)5)                     /* Capture/Compare control update generation */
#define TIM_EGR_COMG_Mask                     (((uint32_t)0x01) << 5)
#define TIM_EGR_COMG                          TIM_EGR_COMG_Mask
#define TIM_EGR_CC4G_Pos                      ((uint32_t)4)                     /* Capture/Compare 4 generation */
#define TIM_EGR_CC4G_Mask                     (((uint32_t)0x01) << 4)
#define TIM_EGR_CC4G                          TIM_EGR_CC4G_Mask
#define TIM_EGR_CC3G_Pos                      ((uint32_t)3)                     /* Capture/Compare 3 generation */
#define TIM_EGR_CC3G_Mask                     (((uint32_t)0x01) << 3)
#define TIM_EGR_CC3G                          TIM_EGR_CC3G_Mask
#define TIM_EGR_CC2G_Pos                      ((uint32_t)2)                     /* Capture/Compare 2 generation */
#define TIM_EGR_CC2G_Mask                     (((uint32_t)0x01) << 2)
#define TIM_EGR_CC2G                          TIM_EGR_CC2G_Mask
#define TIM_EGR_CC1G_Pos                      ((uint32_t)1)                     /* Capture/Compare 1 generation */
#define TIM_EGR_CC1G_Mask                     (((uint32_t)0x01) << 1)
#define TIM_EGR_CC1G                          TIM_EGR_CC1G_Mask
#define TIM_EGR_UG_Pos                        ((uint32_t)0)                     /* Update generation */
#define TIM_EGR_UG_Mask                       (((uint32_t)0x01) << 0)
#define TIM_EGR_UG                            TIM_EGR_UG_Mask

/********************************* TIM->CCMR1_Output  ***********************************/
#define TIM_CCMR1_Output_OC2CE_Pos            ((uint32_t)15)                    /* Output Compare 2 clear enable */
#define TIM_CCMR1_Output_OC2CE_Mask           (((uint32_t)0x01) << 15)
#define TIM_CCMR1_Output_OC2CE                TIM_CCMR1_Output_OC2CE_Mask
#define TIM_CCMR1_Output_OC2M_Pos             ((uint32_t)12)                    /* Output Compare 2 mode */
#define TIM_CCMR1_Output_OC2M_Mask            (((uint32_t)0x07) << 12)
#define TIM_CCMR1_Output_OC2M                 TIM_CCMR1_Output_OC2M_Mask
#define TIM_CCMR1_Output_OC2M_0               (((uint32_t)0x1 << TIM_CCMR1_Output_OC2M_Pos))
#define TIM_CCMR1_Output_OC2M_1               (((uint32_t)0x2 << TIM_CCMR1_Output_OC2M_Pos))
#define TIM_CCMR1_Output_OC2M_2               (((uint32_t)0x4 << TIM_CCMR1_Output_OC2M_Pos))
#define TIM_CCMR1_Output_OC2PE_Pos            ((uint32_t)11)                    /* Output Compare 2 preload enable */
#define TIM_CCMR1_Output_OC2PE_Mask           (((uint32_t)0x01) << 11)
#define TIM_CCMR1_Output_OC2PE                TIM_CCMR1_Output_OC2PE_Mask
#define TIM_CCMR1_Output_OC2FE_Pos            ((uint32_t)10)                    /* Output Compare 2 fast enable */
#define TIM_CCMR1_Output_OC2FE_Mask           (((uint32_t)0x01) << 10)
#define TIM_CCMR1_Output_OC2FE                TIM_CCMR1_Output_OC2FE_Mask
#define TIM_CCMR1_Output_CC2S_Pos             ((uint32_t)8)                     /* Capture/Compare 2 selection */
#define TIM_CCMR1_Output_CC2S_Mask            (((uint32_t)0x03) << 8)
#define TIM_CCMR1_Output_CC2S                 TIM_CCMR1_Output_CC2S_Mask
#define TIM_CCMR1_Output_CC2S_0               (((uint32_t)0x1 << TIM_CCMR1_Output_CC2S_Pos))
#define TIM_CCMR1_Output_CC2S_1               (((uint32_t)0x2 << TIM_CCMR1_Output_CC2S_Pos))
#define TIM_CCMR1_Output_OC1CE_Pos            ((uint32_t)7)                     /* Output Compare 1 clear enable */
#define TIM_CCMR1_Output_OC1CE_Mask           (((uint32_t)0x01) << 7)
#define TIM_CCMR1_Output_OC1CE                TIM_CCMR1_Output_OC1CE_Mask
#define TIM_CCMR1_Output_OC1M_Pos             ((uint32_t)4)                     /* Output Compare 1 mode */
#define TIM_CCMR1_Output_OC1M_Mask            (((uint32_t)0x07) << 4)
#define TIM_CCMR1_Output_OC1M                 TIM_CCMR1_Output_OC1M_Mask
#define TIM_CCMR1_Output_OC1M_0               (((uint32_t)0x1 << TIM_CCMR1_Output_OC1M_Pos))
#define TIM_CCMR1_Output_OC1M_1               (((uint32_t)0x2 << TIM_CCMR1_Output_OC1M_Pos))
#define TIM_CCMR1_Output_OC1M_2               (((uint32_t)0x4 << TIM_CCMR1_Output_OC1M_Pos))
#define TIM_CCMR1_Output_OC1PE_Pos            ((uint32_t)3)                     /* Output Compare 1 preload enable */
#define TIM_CCMR1_Output_OC1PE_Mask           (((uint32_t)0x01) << 3)
#define TIM_CCMR1_Output_OC1PE                TIM_CCMR1_Output_OC1PE_Mask
#define TIM_CCMR1_Output_OC1FE_Pos            ((uint32_t)2)                     /* Output Compare 1 fast enable */
#define TIM_CCMR1_Output_OC1FE_Mask           (((uint32_t)0x01) << 2)
#define TIM_CCMR1_Output_OC1FE                TIM_CCMR1_Output_OC1FE_Mask
#define TIM_CCMR1_Output_CC1S_Pos             ((uint32_t)0)                     /* Capture/Compare 1 selection */
#define TIM_CCMR1_Output_CC1S_Mask            (((uint32_t)0x03) << 0)
#define TIM_CCMR1_Output_CC1S                 TIM_CCMR1_Output_CC1S_Mask
#define TIM_CCMR1_Output_CC1S_0               (((uint32_t)0x1))
#define TIM_CCMR1_Output_CC1S_1               (((uint32_t)0x2))

/********************************** TIM->CCMR1_Input  ***********************************/
#define TIM_CCMR1_Input_IC2F_Pos              ((uint32_t)12)                    /* Input capture 2 filter */
#define TIM_CCMR1_Input_IC2F_Mask             (((uint32_t)0x0F) << 12)
#define TIM_CCMR1_Input_IC2F                  TIM_CCMR1_Input_IC2F_Mask
#define TIM_CCMR1_Input_IC2F_0                (((uint32_t)0x1 << TIM_CCMR1_Input_IC2F_Pos))
#define TIM_CCMR1_Input_IC2F_1                (((uint32_t)0x2 << TIM_CCMR1_Input_IC2F_Pos))
#define TIM_CCMR1_Input_IC2F_2                (((uint32_t)0x4 << TIM_CCMR1_Input_IC2F_Pos))
#define TIM_CCMR1_Input_IC2F_3                (((uint32_t)0x8 << TIM_CCMR1_Input_IC2F_Pos))
#define TIM_CCMR1_Input_IC2PSC_Pos            ((uint32_t)10)                    /* Input capture 2 prescaler */
#define TIM_CCMR1_Input_IC2PSC_Mask           (((uint32_t)0x03) << 10)
#define TIM_CCMR1_Input_IC2PSC                TIM_CCMR1_Input_IC2PSC_Mask
#define TIM_CCMR1_Input_IC2PSC_0              (((uint32_t)0x1 << TIM_CCMR1_Input_IC2PSC_Pos))
#define TIM_CCMR1_Input_IC2PSC_1              (((uint32_t)0x2 << TIM_CCMR1_Input_IC2PSC_Pos))
#define TIM_CCMR1_Input_CC2S_Pos              ((uint32_t)8)                     /* Capture/Compare 2 selection */
#define TIM_CCMR1_Input_CC2S_Mask             (((uint32_t)0x03) << 8)
#define TIM_CCMR1_Input_CC2S                  TIM_CCMR1_Input_CC2S_Mask
#define TIM_CCMR1_Input_CC2S_0                (((uint32_t)0x1 << TIM_CCMR1_Input_CC2S_Pos))
#define TIM_CCMR1_Input_CC2S_1                (((uint32_t)0x2 << TIM_CCMR1_Input_CC2S_Pos))
#define TIM_CCMR1_Input_IC1F_Pos              ((uint32_t)4)                     /* Input capture 1 filter */
#define TIM_CCMR1_Input_IC1F_Mask             (((uint32_t)0x0F) << 4)
#define TIM_CCMR1_Input_IC1F                  TIM_CCMR1_Input_IC1F_Mask
#define TIM_CCMR1_Input_IC1F_0                (((uint32_t)0x1 << TIM_CCMR1_Input_IC1F_Pos))
#define TIM_CCMR1_Input_IC1F_1                (((uint32_t)0x2 << TIM_CCMR1_Input_IC1F_Pos))
#define TIM_CCMR1_Input_IC1F_2                (((uint32_t)0x4 << TIM_CCMR1_Input_IC1F_Pos))
#define TIM_CCMR1_Input_IC1F_3                (((uint32_t)0x8 << TIM_CCMR1_Input_IC1F_Pos))
#define TIM_CCMR1_Input_IC1PSC_Pos            ((uint32_t)2)                     /* Input capture 1 prescaler */
#define TIM_CCMR1_Input_IC1PSC_Mask           (((uint32_t)0x03) << 2)
#define TIM_CCMR1_Input_IC1PSC                TIM_CCMR1_Input_IC1PSC_Mask
#define TIM_CCMR1_Input_IC1PSC_0              (((uint32_t)0x1 << TIM_CCMR1_Input_IC1PSC_Pos))
#define TIM_CCMR1_Input_IC1PSC_1              (((uint32_t)0x2 << TIM_CCMR1_Input_IC1PSC_Pos))
#define TIM_CCMR1_Input_CC1S_Pos              ((uint32_t)0)                     /* Capture/Compare 1 Selection */
#define TIM_CCMR1_Input_CC1S_Mask             (((uint32_t)0x03) << 0)
#define TIM_CCMR1_Input_CC1S                  TIM_CCMR1_Input_CC1S_Mask
#define TIM_CCMR1_Input_CC1S_0                (((uint32_t)0x1))
#define TIM_CCMR1_Input_CC1S_1                (((uint32_t)0x2))

/********************************* TIM->CCMR2_Output  ***********************************/
#define TIM_CCMR2_Output_OC4CE_Pos            ((uint32_t)15)                    /* Output compare 4 clear enable */
#define TIM_CCMR2_Output_OC4CE_Mask           (((uint32_t)0x01) << 15)
#define TIM_CCMR2_Output_OC4CE                TIM_CCMR2_Output_OC4CE_Mask
#define TIM_CCMR2_Output_OC4M_Pos             ((uint32_t)12)                    /* Output compare 4 mode */
#define TIM_CCMR2_Output_OC4M_Mask            (((uint32_t)0x07) << 12)
#define TIM_CCMR2_Output_OC4M                 TIM_CCMR2_Output_OC4M_Mask
#define TIM_CCMR2_Output_OC4M_0               (((uint32_t)0x1 << TIM_CCMR2_Output_OC4M_Pos))
#define TIM_CCMR2_Output_OC4M_1               (((uint32_t)0x2 << TIM_CCMR2_Output_OC4M_Pos))
#define TIM_CCMR2_Output_OC4M_2               (((uint32_t)0x4 << TIM_CCMR2_Output_OC4M_Pos))
#define TIM_CCMR2_Output_OC4PE_Pos            ((uint32_t)11)                    /* Output compare 4 preload enable */
#define TIM_CCMR2_Output_OC4PE_Mask           (((uint32_t)0x01) << 11)
#define TIM_CCMR2_Output_OC4PE                TIM_CCMR2_Output_OC4PE_Mask
#define TIM_CCMR2_Output_OC4FE_Pos            ((uint32_t)10)                    /* Output compare 4 fast enable */
#define TIM_CCMR2_Output_OC4FE_Mask           (((uint32_t)0x01) << 10)
#define TIM_CCMR2_Output_OC4FE                TIM_CCMR2_Output_OC4FE_Mask
#define TIM_CCMR2_Output_CC4S_Pos             ((uint32_t)8)                     /* Capture/Compare 4 selection */
#define TIM_CCMR2_Output_CC4S_Mask            (((uint32_t)0x03) << 8)
#define TIM_CCMR2_Output_CC4S                 TIM_CCMR2_Output_CC4S_Mask
#define TIM_CCMR2_Output_CC4S_0               (((uint32_t)0x1 << TIM_CCMR2_Output_CC4S_Pos))
#define TIM_CCMR2_Output_CC4S_1               (((uint32_t)0x2 << TIM_CCMR2_Output_CC4S_Pos))
#define TIM_CCMR2_Output_OC3CE_Pos            ((uint32_t)7)                     /* Output compare 3 clear enable */
#define TIM_CCMR2_Output_OC3CE_Mask           (((uint32_t)0x01) << 7)
#define TIM_CCMR2_Output_OC3CE                TIM_CCMR2_Output_OC3CE_Mask
#define TIM_CCMR2_Output_OC3M_Pos             ((uint32_t)4)                     /* Output compare 3 mode */
#define TIM_CCMR2_Output_OC3M_Mask            (((uint32_t)0x07) << 4)
#define TIM_CCMR2_Output_OC3M                 TIM_CCMR2_Output_OC3M_Mask
#define TIM_CCMR2_Output_OC3M_0               (((uint32_t)0x1 << TIM_CCMR2_Output_OC3M_Pos))
#define TIM_CCMR2_Output_OC3M_1               (((uint32_t)0x2 << TIM_CCMR2_Output_OC3M_Pos))
#define TIM_CCMR2_Output_OC3M_2               (((uint32_t)0x4 << TIM_CCMR2_Output_OC3M_Pos))
#define TIM_CCMR2_Output_OC3PE_Pos            ((uint32_t)3)                     /* Output compare 3 preload enable */
#define TIM_CCMR2_Output_OC3PE_Mask           (((uint32_t)0x01) << 3)
#define TIM_CCMR2_Output_OC3PE                TIM_CCMR2_Output_OC3PE_Mask
#define TIM_CCMR2_Output_OC3FE_Pos            ((uint32_t)2)                     /* Output compare 3 fast enable */
#define TIM_CCMR2_Output_OC3FE_Mask           (((uint32_t)0x01) << 2)
#define TIM_CCMR2_Output_OC3FE                TIM_CCMR2_Output_OC3FE_Mask
#define TIM_CCMR2_Output_CC3S_Pos             ((uint32_t)0)                     /* Capture/Compare 3 selection */
#define TIM_CCMR2_Output_CC3S_Mask            (((uint32_t)0x03) << 0)
#define TIM_CCMR2_Output_CC3S                 TIM_CCMR2_Output_CC3S_Mask
#define TIM_CCMR2_Output_CC3S_0               (((uint32_t)0x1))
#define TIM_CCMR2_Output_CC3S_1               (((uint32_t)0x2))

/********************************** TIM->CCMR2_Input  ***********************************/
#define TIM_CCMR2_Input_IC4F_Pos              ((uint32_t)12)                    /* Input capture 4 filter */
#define TIM_CCMR2_Input_IC4F_Mask             (((uint32_t)0x0F) << 12)
#define TIM_CCMR2_Input_IC4F                  TIM_CCMR2_Input_IC4F_Mask
#define TIM_CCMR2_Input_IC4F_0                (((uint32_t)0x1 << TIM_CCMR2_Input_IC4F_Pos))
#define TIM_CCMR2_Input_IC4F_1                (((uint32_t)0x2 << TIM_CCMR2_Input_IC4F_Pos))
#define TIM_CCMR2_Input_IC4F_2                (((uint32_t)0x4 << TIM_CCMR2_Input_IC4F_Pos))
#define TIM_CCMR2_Input_IC4F_3                (((uint32_t)0x8 << TIM_CCMR2_Input_IC4F_Pos))
#define TIM_CCMR2_Input_IC4PSC_Pos            ((uint32_t)10)                    /* Input capture 4 prescaler */
#define TIM_CCMR2_Input_IC4PSC_Mask           (((uint32_t)0x03) << 10)
#define TIM_CCMR2_Input_IC4PSC                TIM_CCMR2_Input_IC4PSC_Mask
#define TIM_CCMR2_Input_IC4PSC_0              (((uint32_t)0x1 << TIM_CCMR2_Input_IC4PSC_Pos))
#define TIM_CCMR2_Input_IC4PSC_1              (((uint32_t)0x2 << TIM_CCMR2_Input_IC4PSC_Pos))
#define TIM_CCMR2_Input_CC4S_Pos              ((uint32_t)8)                     /* Capture/Compare 4 selection */
#define TIM_CCMR2_Input_CC4S_Mask             (((uint32_t)0x03) << 8)
#define TIM_CCMR2_Input_CC4S                  TIM_CCMR2_Input_CC4S_Mask
#define TIM_CCMR2_Input_CC4S_0                (((uint32_t)0x1 << TIM_CCMR2_Input_CC4S_Pos))
#define TIM_CCMR2_Input_CC4S_1                (((uint32_t)0x2 << TIM_CCMR2_Input_CC4S_Pos))
#define TIM_CCMR2_Input_IC3F_Pos              ((uint32_t)4)                     /* Input capture 3 filter */
#define TIM_CCMR2_Input_IC3F_Mask             (((uint32_t)0x0F) << 4)
#define TIM_CCMR2_Input_IC3F                  TIM_CCMR2_Input_IC3F_Mask
#define TIM_CCMR2_Input_IC3F_0                (((uint32_t)0x1 << TIM_CCMR2_Input_IC3F_Pos))
#define TIM_CCMR2_Input_IC3F_1                (((uint32_t)0x2 << TIM_CCMR2_Input_IC3F_Pos))
#define TIM_CCMR2_Input_IC3F_2                (((uint32_t)0x4 << TIM_CCMR2_Input_IC3F_Pos))
#define TIM_CCMR2_Input_IC3F_3                (((uint32_t)0x8 << TIM_CCMR2_Input_IC3F_Pos))
#define TIM_CCMR2_Input_IC3PSC_Pos            ((uint32_t)2)                     /* Input capture 3 prescaler */
#define TIM_CCMR2_Input_IC3PSC_Mask           (((uint32_t)0x03) << 2)
#define TIM_CCMR2_Input_IC3PSC                TIM_CCMR2_Input_IC3PSC_Mask
#define TIM_CCMR2_Input_IC3PSC_0              (((uint32_t)0x1 << TIM_CCMR2_Input_IC3PSC_Pos))
#define TIM_CCMR2_Input_IC3PSC_1              (((uint32_t)0x2 << TIM_CCMR2_Input_IC3PSC_Pos))
#define TIM_CCMR2_Input_CC3S_Pos              ((uint32_t)0)                     /* Capture/compare 3 selection */
#define TIM_CCMR2_Input_CC3S_Mask             (((uint32_t)0x03) << 0)
#define TIM_CCMR2_Input_CC3S                  TIM_CCMR2_Input_CC3S_Mask
#define TIM_CCMR2_Input_CC3S_0                (((uint32_t)0x1))
#define TIM_CCMR2_Input_CC3S_1                (((uint32_t)0x2))

/************************************* TIM->CCER  ***************************************/
#define TIM_CCER_CC4P_Pos                     ((uint32_t)13)                    /* Capture/Compare 4 output polarity */
#define TIM_CCER_CC4P_Mask                    (((uint32_t)0x01) << 13)
#define TIM_CCER_CC4P                         TIM_CCER_CC4P_Mask
#define TIM_CCER_CC4E_Pos                     ((uint32_t)12)                    /* Capture/Compare 4 output enable */
#define TIM_CCER_CC4E_Mask                    (((uint32_t)0x01) << 12)
#define TIM_CCER_CC4E                         TIM_CCER_CC4E_Mask
#define TIM_CCER_CC3NP_Pos                    ((uint32_t)11)                    /* Capture/Compare 3 complementary output polarity */
#define TIM_CCER_CC3NP_Mask                   (((uint32_t)0x01) << 11)
#define TIM_CCER_CC3NP                        TIM_CCER_CC3NP_Mask
#define TIM_CCER_CC3NE_Pos                    ((uint32_t)10)                    /* Capture/Compare 3 complementary output enable */
#define TIM_CCER_CC3NE_Mask                   (((uint32_t)0x01) << 10)
#define TIM_CCER_CC3NE                        TIM_CCER_CC3NE_Mask
#define TIM_CCER_CC3P_Pos                     ((uint32_t)9)                     /* Capture/Compare 3 output polarity */
#define TIM_CCER_CC3P_Mask                    (((uint32_t)0x01) << 9)
#define TIM_CCER_CC3P                         TIM_CCER_CC3P_Mask
#define TIM_CCER_CC3E_Pos                     ((uint32_t)8)                     /* Capture/Compare 3 output enable */
#define TIM_CCER_CC3E_Mask                    (((uint32_t)0x01) << 8)
#define TIM_CCER_CC3E                         TIM_CCER_CC3E_Mask
#define TIM_CCER_CC2NP_Pos                    ((uint32_t)7)                     /* Capture/Compare 1 complementary output polarity */
#define TIM_CCER_CC2NP_Mask                   (((uint32_t)0x01) << 7)
#define TIM_CCER_CC2NP                        TIM_CCER_CC2NP_Mask
#define TIM_CCER_CC2NE_Pos                    ((uint32_t)6)                     /* Capture/Compare 2 complementary output enable */
#define TIM_CCER_CC2NE_Mask                   (((uint32_t)0x01) << 6)
#define TIM_CCER_CC2NE                        TIM_CCER_CC2NE_Mask
#define TIM_CCER_CC2P_Pos                     ((uint32_t)5)                     /* Capture/Compare 2 output polarity */
#define TIM_CCER_CC2P_Mask                    (((uint32_t)0x01) << 5)
#define TIM_CCER_CC2P                         TIM_CCER_CC2P_Mask
#define TIM_CCER_CC2E_Pos                     ((uint32_t)4)                     /* Capture/Compare 2 output enable */
#define TIM_CCER_CC2E_Mask                    (((uint32_t)0x01) << 4)
#define TIM_CCER_CC2E                         TIM_CCER_CC2E_Mask
#define TIM_CCER_CC1NP_Pos                    ((uint32_t)3)                     /* Capture/Compare 1 complementary output polarity */
#define TIM_CCER_CC1NP_Mask                   (((uint32_t)0x01) << 3)
#define TIM_CCER_CC1NP                        TIM_CCER_CC1NP_Mask
#define TIM_CCER_CC1NE_Pos                    ((uint32_t)2)                     /* Capture/Compare 1 complementary output enable */
#define TIM_CCER_CC1NE_Mask                   (((uint32_t)0x01) << 2)
#define TIM_CCER_CC1NE                        TIM_CCER_CC1NE_Mask
#define TIM_CCER_CC1P_Pos                     ((uint32_t)1)                     /* Capture/Compare 1 output polarity */
#define TIM_CCER_CC1P_Mask                    (((uint32_t)0x01) << 1)
#define TIM_CCER_CC1P                         TIM_CCER_CC1P_Mask
#define TIM_CCER_CC1E_Pos                     ((uint32_t)0)                     /* Capture/Compare 1 output enable */
#define TIM_CCER_CC1E_Mask                    (((uint32_t)0x01) << 0)
#define TIM_CCER_CC1E                         TIM_CCER_CC1E_Mask
#define TIM_CCER_CC4NP_Pos                    ((uint32_t)15)                    /* Capture/Compare 4 output Polarity */
#define TIM_CCER_CC4NP_Mask                   (((uint32_t)0x01) << 15)
#define TIM_CCER_CC4NP                        TIM_CCER_CC4NP_Mask

/************************************** TIM->CNT  ***************************************/
#define TIM_CNT_CNT_Pos                       ((uint32_t)0)                     /* Counter value */
#define TIM_CNT_CNT_Mask                      (((uint32_t)0xFFFF) << 0)
#define TIM_CNT_CNT                           TIM_CNT_CNT_Mask

/************************************** TIM->PSC  ***************************************/
#define TIM_PSC_PSC_Pos                       ((uint32_t)0)                     /* Prescaler value */
#define TIM_PSC_PSC_Mask                      (((uint32_t)0xFFFF) << 0)
#define TIM_PSC_PSC                           TIM_PSC_PSC_Mask

/************************************** TIM->ARR  ***************************************/
#define TIM_ARR_ARR_Pos                       ((uint32_t)0)                     /* Auto-reload value */
#define TIM_ARR_ARR_Mask                      (((uint32_t)0xFFFF) << 0)
#define TIM_ARR_ARR                           TIM_ARR_ARR_Mask

/************************************** TIM->RCR  ***************************************/
#define TIM_RCR_REP_Pos                       ((uint32_t)0)                     /* Repetition counter value */
#define TIM_RCR_REP_Mask                      (((uint32_t)0xFF) << 0)
#define TIM_RCR_REP                           TIM_RCR_REP_Mask
#define TIM_RCR_REP_0                         (((uint32_t)0x1))
#define TIM_RCR_REP_1                         (((uint32_t)0x2))
#define TIM_RCR_REP_2                         (((uint32_t)0x4))
#define TIM_RCR_REP_3                         (((uint32_t)0x8))
#define TIM_RCR_REP_4                         (((uint32_t)0x10))
#define TIM_RCR_REP_5                         (((uint32_t)0x20))
#define TIM_RCR_REP_6                         (((uint32_t)0x40))
#define TIM_RCR_REP_7                         (((uint32_t)0x80))

/************************************* TIM->CCR1  ***************************************/
#define TIM_CCR1_CCR1_Pos                     ((uint32_t)0)                     /* Capture/Compare 1 value */
#define TIM_CCR1_CCR1_Mask                    (((uint32_t)0xFFFF) << 0)
#define TIM_CCR1_CCR1                         TIM_CCR1_CCR1_Mask

/************************************* TIM->CCR2  ***************************************/
#define TIM_CCR2_CCR2_Pos                     ((uint32_t)0)                     /* Capture/Compare 2 value */
#define TIM_CCR2_CCR2_Mask                    (((uint32_t)0xFFFF) << 0)
#define TIM_CCR2_CCR2                         TIM_CCR2_CCR2_Mask

/************************************* TIM->CCR3  ***************************************/
#define TIM_CCR3_CCR3_Pos                     ((uint32_t)0)                     /* Capture/Compare 3 value */
#define TIM_CCR3_CCR3_Mask                    (((uint32_t)0xFFFF) << 0)
#define TIM_CCR3_CCR3                         TIM_CCR3_CCR3_Mask

/************************************* TIM->CCR4  ***************************************/
#define TIM_CCR4_CCR4_Pos                     ((uint32_t)0)                     /* Capture/Compare 4 value */
#define TIM_CCR4_CCR4_Mask                    (((uint32_t)0xFFFF) << 0)
#define TIM_CCR4_CCR4                         TIM_CCR4_CCR4_Mask

/************************************* TIM->BDTR  ***************************************/
#define TIM_BDTR_MOE_Pos                      ((uint32_t)15)                    /* Main output enable */
#define TIM_BDTR_MOE_Mask                     (((uint32_t)0x01) << 15)
#define TIM_BDTR_MOE                          TIM_BDTR_MOE_Mask
#define TIM_BDTR_AOE_Pos                      ((uint32_t)14)                    /* Automatic output enable */
#define TIM_BDTR_AOE_Mask                     (((uint32_t)0x01) << 14)
#define TIM_BDTR_AOE                          TIM_BDTR_AOE_Mask
#define TIM_BDTR_BKP_Pos                      ((uint32_t)13)                    /* Break polarity */
#define TIM_BDTR_BKP_Mask                     (((uint32_t)0x01) << 13)
#define TIM_BDTR_BKP                          TIM_BDTR_BKP_Mask
#define TIM_BDTR_BKE_Pos                      ((uint32_t)12)                    /* Break enable */
#define TIM_BDTR_BKE_Mask                     (((uint32_t)0x01) << 12)
#define TIM_BDTR_BKE                          TIM_BDTR_BKE_Mask
#define TIM_BDTR_OSSR_Pos                     ((uint32_t)11)                    /* Off-state selection for Run mode */
#define TIM_BDTR_OSSR_Mask                    (((uint32_t)0x01) << 11)
#define TIM_BDTR_OSSR                         TIM_BDTR_OSSR_Mask
#define TIM_BDTR_OSSI_Pos                     ((uint32_t)10)                    /* Off-state selection for Idle mode */
#define TIM_BDTR_OSSI_Mask                    (((uint32_t)0x01) << 10)
#define TIM_BDTR_OSSI                         TIM_BDTR_OSSI_Mask
#define TIM_BDTR_LOCK_Pos                     ((uint32_t)8)                     /* Lock configuration */
#define TIM_BDTR_LOCK_Mask                    (((uint32_t)0x03) << 8)
#define TIM_BDTR_LOCK                         TIM_BDTR_LOCK_Mask
#define TIM_BDTR_LOCK_0                       (((uint32_t)0x1 << TIM_BDTR_LOCK_Pos))
#define TIM_BDTR_LOCK_1                       (((uint32_t)0x2 << TIM_BDTR_LOCK_Pos))
#define TIM_BDTR_DTG_Pos                      ((uint32_t)0)                     /* Dead-time generator setup */
#define TIM_BDTR_DTG_Mask                     (((uint32_t)0xFF) << 0)
#define TIM_BDTR_DTG                          TIM_BDTR_DTG_Mask
#define TIM_BDTR_DTG_0                        (((uint32_t)0x1))
#define TIM_BDTR_DTG_1                        (((uint32_t)0x2))
#define TIM_BDTR_DTG_2                        (((uint32_t)0x4))
#define TIM_BDTR_DTG_3                        (((uint32_t)0x8))
#define TIM_BDTR_DTG_4                        (((uint32_t)0x10))
#define TIM_BDTR_DTG_5                        (((uint32_t)0x20))
#define TIM_BDTR_DTG_6                        (((uint32_t)0x40))
#define TIM_BDTR_DTG_7                        (((uint32_t)0x80))

/*****************************************************************************************
*                                     Peripheral AWUT                                    *
*****************************************************************************************/
typedef struct{
  __IO uint32_t CR;                     /* CR */
  __I  uint32_t SR;                     /* SR */
}AWUT_TypeDef;

/************************************** AWUT->CR  ***************************************/
#define AWUT_CR_RLR_WBUSY_Pos                 ((uint32_t)31)                    /* Reload register write busy */
#define AWUT_CR_RLR_WBUSY_Mask                (((uint32_t)0x01) << 31)
#define AWUT_CR_RLR_WBUSY                     AWUT_CR_RLR_WBUSY_Mask
#define AWUT_CR_AWUT_RLR_Pos                  ((uint32_t)1)                     /* Automatic wakeup timer reload register */
#define AWUT_CR_AWUT_RLR_Mask                 (((uint32_t)0x3FFFFF) << 1)
#define AWUT_CR_AWUT_RLR                      AWUT_CR_AWUT_RLR_Mask
#define AWUT_CR_CKSEL_Pos                     ((uint32_t)0)                     /* Automatic wakeup timer clock selection */
#define AWUT_CR_CKSEL_Mask                    (((uint32_t)0x01) << 0)
#define AWUT_CR_CKSEL                         AWUT_CR_CKSEL_Mask

/************************************** AWUT->SR  ***************************************/
#define AWUT_SR_BUSY_Pos                      ((uint32_t)0)                     /* Automatic wakeup timer busy */
#define AWUT_SR_BUSY_Mask                     (((uint32_t)0x01) << 0)
#define AWUT_SR_BUSY                          AWUT_SR_BUSY_Mask

/*****************************************************************************************
*                                     Peripheral IWDG                                    *
*****************************************************************************************/
typedef struct{
  __O  uint32_t KR;                     /* KR */
  __IO uint32_t PR;                     /* PR */
  __IO uint32_t RLR;                    /* RLR */
  __I  uint32_t SR;                     /* SR */
  __IO uint32_t WINR;                   /* WINR */
}IWDG_TypeDef;

/************************************** IWDG->KR  ***************************************/
#define IWDG_KR_KEY_Pos                       ((uint32_t)0)                     /* Key value */
#define IWDG_KR_KEY_Mask                      (((uint32_t)0xFFFF) << 0)
#define IWDG_KR_KEY                           IWDG_KR_KEY_Mask

/************************************** IWDG->PR  ***************************************/
#define IWDG_PR_PR_Pos                        ((uint32_t)0)                     /* Prescaler divider */
#define IWDG_PR_PR_Mask                       (((uint32_t)0x07) << 0)
#define IWDG_PR_PR                            IWDG_PR_PR_Mask
#define IWDG_PR_PR_0                          (((uint32_t)0x1))
#define IWDG_PR_PR_1                          (((uint32_t)0x2))
#define IWDG_PR_PR_2                          (((uint32_t)0x4))

/************************************* IWDG->RLR  ***************************************/
#define IWDG_RLR_RL_Pos                       ((uint32_t)0)                     /* Watchdog counter reload value */
#define IWDG_RLR_RL_Mask                      (((uint32_t)0x0FFF) << 0)
#define IWDG_RLR_RL                           IWDG_RLR_RL_Mask
#define IWDG_RLR_RL_0                         (((uint32_t)0x1))
#define IWDG_RLR_RL_1                         (((uint32_t)0x2))
#define IWDG_RLR_RL_2                         (((uint32_t)0x4))
#define IWDG_RLR_RL_3                         (((uint32_t)0x8))
#define IWDG_RLR_RL_4                         (((uint32_t)0x10))
#define IWDG_RLR_RL_5                         (((uint32_t)0x20))
#define IWDG_RLR_RL_6                         (((uint32_t)0x40))
#define IWDG_RLR_RL_7                         (((uint32_t)0x80))
#define IWDG_RLR_RL_8                         (((uint32_t)0x100))
#define IWDG_RLR_RL_9                         (((uint32_t)0x200))
#define IWDG_RLR_RL_10                        (((uint32_t)0x400))
#define IWDG_RLR_RL_11                        (((uint32_t)0x800))

/************************************** IWDG->SR  ***************************************/
#define IWDG_SR_WVU_Pos                       ((uint32_t)2)                     /* Watchdog counter window value update */
#define IWDG_SR_WVU_Mask                      (((uint32_t)0x01) << 2)
#define IWDG_SR_WVU                           IWDG_SR_WVU_Mask
#define IWDG_SR_RVU_Pos                       ((uint32_t)1)                     /* Watchdog counter reload value update */
#define IWDG_SR_RVU_Mask                      (((uint32_t)0x01) << 1)
#define IWDG_SR_RVU                           IWDG_SR_RVU_Mask
#define IWDG_SR_PVU_Pos                       ((uint32_t)0)                     /* Watchdog prescaler value update */
#define IWDG_SR_PVU_Mask                      (((uint32_t)0x01) << 0)
#define IWDG_SR_PVU                           IWDG_SR_PVU_Mask

/************************************* IWDG->WINR  **************************************/
#define IWDG_WINR_WIN_Pos                     ((uint32_t)0)                     /* Watchdog counter window value */
#define IWDG_WINR_WIN_Mask                    (((uint32_t)0x0FFF) << 0)
#define IWDG_WINR_WIN                         IWDG_WINR_WIN_Mask
#define IWDG_WINR_WIN_0                       (((uint32_t)0x1))
#define IWDG_WINR_WIN_1                       (((uint32_t)0x2))
#define IWDG_WINR_WIN_2                       (((uint32_t)0x4))
#define IWDG_WINR_WIN_3                       (((uint32_t)0x8))
#define IWDG_WINR_WIN_4                       (((uint32_t)0x10))
#define IWDG_WINR_WIN_5                       (((uint32_t)0x20))
#define IWDG_WINR_WIN_6                       (((uint32_t)0x40))
#define IWDG_WINR_WIN_7                       (((uint32_t)0x80))
#define IWDG_WINR_WIN_8                       (((uint32_t)0x100))
#define IWDG_WINR_WIN_9                       (((uint32_t)0x200))
#define IWDG_WINR_WIN_10                      (((uint32_t)0x400))
#define IWDG_WINR_WIN_11                      (((uint32_t)0x800))

/*****************************************************************************************
*                                     Peripheral WWDG                                    *
*****************************************************************************************/
typedef struct{
  __IO uint32_t CR;                     /* CR */
  __IO uint32_t CFR;                    /* CFR */
  __IO uint32_t SR;                     /* SR */
}WWDG_TypeDef;

/************************************** WWDG->CR  ***************************************/
#define WWDG_CR_WDGA_Pos                      ((uint32_t)7)                     /* Activation bit */
#define WWDG_CR_WDGA_Mask                     (((uint32_t)0x01) << 7)
#define WWDG_CR_WDGA                          WWDG_CR_WDGA_Mask
#define WWDG_CR_T_Pos                         ((uint32_t)0)                     /* 7-bit counter (MSB to LSB) */
#define WWDG_CR_T_Mask                        (((uint32_t)0x7F) << 0)
#define WWDG_CR_T                             WWDG_CR_T_Mask
#define WWDG_CR_T_0                           (((uint32_t)0x1))
#define WWDG_CR_T_1                           (((uint32_t)0x2))
#define WWDG_CR_T_2                           (((uint32_t)0x4))
#define WWDG_CR_T_3                           (((uint32_t)0x8))
#define WWDG_CR_T_4                           (((uint32_t)0x10))
#define WWDG_CR_T_5                           (((uint32_t)0x20))
#define WWDG_CR_T_6                           (((uint32_t)0x40))

/************************************* WWDG->CFR  ***************************************/
#define WWDG_CFR_EWI_Pos                      ((uint32_t)9)                     /* Early wakeup interrupt */
#define WWDG_CFR_EWI_Mask                     (((uint32_t)0x01) << 9)
#define WWDG_CFR_EWI                          WWDG_CFR_EWI_Mask
#define WWDG_CFR_WDGTB_Pos                    ((uint32_t)7)                     /* Timer base */
#define WWDG_CFR_WDGTB_Mask                   (((uint32_t)0x03) << 7)
#define WWDG_CFR_WDGTB                        WWDG_CFR_WDGTB_Mask
#define WWDG_CFR_WDGTB_0                      (((uint32_t)0x1 << WWDG_CFR_WDGTB_Pos))
#define WWDG_CFR_WDGTB_1                      (((uint32_t)0x2 << WWDG_CFR_WDGTB_Pos))
#define WWDG_CFR_W_Pos                        ((uint32_t)0)                     /* 7-bit window value */
#define WWDG_CFR_W_Mask                       (((uint32_t)0x7F) << 0)
#define WWDG_CFR_W                            WWDG_CFR_W_Mask
#define WWDG_CFR_W_0                          (((uint32_t)0x1))
#define WWDG_CFR_W_1                          (((uint32_t)0x2))
#define WWDG_CFR_W_2                          (((uint32_t)0x4))
#define WWDG_CFR_W_3                          (((uint32_t)0x8))
#define WWDG_CFR_W_4                          (((uint32_t)0x10))
#define WWDG_CFR_W_5                          (((uint32_t)0x20))
#define WWDG_CFR_W_6                          (((uint32_t)0x40))

/************************************** WWDG->SR  ***************************************/
#define WWDG_SR_EWIF_Pos                      ((uint32_t)0)                     /* Early wakeup interrupt flag */
#define WWDG_SR_EWIF_Mask                     (((uint32_t)0x01) << 0)
#define WWDG_SR_EWIF                          WWDG_SR_EWIF_Mask

/*****************************************************************************************
*                                     Peripheral UART                                    *
*****************************************************************************************/
typedef struct{
  __IO uint32_t CR1;                    /* CR1 */
  __IO uint32_t CR2;                    /* CR2 */
  __IO uint32_t CR3;                    /* CR3 */
  __IO uint32_t BRR;                    /* BRR */
       uint16_t RESERVED1[4];
  __O  uint32_t RQR;                    /* RQR */
  __I  uint32_t ISR;                    /* ISR */
  __IO uint32_t ICR;                    /* ICR */
  __I  uint32_t RDR;                    /* RDR */
  __IO uint32_t TDR;                    /* TDR */
}UART_TypeDef;

/************************************* UART->CR1  ***************************************/
#define UART_CR1_M1_Pos                       ((uint32_t)28)                    /* Word length */
#define UART_CR1_M1_Mask                      (((uint32_t)0x01) << 28)
#define UART_CR1_M1                           UART_CR1_M1_Mask
#define UART_CR1_OVER8_Pos                    ((uint32_t)15)                    /* Oversampling mode */
#define UART_CR1_OVER8_Mask                   (((uint32_t)0x01) << 15)
#define UART_CR1_OVER8                        UART_CR1_OVER8_Mask
#define UART_CR1_MME_Pos                      ((uint32_t)13)                    /* Mute mode enable */
#define UART_CR1_MME_Mask                     (((uint32_t)0x01) << 13)
#define UART_CR1_MME                          UART_CR1_MME_Mask
#define UART_CR1_M0_Pos                       ((uint32_t)12)                    /* Word length */
#define UART_CR1_M0_Mask                      (((uint32_t)0x01) << 12)
#define UART_CR1_M0                           UART_CR1_M0_Mask
#define UART_CR1_WAKE_Pos                     ((uint32_t)11)                    /* Receiver wakeup method */
#define UART_CR1_WAKE_Mask                    (((uint32_t)0x01) << 11)
#define UART_CR1_WAKE                         UART_CR1_WAKE_Mask
#define UART_CR1_PCE_Pos                      ((uint32_t)10)                    /* Parity control enable */
#define UART_CR1_PCE_Mask                     (((uint32_t)0x01) << 10)
#define UART_CR1_PCE                          UART_CR1_PCE_Mask
#define UART_CR1_PS_Pos                       ((uint32_t)9)                     /* Parity selection */
#define UART_CR1_PS_Mask                      (((uint32_t)0x01) << 9)
#define UART_CR1_PS                           UART_CR1_PS_Mask
#define UART_CR1_PEIE_Pos                     ((uint32_t)8)                     /* PE interrupt enable */
#define UART_CR1_PEIE_Mask                    (((uint32_t)0x01) << 8)
#define UART_CR1_PEIE                         UART_CR1_PEIE_Mask
#define UART_CR1_TXEIE_Pos                    ((uint32_t)7)                     /* TXE interrupt enable */
#define UART_CR1_TXEIE_Mask                   (((uint32_t)0x01) << 7)
#define UART_CR1_TXEIE                        UART_CR1_TXEIE_Mask
#define UART_CR1_TCIE_Pos                     ((uint32_t)6)                     /* Transmission complete interrupt enable */
#define UART_CR1_TCIE_Mask                    (((uint32_t)0x01) << 6)
#define UART_CR1_TCIE                         UART_CR1_TCIE_Mask
#define UART_CR1_RXNEIE_Pos                   ((uint32_t)5)                     /* RXNE interrupt enable */
#define UART_CR1_RXNEIE_Mask                  (((uint32_t)0x01) << 5)
#define UART_CR1_RXNEIE                       UART_CR1_RXNEIE_Mask
#define UART_CR1_IDLEIE_Pos                   ((uint32_t)4)                     /* IDLE interrupt enable */
#define UART_CR1_IDLEIE_Mask                  (((uint32_t)0x01) << 4)
#define UART_CR1_IDLEIE                       UART_CR1_IDLEIE_Mask
#define UART_CR1_TE_Pos                       ((uint32_t)3)                     /* Transmitter enable */
#define UART_CR1_TE_Mask                      (((uint32_t)0x01) << 3)
#define UART_CR1_TE                           UART_CR1_TE_Mask
#define UART_CR1_RE_Pos                       ((uint32_t)2)                     /* Receiver enable */
#define UART_CR1_RE_Mask                      (((uint32_t)0x01) << 2)
#define UART_CR1_RE                           UART_CR1_RE_Mask
#define UART_CR1_UE_Pos                       ((uint32_t)0)                     /* UART enable */
#define UART_CR1_UE_Mask                      (((uint32_t)0x01) << 0)
#define UART_CR1_UE                           UART_CR1_UE_Mask

/************************************* UART->CR2  ***************************************/
#define UART_CR2_ADD_Pos                      ((uint32_t)24)                    /* Address of the UART node */
#define UART_CR2_ADD_Mask                     (((uint32_t)0xFF) << 24)
#define UART_CR2_ADD                          UART_CR2_ADD_Mask
#define UART_CR2_ADD_0                        (((uint32_t)0x1 << UART_CR2_ADD_Pos))
#define UART_CR2_ADD_1                        (((uint32_t)0x2 << UART_CR2_ADD_Pos))
#define UART_CR2_ADD_2                        (((uint32_t)0x4 << UART_CR2_ADD_Pos))
#define UART_CR2_ADD_3                        (((uint32_t)0x8 << UART_CR2_ADD_Pos))
#define UART_CR2_ADD_4                        (((uint32_t)0x10 << UART_CR2_ADD_Pos))
#define UART_CR2_ADD_5                        (((uint32_t)0x20 << UART_CR2_ADD_Pos))
#define UART_CR2_ADD_6                        (((uint32_t)0x40 << UART_CR2_ADD_Pos))
#define UART_CR2_ADD_7                        (((uint32_t)0x80 << UART_CR2_ADD_Pos))
#define UART_CR2_MSBFIRST_Pos                 ((uint32_t)19)                    /* Most significant bit first */
#define UART_CR2_MSBFIRST_Mask                (((uint32_t)0x01) << 19)
#define UART_CR2_MSBFIRST                     UART_CR2_MSBFIRST_Mask
#define UART_CR2_DATAINV_Pos                  ((uint32_t)18)                    /* Binary data inversion */
#define UART_CR2_DATAINV_Mask                 (((uint32_t)0x01) << 18)
#define UART_CR2_DATAINV                      UART_CR2_DATAINV_Mask
#define UART_CR2_TXINV_Pos                    ((uint32_t)17)                    /* TX pin active level inversion */
#define UART_CR2_TXINV_Mask                   (((uint32_t)0x01) << 17)
#define UART_CR2_TXINV                        UART_CR2_TXINV_Mask
#define UART_CR2_RXINV_Pos                    ((uint32_t)16)                    /* RX pin active level inversion */
#define UART_CR2_RXINV_Mask                   (((uint32_t)0x01) << 16)
#define UART_CR2_RXINV                        UART_CR2_RXINV_Mask
#define UART_CR2_STOP_Pos                     ((uint32_t)12)                    /* STOP bits */
#define UART_CR2_STOP_Mask                    (((uint32_t)0x03) << 12)
#define UART_CR2_STOP                         UART_CR2_STOP_Mask
#define UART_CR2_STOP_0                       (((uint32_t)0x1 << UART_CR2_STOP_Pos))
#define UART_CR2_STOP_1                       (((uint32_t)0x2 << UART_CR2_STOP_Pos))
#define UART_CR2_ADDM7_Pos                    ((uint32_t)4)                     /* With 7-bit Address Detection/4-bit Address Detection */
#define UART_CR2_ADDM7_Mask                   (((uint32_t)0x01) << 4)
#define UART_CR2_ADDM7                        UART_CR2_ADDM7_Mask

/************************************* UART->CR3  ***************************************/
#define UART_CR3_OVERDIS_Pos                  ((uint32_t)12)                    /* Overrun Disable */
#define UART_CR3_OVERDIS_Mask                 (((uint32_t)0x01) << 12)
#define UART_CR3_OVERDIS                      UART_CR3_OVERDIS_Mask
#define UART_CR3_ONEBIT_Pos                   ((uint32_t)11)                    /* One sample bit method enable */
#define UART_CR3_ONEBIT_Mask                  (((uint32_t)0x01) << 11)
#define UART_CR3_ONEBIT                       UART_CR3_ONEBIT_Mask
#define UART_CR3_HDSEL_Pos                    ((uint32_t)3)                     /* Half-duplex selection */
#define UART_CR3_HDSEL_Mask                   (((uint32_t)0x01) << 3)
#define UART_CR3_HDSEL                        UART_CR3_HDSEL_Mask
#define UART_CR3_EIE_Pos                      ((uint32_t)0)                     /* Error interrupt enable */
#define UART_CR3_EIE_Mask                     (((uint32_t)0x01) << 0)
#define UART_CR3_EIE                          UART_CR3_EIE_Mask

/************************************* UART->BRR  ***************************************/
#define UART_BRR_BRR_Pos                      ((uint32_t)0)                     /* DIV  of  UART */
#define UART_BRR_BRR_Mask                     (((uint32_t)0xFFFF) << 0)
#define UART_BRR_BRR                          UART_BRR_BRR_Mask

/************************************* UART->RQR  ***************************************/
#define UART_RQR_RXFRQ_Pos                    ((uint32_t)3)                     /* Receive data flush request */
#define UART_RQR_RXFRQ_Mask                   (((uint32_t)0x01) << 3)
#define UART_RQR_RXFRQ                        UART_RQR_RXFRQ_Mask
#define UART_RQR_MMRQ_Pos                     ((uint32_t)2)                     /* Mute mode request */
#define UART_RQR_MMRQ_Mask                    (((uint32_t)0x01) << 2)
#define UART_RQR_MMRQ                         UART_RQR_MMRQ_Mask
#define UART_RQR_SBKRQ_Pos                    ((uint32_t)1)                     /* Send break request */
#define UART_RQR_SBKRQ_Mask                   (((uint32_t)0x01) << 1)
#define UART_RQR_SBKRQ                        UART_RQR_SBKRQ_Mask

/************************************* UART->ISR  ***************************************/
#define UART_ISR_REACK_Pos                    ((uint32_t)22)                    /* Receive enable acknowledge flag */
#define UART_ISR_REACK_Mask                   (((uint32_t)0x01) << 22)
#define UART_ISR_REACK                        UART_ISR_REACK_Mask
#define UART_ISR_TEACK_Pos                    ((uint32_t)21)                    /* Transmit enable acknowledge flag */
#define UART_ISR_TEACK_Mask                   (((uint32_t)0x01) << 21)
#define UART_ISR_TEACK                        UART_ISR_TEACK_Mask
#define UART_ISR_RWU_Pos                      ((uint32_t)19)                    /* Receiver wakeup from Mute mode */
#define UART_ISR_RWU_Mask                     (((uint32_t)0x01) << 19)
#define UART_ISR_RWU                          UART_ISR_RWU_Mask
#define UART_ISR_SBKF_Pos                     ((uint32_t)18)                    /* Send break flag */
#define UART_ISR_SBKF_Mask                    (((uint32_t)0x01) << 18)
#define UART_ISR_SBKF                         UART_ISR_SBKF_Mask
#define UART_ISR_BUSY_Pos                     ((uint32_t)16)                    /* Busy flag */
#define UART_ISR_BUSY_Mask                    (((uint32_t)0x01) << 16)
#define UART_ISR_BUSY                         UART_ISR_BUSY_Mask
#define UART_ISR_TXE_Pos                      ((uint32_t)7)                     /* Transmit data register empty */
#define UART_ISR_TXE_Mask                     (((uint32_t)0x01) << 7)
#define UART_ISR_TXE                          UART_ISR_TXE_Mask
#define UART_ISR_TC_Pos                       ((uint32_t)6)                     /* Transmission complete */
#define UART_ISR_TC_Mask                      (((uint32_t)0x01) << 6)
#define UART_ISR_TC                           UART_ISR_TC_Mask
#define UART_ISR_RXNE_Pos                     ((uint32_t)5)                     /* Receive data register not empty */
#define UART_ISR_RXNE_Mask                    (((uint32_t)0x01) << 5)
#define UART_ISR_RXNE                         UART_ISR_RXNE_Mask
#define UART_ISR_IDLE_Pos                     ((uint32_t)4)                     /* Idle line detected */
#define UART_ISR_IDLE_Mask                    (((uint32_t)0x01) << 4)
#define UART_ISR_IDLE                         UART_ISR_IDLE_Mask
#define UART_ISR_ORE_Pos                      ((uint32_t)3)                     /* Overrun error */
#define UART_ISR_ORE_Mask                     (((uint32_t)0x01) << 3)
#define UART_ISR_ORE                          UART_ISR_ORE_Mask
#define UART_ISR_NF_Pos                       ((uint32_t)2)                     /* START bit Noise detection flag */
#define UART_ISR_NF_Mask                      (((uint32_t)0x01) << 2)
#define UART_ISR_NF                           UART_ISR_NF_Mask
#define UART_ISR_FE_Pos                       ((uint32_t)1)                     /* Framing error */
#define UART_ISR_FE_Mask                      (((uint32_t)0x01) << 1)
#define UART_ISR_FE                           UART_ISR_FE_Mask
#define UART_ISR_PE_Pos                       ((uint32_t)0)                     /* Parity error */
#define UART_ISR_PE_Mask                      (((uint32_t)0x01) << 0)
#define UART_ISR_PE                           UART_ISR_PE_Mask

/************************************* UART->ICR  ***************************************/
#define UART_ICR_TCCF_Pos                     ((uint32_t)6)                     /* Transmission complete clear flag */
#define UART_ICR_TCCF_Mask                    (((uint32_t)0x01) << 6)
#define UART_ICR_TCCF                         UART_ICR_TCCF_Mask
#define UART_ICR_IDLECF_Pos                   ((uint32_t)4)                     /* Idle line detected clear flag */
#define UART_ICR_IDLECF_Mask                  (((uint32_t)0x01) << 4)
#define UART_ICR_IDLECF                       UART_ICR_IDLECF_Mask
#define UART_ICR_ORECF_Pos                    ((uint32_t)3)                     /* Overrun error clear flag */
#define UART_ICR_ORECF_Mask                   (((uint32_t)0x01) << 3)
#define UART_ICR_ORECF                        UART_ICR_ORECF_Mask
#define UART_ICR_NCF_Pos                      ((uint32_t)2)                     /* Noise detected clear flag */
#define UART_ICR_NCF_Mask                     (((uint32_t)0x01) << 2)
#define UART_ICR_NCF                          UART_ICR_NCF_Mask
#define UART_ICR_FECF_Pos                     ((uint32_t)1)                     /* Framing error clear flag */
#define UART_ICR_FECF_Mask                    (((uint32_t)0x01) << 1)
#define UART_ICR_FECF                         UART_ICR_FECF_Mask
#define UART_ICR_PECF_Pos                     ((uint32_t)0)                     /* Parity error clear flag */
#define UART_ICR_PECF_Mask                    (((uint32_t)0x01) << 0)
#define UART_ICR_PECF                         UART_ICR_PECF_Mask

/************************************* UART->RDR  ***************************************/
#define UART_RDR_RDR_Pos                      ((uint32_t)0)                     /* Receive data value */
#define UART_RDR_RDR_Mask                     (((uint32_t)0x01FF) << 0)
#define UART_RDR_RDR                          UART_RDR_RDR_Mask
#define UART_RDR_RDR_0                        (((uint32_t)0x1))
#define UART_RDR_RDR_1                        (((uint32_t)0x2))
#define UART_RDR_RDR_2                        (((uint32_t)0x4))
#define UART_RDR_RDR_3                        (((uint32_t)0x8))
#define UART_RDR_RDR_4                        (((uint32_t)0x10))
#define UART_RDR_RDR_5                        (((uint32_t)0x20))
#define UART_RDR_RDR_6                        (((uint32_t)0x40))
#define UART_RDR_RDR_7                        (((uint32_t)0x80))
#define UART_RDR_RDR_8                        (((uint32_t)0x100))

/************************************* UART->TDR  ***************************************/
#define UART_TDR_TDR_Pos                      ((uint32_t)0)                     /* Transmit data value */
#define UART_TDR_TDR_Mask                     (((uint32_t)0x01FF) << 0)
#define UART_TDR_TDR                          UART_TDR_TDR_Mask
#define UART_TDR_TDR_0                        (((uint32_t)0x1))
#define UART_TDR_TDR_1                        (((uint32_t)0x2))
#define UART_TDR_TDR_2                        (((uint32_t)0x4))
#define UART_TDR_TDR_3                        (((uint32_t)0x8))
#define UART_TDR_TDR_4                        (((uint32_t)0x10))
#define UART_TDR_TDR_5                        (((uint32_t)0x20))
#define UART_TDR_TDR_6                        (((uint32_t)0x40))
#define UART_TDR_TDR_7                        (((uint32_t)0x80))
#define UART_TDR_TDR_8                        (((uint32_t)0x100))

/*****************************************************************************************
*                                     Peripheral I2C                                     *
*****************************************************************************************/
typedef struct{
  __IO uint32_t CR1;                    /* CR1 */
  __IO uint32_t CR2;                    /* CR2 */
  __IO uint32_t OAR1;                   /* OAR1 */
  __IO uint32_t OAR2;                   /* OAR2 */
  __IO uint32_t TIMINGR;                /* TIMINGR */
  __IO uint32_t TIMEOUTR;               /* TIMEOUTR */
  __IO uint32_t ISR;                    /* ISR */
  __O  uint32_t ICR;                    /* ICR */
  __I  uint32_t PECR;                   /* PECR */
  __I  uint32_t RXDR;                   /* RXDR */
  __IO uint32_t TXDR;                   /* TXDR */
}I2C_TypeDef;

/************************************** I2C->CR1  ***************************************/
#define I2C_CR1_PECEN_Pos                     ((uint32_t)23)                    /* PEC enable */
#define I2C_CR1_PECEN_Mask                    (((uint32_t)0x01) << 23)
#define I2C_CR1_PECEN                         I2C_CR1_PECEN_Mask
#define I2C_CR1_ALERTEN_Pos                   ((uint32_t)22)                    /* SMBus alert enable */
#define I2C_CR1_ALERTEN_Mask                  (((uint32_t)0x01) << 22)
#define I2C_CR1_ALERTEN                       I2C_CR1_ALERTEN_Mask
#define I2C_CR1_SMBDEN_Pos                    ((uint32_t)21)                    /* SMBus Device Default address enable */
#define I2C_CR1_SMBDEN_Mask                   (((uint32_t)0x01) << 21)
#define I2C_CR1_SMBDEN                        I2C_CR1_SMBDEN_Mask
#define I2C_CR1_SMBHEN_Pos                    ((uint32_t)20)                    /* SMBus Host address enable */
#define I2C_CR1_SMBHEN_Mask                   (((uint32_t)0x01) << 20)
#define I2C_CR1_SMBHEN                        I2C_CR1_SMBHEN_Mask
#define I2C_CR1_GCEN_Pos                      ((uint32_t)19)                    /* General call enable */
#define I2C_CR1_GCEN_Mask                     (((uint32_t)0x01) << 19)
#define I2C_CR1_GCEN                          I2C_CR1_GCEN_Mask
#define I2C_CR1_WUPEN_Pos                     ((uint32_t)18)                    /* Wakeup from Stop mode enable */
#define I2C_CR1_WUPEN_Mask                    (((uint32_t)0x01) << 18)
#define I2C_CR1_WUPEN                         I2C_CR1_WUPEN_Mask
#define I2C_CR1_NOSTRETCH_Pos                 ((uint32_t)17)                    /* Clock stretching disable */
#define I2C_CR1_NOSTRETCH_Mask                (((uint32_t)0x01) << 17)
#define I2C_CR1_NOSTRETCH                     I2C_CR1_NOSTRETCH_Mask
#define I2C_CR1_SBC_Pos                       ((uint32_t)16)                    /* Slave byte control */
#define I2C_CR1_SBC_Mask                      (((uint32_t)0x01) << 16)
#define I2C_CR1_SBC                           I2C_CR1_SBC_Mask
#define I2C_CR1_ANFOFF_Pos                    ((uint32_t)12)                    /* Analog noise filter OFF */
#define I2C_CR1_ANFOFF_Mask                   (((uint32_t)0x01) << 12)
#define I2C_CR1_ANFOFF                        I2C_CR1_ANFOFF_Mask
#define I2C_CR1_DNF_Pos                       ((uint32_t)8)                     /* Digital noise filter */
#define I2C_CR1_DNF_Mask                      (((uint32_t)0x0F) << 8)
#define I2C_CR1_DNF                           I2C_CR1_DNF_Mask
#define I2C_CR1_DNF_0                         (((uint32_t)0x1 << I2C_CR1_DNF_Pos))
#define I2C_CR1_DNF_1                         (((uint32_t)0x2 << I2C_CR1_DNF_Pos))
#define I2C_CR1_DNF_2                         (((uint32_t)0x4 << I2C_CR1_DNF_Pos))
#define I2C_CR1_DNF_3                         (((uint32_t)0x8 << I2C_CR1_DNF_Pos))
#define I2C_CR1_ERRIE_Pos                     ((uint32_t)7)                     /* Error interrupts enable */
#define I2C_CR1_ERRIE_Mask                    (((uint32_t)0x01) << 7)
#define I2C_CR1_ERRIE                         I2C_CR1_ERRIE_Mask
#define I2C_CR1_TCIE_Pos                      ((uint32_t)6)                     /* Transfer Complete interrupt enable */
#define I2C_CR1_TCIE_Mask                     (((uint32_t)0x01) << 6)
#define I2C_CR1_TCIE                          I2C_CR1_TCIE_Mask
#define I2C_CR1_STOPIE_Pos                    ((uint32_t)5)                     /* STOP detection Interrupt enable */
#define I2C_CR1_STOPIE_Mask                   (((uint32_t)0x01) << 5)
#define I2C_CR1_STOPIE                        I2C_CR1_STOPIE_Mask
#define I2C_CR1_NACKIE_Pos                    ((uint32_t)4)                     /* Not acknowledge received Interrupt enable */
#define I2C_CR1_NACKIE_Mask                   (((uint32_t)0x01) << 4)
#define I2C_CR1_NACKIE                        I2C_CR1_NACKIE_Mask
#define I2C_CR1_ADDRIE_Pos                    ((uint32_t)3)                     /* Address match Interrupt enable , slave only */
#define I2C_CR1_ADDRIE_Mask                   (((uint32_t)0x01) << 3)
#define I2C_CR1_ADDRIE                        I2C_CR1_ADDRIE_Mask
#define I2C_CR1_RXIE_Pos                      ((uint32_t)2)                     /* RX Interrupt enable */
#define I2C_CR1_RXIE_Mask                     (((uint32_t)0x01) << 2)
#define I2C_CR1_RXIE                          I2C_CR1_RXIE_Mask
#define I2C_CR1_TXIE_Pos                      ((uint32_t)1)                     /* TX Interrupt enable */
#define I2C_CR1_TXIE_Mask                     (((uint32_t)0x01) << 1)
#define I2C_CR1_TXIE                          I2C_CR1_TXIE_Mask
#define I2C_CR1_PE_Pos                        ((uint32_t)0)                     /* Peripheral enable */
#define I2C_CR1_PE_Mask                       (((uint32_t)0x01) << 0)
#define I2C_CR1_PE                            I2C_CR1_PE_Mask

/************************************** I2C->CR2  ***************************************/
#define I2C_CR2_PECBYTE_Pos                   ((uint32_t)26)                    /* Packet error checking byte */
#define I2C_CR2_PECBYTE_Mask                  (((uint32_t)0x01) << 26)
#define I2C_CR2_PECBYTE                       I2C_CR2_PECBYTE_Mask
#define I2C_CR2_AUTOEND_Pos                   ((uint32_t)25)                    /* Automatic end mode ,master mode  */
#define I2C_CR2_AUTOEND_Mask                  (((uint32_t)0x01) << 25)
#define I2C_CR2_AUTOEND                       I2C_CR2_AUTOEND_Mask
#define I2C_CR2_RELOAD_Pos                    ((uint32_t)24)                    /* NBYTES reload mode */
#define I2C_CR2_RELOAD_Mask                   (((uint32_t)0x01) << 24)
#define I2C_CR2_RELOAD                        I2C_CR2_RELOAD_Mask
#define I2C_CR2_NBYTES_Pos                    ((uint32_t)16)                    /* Number of bytes */
#define I2C_CR2_NBYTES_Mask                   (((uint32_t)0xFF) << 16)
#define I2C_CR2_NBYTES                        I2C_CR2_NBYTES_Mask
#define I2C_CR2_NBYTES_0                      (((uint32_t)0x1 << I2C_CR2_NBYTES_Pos))
#define I2C_CR2_NBYTES_1                      (((uint32_t)0x2 << I2C_CR2_NBYTES_Pos))
#define I2C_CR2_NBYTES_2                      (((uint32_t)0x4 << I2C_CR2_NBYTES_Pos))
#define I2C_CR2_NBYTES_3                      (((uint32_t)0x8 << I2C_CR2_NBYTES_Pos))
#define I2C_CR2_NBYTES_4                      (((uint32_t)0x10 << I2C_CR2_NBYTES_Pos))
#define I2C_CR2_NBYTES_5                      (((uint32_t)0x20 << I2C_CR2_NBYTES_Pos))
#define I2C_CR2_NBYTES_6                      (((uint32_t)0x40 << I2C_CR2_NBYTES_Pos))
#define I2C_CR2_NBYTES_7                      (((uint32_t)0x80 << I2C_CR2_NBYTES_Pos))
#define I2C_CR2_NACK_Pos                      ((uint32_t)15)                    /* NACK generation ,slave mode  */
#define I2C_CR2_NACK_Mask                     (((uint32_t)0x01) << 15)
#define I2C_CR2_NACK                          I2C_CR2_NACK_Mask
#define I2C_CR2_STOP_Pos                      ((uint32_t)14)                    /* STOP generation,master mode  */
#define I2C_CR2_STOP_Mask                     (((uint32_t)0x01) << 14)
#define I2C_CR2_STOP                          I2C_CR2_STOP_Mask
#define I2C_CR2_START_Pos                     ((uint32_t)13)                    /* Start generation */
#define I2C_CR2_START_Mask                    (((uint32_t)0x01) << 13)
#define I2C_CR2_START                         I2C_CR2_START_Mask
#define I2C_CR2_HEAD10R_Pos                   ((uint32_t)12)                    /* Address header only read direction 10-bit ,master receiver mode  */
#define I2C_CR2_HEAD10R_Mask                  (((uint32_t)0x01) << 12)
#define I2C_CR2_HEAD10R                       I2C_CR2_HEAD10R_Mask
#define I2C_CR2_ADD10_Pos                     ((uint32_t)11)                    /* Addressing mode 10-bit，master mode  */
#define I2C_CR2_ADD10_Mask                    (((uint32_t)0x01) << 11)
#define I2C_CR2_ADD10                         I2C_CR2_ADD10_Mask
#define I2C_CR2_RD_WRN_Pos                    ((uint32_t)10)                    /* Transfer direction, master mode  */
#define I2C_CR2_RD_WRN_Mask                   (((uint32_t)0x01) << 10)
#define I2C_CR2_RD_WRN                        I2C_CR2_RD_WRN_Mask
#define I2C_CR2_SADD_Pos                      ((uint32_t)0)                     /* Slave address bit 9:0 in master mode  */
#define I2C_CR2_SADD_Mask                     (((uint32_t)0x03FF) << 0)
#define I2C_CR2_SADD                          I2C_CR2_SADD_Mask
#define I2C_CR2_SADD_0                        (((uint32_t)0x1))
#define I2C_CR2_SADD_1                        (((uint32_t)0x2))
#define I2C_CR2_SADD_2                        (((uint32_t)0x4))
#define I2C_CR2_SADD_3                        (((uint32_t)0x8))
#define I2C_CR2_SADD_4                        (((uint32_t)0x10))
#define I2C_CR2_SADD_5                        (((uint32_t)0x20))
#define I2C_CR2_SADD_6                        (((uint32_t)0x40))
#define I2C_CR2_SADD_7                        (((uint32_t)0x80))
#define I2C_CR2_SADD_8                        (((uint32_t)0x100))
#define I2C_CR2_SADD_9                        (((uint32_t)0x200))

/************************************* I2C->OAR1  ***************************************/
#define I2C_OAR1_OA1EN_Pos                    ((uint32_t)15)                    /* Own Address 1 enable */
#define I2C_OAR1_OA1EN_Mask                   (((uint32_t)0x01) << 15)
#define I2C_OAR1_OA1EN                        I2C_OAR1_OA1EN_Mask
#define I2C_OAR1_OA1MODE_Pos                  ((uint32_t)10)                    /* Own Address 1 10-bit mode */
#define I2C_OAR1_OA1MODE_Mask                 (((uint32_t)0x01) << 10)
#define I2C_OAR1_OA1MODE                      I2C_OAR1_OA1MODE_Mask
#define I2C_OAR1_OA1_Pos                      ((uint32_t)0)                     /* Interface address 9:8 bit */
#define I2C_OAR1_OA1_Mask                     (((uint32_t)0x03FF) << 0)
#define I2C_OAR1_OA1                          I2C_OAR1_OA1_Mask
#define I2C_OAR1_OA1_0                        (((uint32_t)0x1))
#define I2C_OAR1_OA1_1                        (((uint32_t)0x2))
#define I2C_OAR1_OA1_2                        (((uint32_t)0x4))
#define I2C_OAR1_OA1_3                        (((uint32_t)0x8))
#define I2C_OAR1_OA1_4                        (((uint32_t)0x10))
#define I2C_OAR1_OA1_5                        (((uint32_t)0x20))
#define I2C_OAR1_OA1_6                        (((uint32_t)0x40))
#define I2C_OAR1_OA1_7                        (((uint32_t)0x80))
#define I2C_OAR1_OA1_8                        (((uint32_t)0x100))
#define I2C_OAR1_OA1_9                        (((uint32_t)0x200))

/************************************* I2C->OAR2  ***************************************/
#define I2C_OAR2_OA2EN_Pos                    ((uint32_t)15)                    /* Own Address 2 enable */
#define I2C_OAR2_OA2EN_Mask                   (((uint32_t)0x01) << 15)
#define I2C_OAR2_OA2EN                        I2C_OAR2_OA2EN_Mask
#define I2C_OAR2_OA2MSK_Pos                   ((uint32_t)8)                     /* Own Address 2 masks */
#define I2C_OAR2_OA2MSK_Mask                  (((uint32_t)0x07) << 8)
#define I2C_OAR2_OA2MSK                       I2C_OAR2_OA2MSK_Mask
#define I2C_OAR2_OA2MSK_0                     (((uint32_t)0x1 << I2C_OAR2_OA2MSK_Pos))
#define I2C_OAR2_OA2MSK_1                     (((uint32_t)0x2 << I2C_OAR2_OA2MSK_Pos))
#define I2C_OAR2_OA2MSK_2                     (((uint32_t)0x4 << I2C_OAR2_OA2MSK_Pos))
#define I2C_OAR2_OA2_Pos                      ((uint32_t)1)                     /* Interface address */
#define I2C_OAR2_OA2_Mask                     (((uint32_t)0x7F) << 1)
#define I2C_OAR2_OA2                          I2C_OAR2_OA2_Mask
#define I2C_OAR2_OA2_0                        (((uint32_t)0x1 << I2C_OAR2_OA2_Pos))
#define I2C_OAR2_OA2_1                        (((uint32_t)0x2 << I2C_OAR2_OA2_Pos))
#define I2C_OAR2_OA2_2                        (((uint32_t)0x4 << I2C_OAR2_OA2_Pos))
#define I2C_OAR2_OA2_3                        (((uint32_t)0x8 << I2C_OAR2_OA2_Pos))
#define I2C_OAR2_OA2_4                        (((uint32_t)0x10 << I2C_OAR2_OA2_Pos))
#define I2C_OAR2_OA2_5                        (((uint32_t)0x20 << I2C_OAR2_OA2_Pos))
#define I2C_OAR2_OA2_6                        (((uint32_t)0x40 << I2C_OAR2_OA2_Pos))

/************************************ I2C->TIMINGR  *************************************/
#define I2C_TIMINGR_PRESC_Pos                 ((uint32_t)28)                    /* Timing prescaler */
#define I2C_TIMINGR_PRESC_Mask                (((uint32_t)0x0F) << 28)
#define I2C_TIMINGR_PRESC                     I2C_TIMINGR_PRESC_Mask
#define I2C_TIMINGR_PRESC_0                   (((uint32_t)0x1 << I2C_TIMINGR_PRESC_Pos))
#define I2C_TIMINGR_PRESC_1                   (((uint32_t)0x2 << I2C_TIMINGR_PRESC_Pos))
#define I2C_TIMINGR_PRESC_2                   (((uint32_t)0x4 << I2C_TIMINGR_PRESC_Pos))
#define I2C_TIMINGR_PRESC_3                   (((uint32_t)0x8 << I2C_TIMINGR_PRESC_Pos))
#define I2C_TIMINGR_SCLDEL_Pos                ((uint32_t)20)                    /* Data setup time */
#define I2C_TIMINGR_SCLDEL_Mask               (((uint32_t)0x0F) << 20)
#define I2C_TIMINGR_SCLDEL                    I2C_TIMINGR_SCLDEL_Mask
#define I2C_TIMINGR_SCLDEL_0                  (((uint32_t)0x1 << I2C_TIMINGR_SCLDEL_Pos))
#define I2C_TIMINGR_SCLDEL_1                  (((uint32_t)0x2 << I2C_TIMINGR_SCLDEL_Pos))
#define I2C_TIMINGR_SCLDEL_2                  (((uint32_t)0x4 << I2C_TIMINGR_SCLDEL_Pos))
#define I2C_TIMINGR_SCLDEL_3                  (((uint32_t)0x8 << I2C_TIMINGR_SCLDEL_Pos))
#define I2C_TIMINGR_SDADEL_Pos                ((uint32_t)16)                    /* Data hold time */
#define I2C_TIMINGR_SDADEL_Mask               (((uint32_t)0x0F) << 16)
#define I2C_TIMINGR_SDADEL                    I2C_TIMINGR_SDADEL_Mask
#define I2C_TIMINGR_SDADEL_0                  (((uint32_t)0x1 << I2C_TIMINGR_SDADEL_Pos))
#define I2C_TIMINGR_SDADEL_1                  (((uint32_t)0x2 << I2C_TIMINGR_SDADEL_Pos))
#define I2C_TIMINGR_SDADEL_2                  (((uint32_t)0x4 << I2C_TIMINGR_SDADEL_Pos))
#define I2C_TIMINGR_SDADEL_3                  (((uint32_t)0x8 << I2C_TIMINGR_SDADEL_Pos))
#define I2C_TIMINGR_SCLH_Pos                  ((uint32_t)8)                     /* SCL high period ,master mode  */
#define I2C_TIMINGR_SCLH_Mask                 (((uint32_t)0xFF) << 8)
#define I2C_TIMINGR_SCLH                      I2C_TIMINGR_SCLH_Mask
#define I2C_TIMINGR_SCLH_0                    (((uint32_t)0x1 << I2C_TIMINGR_SCLH_Pos))
#define I2C_TIMINGR_SCLH_1                    (((uint32_t)0x2 << I2C_TIMINGR_SCLH_Pos))
#define I2C_TIMINGR_SCLH_2                    (((uint32_t)0x4 << I2C_TIMINGR_SCLH_Pos))
#define I2C_TIMINGR_SCLH_3                    (((uint32_t)0x8 << I2C_TIMINGR_SCLH_Pos))
#define I2C_TIMINGR_SCLH_4                    (((uint32_t)0x10 << I2C_TIMINGR_SCLH_Pos))
#define I2C_TIMINGR_SCLH_5                    (((uint32_t)0x20 << I2C_TIMINGR_SCLH_Pos))
#define I2C_TIMINGR_SCLH_6                    (((uint32_t)0x40 << I2C_TIMINGR_SCLH_Pos))
#define I2C_TIMINGR_SCLH_7                    (((uint32_t)0x80 << I2C_TIMINGR_SCLH_Pos))
#define I2C_TIMINGR_SCLL_Pos                  ((uint32_t)0)                     /* SCL low period,master mode  */
#define I2C_TIMINGR_SCLL_Mask                 (((uint32_t)0xFF) << 0)
#define I2C_TIMINGR_SCLL                      I2C_TIMINGR_SCLL_Mask
#define I2C_TIMINGR_SCLL_0                    (((uint32_t)0x1))
#define I2C_TIMINGR_SCLL_1                    (((uint32_t)0x2))
#define I2C_TIMINGR_SCLL_2                    (((uint32_t)0x4))
#define I2C_TIMINGR_SCLL_3                    (((uint32_t)0x8))
#define I2C_TIMINGR_SCLL_4                    (((uint32_t)0x10))
#define I2C_TIMINGR_SCLL_5                    (((uint32_t)0x20))
#define I2C_TIMINGR_SCLL_6                    (((uint32_t)0x40))
#define I2C_TIMINGR_SCLL_7                    (((uint32_t)0x80))

/*********************************** I2C->TIMEOUTR  *************************************/
#define I2C_TIMEOUTR_TEXTEN_Pos               ((uint32_t)31)                    /* Extended clock timeout enable */
#define I2C_TIMEOUTR_TEXTEN_Mask              (((uint32_t)0x01) << 31)
#define I2C_TIMEOUTR_TEXTEN                   I2C_TIMEOUTR_TEXTEN_Mask
#define I2C_TIMEOUTR_TIMEOUTB_Pos             ((uint32_t)16)                    /* Bus timeout B */
#define I2C_TIMEOUTR_TIMEOUTB_Mask            (((uint32_t)0x0FFF) << 16)
#define I2C_TIMEOUTR_TIMEOUTB                 I2C_TIMEOUTR_TIMEOUTB_Mask
#define I2C_TIMEOUTR_TIMEOUTB_0               (((uint32_t)0x1 << I2C_TIMEOUTR_TIMEOUTB_Pos))
#define I2C_TIMEOUTR_TIMEOUTB_1               (((uint32_t)0x2 << I2C_TIMEOUTR_TIMEOUTB_Pos))
#define I2C_TIMEOUTR_TIMEOUTB_2               (((uint32_t)0x4 << I2C_TIMEOUTR_TIMEOUTB_Pos))
#define I2C_TIMEOUTR_TIMEOUTB_3               (((uint32_t)0x8 << I2C_TIMEOUTR_TIMEOUTB_Pos))
#define I2C_TIMEOUTR_TIMEOUTB_4               (((uint32_t)0x10 << I2C_TIMEOUTR_TIMEOUTB_Pos))
#define I2C_TIMEOUTR_TIMEOUTB_5               (((uint32_t)0x20 << I2C_TIMEOUTR_TIMEOUTB_Pos))
#define I2C_TIMEOUTR_TIMEOUTB_6               (((uint32_t)0x40 << I2C_TIMEOUTR_TIMEOUTB_Pos))
#define I2C_TIMEOUTR_TIMEOUTB_7               (((uint32_t)0x80 << I2C_TIMEOUTR_TIMEOUTB_Pos))
#define I2C_TIMEOUTR_TIMEOUTB_8               (((uint32_t)0x100 << I2C_TIMEOUTR_TIMEOUTB_Pos))
#define I2C_TIMEOUTR_TIMEOUTB_9               (((uint32_t)0x200 << I2C_TIMEOUTR_TIMEOUTB_Pos))
#define I2C_TIMEOUTR_TIMEOUTB_10              (((uint32_t)0x400 << I2C_TIMEOUTR_TIMEOUTB_Pos))
#define I2C_TIMEOUTR_TIMEOUTB_11              (((uint32_t)0x800 << I2C_TIMEOUTR_TIMEOUTB_Pos))
#define I2C_TIMEOUTR_TIMEOUTEN_Pos            ((uint32_t)15)                    /* Clock timeout enable */
#define I2C_TIMEOUTR_TIMEOUTEN_Mask           (((uint32_t)0x01) << 15)
#define I2C_TIMEOUTR_TIMEOUTEN                I2C_TIMEOUTR_TIMEOUTEN_Mask
#define I2C_TIMEOUTR_TIDLE_Pos                ((uint32_t)12)                    /* Idle clock timeout detection */
#define I2C_TIMEOUTR_TIDLE_Mask               (((uint32_t)0x01) << 12)
#define I2C_TIMEOUTR_TIDLE                    I2C_TIMEOUTR_TIDLE_Mask
#define I2C_TIMEOUTR_TIMEOUTA_Pos             ((uint32_t)0)                     /* Bus Timeout A */
#define I2C_TIMEOUTR_TIMEOUTA_Mask            (((uint32_t)0x0FFF) << 0)
#define I2C_TIMEOUTR_TIMEOUTA                 I2C_TIMEOUTR_TIMEOUTA_Mask
#define I2C_TIMEOUTR_TIMEOUTA_0               (((uint32_t)0x1))
#define I2C_TIMEOUTR_TIMEOUTA_1               (((uint32_t)0x2))
#define I2C_TIMEOUTR_TIMEOUTA_2               (((uint32_t)0x4))
#define I2C_TIMEOUTR_TIMEOUTA_3               (((uint32_t)0x8))
#define I2C_TIMEOUTR_TIMEOUTA_4               (((uint32_t)0x10))
#define I2C_TIMEOUTR_TIMEOUTA_5               (((uint32_t)0x20))
#define I2C_TIMEOUTR_TIMEOUTA_6               (((uint32_t)0x40))
#define I2C_TIMEOUTR_TIMEOUTA_7               (((uint32_t)0x80))
#define I2C_TIMEOUTR_TIMEOUTA_8               (((uint32_t)0x100))
#define I2C_TIMEOUTR_TIMEOUTA_9               (((uint32_t)0x200))
#define I2C_TIMEOUTR_TIMEOUTA_10              (((uint32_t)0x400))
#define I2C_TIMEOUTR_TIMEOUTA_11              (((uint32_t)0x800))

/************************************** I2C->ISR  ***************************************/
#define I2C_ISR_ADDCODE_Pos                   ((uint32_t)17)                    /* Address match code,Slave mode  */
#define I2C_ISR_ADDCODE_Mask                  (((uint32_t)0x7F) << 17)
#define I2C_ISR_ADDCODE                       I2C_ISR_ADDCODE_Mask
#define I2C_ISR_ADDCODE_0                     (((uint32_t)0x1 << I2C_ISR_ADDCODE_Pos))
#define I2C_ISR_ADDCODE_1                     (((uint32_t)0x2 << I2C_ISR_ADDCODE_Pos))
#define I2C_ISR_ADDCODE_2                     (((uint32_t)0x4 << I2C_ISR_ADDCODE_Pos))
#define I2C_ISR_ADDCODE_3                     (((uint32_t)0x8 << I2C_ISR_ADDCODE_Pos))
#define I2C_ISR_ADDCODE_4                     (((uint32_t)0x10 << I2C_ISR_ADDCODE_Pos))
#define I2C_ISR_ADDCODE_5                     (((uint32_t)0x20 << I2C_ISR_ADDCODE_Pos))
#define I2C_ISR_ADDCODE_6                     (((uint32_t)0x40 << I2C_ISR_ADDCODE_Pos))
#define I2C_ISR_DIR_Pos                       ((uint32_t)16)                    /* Transfer direction ,Slave mode  */
#define I2C_ISR_DIR_Mask                      (((uint32_t)0x01) << 16)
#define I2C_ISR_DIR                           I2C_ISR_DIR_Mask
#define I2C_ISR_BUSY_Pos                      ((uint32_t)15)                    /* Bus busy */
#define I2C_ISR_BUSY_Mask                     (((uint32_t)0x01) << 15)
#define I2C_ISR_BUSY                          I2C_ISR_BUSY_Mask
#define I2C_ISR_ALERT_Pos                     ((uint32_t)13)                    /* SMBus alert */
#define I2C_ISR_ALERT_Mask                    (((uint32_t)0x01) << 13)
#define I2C_ISR_ALERT                         I2C_ISR_ALERT_Mask
#define I2C_ISR_TIMEOUT_Pos                   ((uint32_t)12)                    /* Timeout or tLOW detection flag */
#define I2C_ISR_TIMEOUT_Mask                  (((uint32_t)0x01) << 12)
#define I2C_ISR_TIMEOUT                       I2C_ISR_TIMEOUT_Mask
#define I2C_ISR_PECERR_Pos                    ((uint32_t)11)                    /* PEC Error in reception */
#define I2C_ISR_PECERR_Mask                   (((uint32_t)0x01) << 11)
#define I2C_ISR_PECERR                        I2C_ISR_PECERR_Mask
#define I2C_ISR_OVR_Pos                       ((uint32_t)10)                    /* Overrun/Underrun ,slave mode  */
#define I2C_ISR_OVR_Mask                      (((uint32_t)0x01) << 10)
#define I2C_ISR_OVR                           I2C_ISR_OVR_Mask
#define I2C_ISR_ARLO_Pos                      ((uint32_t)9)                     /* Arbitration lost */
#define I2C_ISR_ARLO_Mask                     (((uint32_t)0x01) << 9)
#define I2C_ISR_ARLO                          I2C_ISR_ARLO_Mask
#define I2C_ISR_BERR_Pos                      ((uint32_t)8)                     /* Bus error */
#define I2C_ISR_BERR_Mask                     (((uint32_t)0x01) << 8)
#define I2C_ISR_BERR                          I2C_ISR_BERR_Mask
#define I2C_ISR_TCR_Pos                       ((uint32_t)7)                     /* Transfer Complete Reload */
#define I2C_ISR_TCR_Mask                      (((uint32_t)0x01) << 7)
#define I2C_ISR_TCR                           I2C_ISR_TCR_Mask
#define I2C_ISR_TC_Pos                        ((uint32_t)6)                     /* Transfer Complete ,master mode  */
#define I2C_ISR_TC_Mask                       (((uint32_t)0x01) << 6)
#define I2C_ISR_TC                            I2C_ISR_TC_Mask
#define I2C_ISR_STOPF_Pos                     ((uint32_t)5)                     /* STOP detection flag */
#define I2C_ISR_STOPF_Mask                    (((uint32_t)0x01) << 5)
#define I2C_ISR_STOPF                         I2C_ISR_STOPF_Mask
#define I2C_ISR_NACKF_Pos                     ((uint32_t)4)                     /* Not Acknowledge received flag */
#define I2C_ISR_NACKF_Mask                    (((uint32_t)0x01) << 4)
#define I2C_ISR_NACKF                         I2C_ISR_NACKF_Mask
#define I2C_ISR_ADDR_Pos                      ((uint32_t)3)                     /* Address matched ,slave mode  */
#define I2C_ISR_ADDR_Mask                     (((uint32_t)0x01) << 3)
#define I2C_ISR_ADDR                          I2C_ISR_ADDR_Mask
#define I2C_ISR_RXNE_Pos                      ((uint32_t)2)                     /* Receive data register not empty ,receivers  */
#define I2C_ISR_RXNE_Mask                     (((uint32_t)0x01) << 2)
#define I2C_ISR_RXNE                          I2C_ISR_RXNE_Mask
#define I2C_ISR_TXIS_Pos                      ((uint32_t)1)                     /* Transmit interrupt status ,transmitters  */
#define I2C_ISR_TXIS_Mask                     (((uint32_t)0x01) << 1)
#define I2C_ISR_TXIS                          I2C_ISR_TXIS_Mask
#define I2C_ISR_TXE_Pos                       ((uint32_t)0)                     /* Transmit data register empty,transmitters  */
#define I2C_ISR_TXE_Mask                      (((uint32_t)0x01) << 0)
#define I2C_ISR_TXE                           I2C_ISR_TXE_Mask

/************************************** I2C->ICR  ***************************************/
#define I2C_ICR_ALERTCF_Pos                   ((uint32_t)13)                    /* Alert flag clear */
#define I2C_ICR_ALERTCF_Mask                  (((uint32_t)0x01) << 13)
#define I2C_ICR_ALERTCF                       I2C_ICR_ALERTCF_Mask
#define I2C_ICR_TIMOUTCF_Pos                  ((uint32_t)12)                    /* Timeout detection flag clear */
#define I2C_ICR_TIMOUTCF_Mask                 (((uint32_t)0x01) << 12)
#define I2C_ICR_TIMOUTCF                      I2C_ICR_TIMOUTCF_Mask
#define I2C_ICR_PECCF_Pos                     ((uint32_t)11)                    /* PEC Error flag clear */
#define I2C_ICR_PECCF_Mask                    (((uint32_t)0x01) << 11)
#define I2C_ICR_PECCF                         I2C_ICR_PECCF_Mask
#define I2C_ICR_OVRCF_Pos                     ((uint32_t)10)                    /* Overrun/Underrun flag clear */
#define I2C_ICR_OVRCF_Mask                    (((uint32_t)0x01) << 10)
#define I2C_ICR_OVRCF                         I2C_ICR_OVRCF_Mask
#define I2C_ICR_ARLOCF_Pos                    ((uint32_t)9)                     /* Arbitration Lost flag clear */
#define I2C_ICR_ARLOCF_Mask                   (((uint32_t)0x01) << 9)
#define I2C_ICR_ARLOCF                        I2C_ICR_ARLOCF_Mask
#define I2C_ICR_BERRCF_Pos                    ((uint32_t)8)                     /* Bus error flag clear */
#define I2C_ICR_BERRCF_Mask                   (((uint32_t)0x01) << 8)
#define I2C_ICR_BERRCF                        I2C_ICR_BERRCF_Mask
#define I2C_ICR_STOPCF_Pos                    ((uint32_t)5)                     /* STOP detection flag clear */
#define I2C_ICR_STOPCF_Mask                   (((uint32_t)0x01) << 5)
#define I2C_ICR_STOPCF                        I2C_ICR_STOPCF_Mask
#define I2C_ICR_NACKCF_Pos                    ((uint32_t)4)                     /* Not Acknowledge flag clear */
#define I2C_ICR_NACKCF_Mask                   (((uint32_t)0x01) << 4)
#define I2C_ICR_NACKCF                        I2C_ICR_NACKCF_Mask
#define I2C_ICR_ADDRCF_Pos                    ((uint32_t)3)                     /* Address matched flag clear */
#define I2C_ICR_ADDRCF_Mask                   (((uint32_t)0x01) << 3)
#define I2C_ICR_ADDRCF                        I2C_ICR_ADDRCF_Mask

/************************************* I2C->PECR  ***************************************/
#define I2C_PECR_PEC_Pos                      ((uint32_t)0)                     /* Packet error checking register */
#define I2C_PECR_PEC_Mask                     (((uint32_t)0xFF) << 0)
#define I2C_PECR_PEC                          I2C_PECR_PEC_Mask
#define I2C_PECR_PEC_0                        (((uint32_t)0x1))
#define I2C_PECR_PEC_1                        (((uint32_t)0x2))
#define I2C_PECR_PEC_2                        (((uint32_t)0x4))
#define I2C_PECR_PEC_3                        (((uint32_t)0x8))
#define I2C_PECR_PEC_4                        (((uint32_t)0x10))
#define I2C_PECR_PEC_5                        (((uint32_t)0x20))
#define I2C_PECR_PEC_6                        (((uint32_t)0x40))
#define I2C_PECR_PEC_7                        (((uint32_t)0x80))

/************************************* I2C->RXDR  ***************************************/
#define I2C_RXDR_RXDATA_Pos                   ((uint32_t)0)                     /* Receive data with 8-bit */
#define I2C_RXDR_RXDATA_Mask                  (((uint32_t)0xFF) << 0)
#define I2C_RXDR_RXDATA                       I2C_RXDR_RXDATA_Mask
#define I2C_RXDR_RXDATA_0                     (((uint32_t)0x1))
#define I2C_RXDR_RXDATA_1                     (((uint32_t)0x2))
#define I2C_RXDR_RXDATA_2                     (((uint32_t)0x4))
#define I2C_RXDR_RXDATA_3                     (((uint32_t)0x8))
#define I2C_RXDR_RXDATA_4                     (((uint32_t)0x10))
#define I2C_RXDR_RXDATA_5                     (((uint32_t)0x20))
#define I2C_RXDR_RXDATA_6                     (((uint32_t)0x40))
#define I2C_RXDR_RXDATA_7                     (((uint32_t)0x80))

/************************************* I2C->TXDR  ***************************************/
#define I2C_TXDR_TXDATA_Pos                   ((uint32_t)0)                     /* Transmit data with 8-bit */
#define I2C_TXDR_TXDATA_Mask                  (((uint32_t)0xFF) << 0)
#define I2C_TXDR_TXDATA                       I2C_TXDR_TXDATA_Mask
#define I2C_TXDR_TXDATA_0                     (((uint32_t)0x1))
#define I2C_TXDR_TXDATA_1                     (((uint32_t)0x2))
#define I2C_TXDR_TXDATA_2                     (((uint32_t)0x4))
#define I2C_TXDR_TXDATA_3                     (((uint32_t)0x8))
#define I2C_TXDR_TXDATA_4                     (((uint32_t)0x10))
#define I2C_TXDR_TXDATA_5                     (((uint32_t)0x20))
#define I2C_TXDR_TXDATA_6                     (((uint32_t)0x40))
#define I2C_TXDR_TXDATA_7                     (((uint32_t)0x80))

/*****************************************************************************************
*                                     Peripheral SPI                                     *
*****************************************************************************************/
typedef struct{
  __IO uint32_t CR1;                    /* CR1 */
  __IO uint32_t CR2;                    /* CR2 */
  __IO uint32_t SR;                     /* SR */
  __IO uint32_t DR;                     /* DR */
  __IO uint32_t CRCPR;                  /* CRCPR */
  __I  uint32_t RXCRCR;                 /* RXCRCR */
  __I  uint32_t TXCRCR;                 /* TXCRCR */
}SPI_TypeDef;

/************************************** SPI->CR1  ***************************************/
#define SPI_CR1_BIDIMODE_Pos                  ((uint32_t)15)                    /* Bidirectional data mode enable */
#define SPI_CR1_BIDIMODE_Mask                 (((uint32_t)0x01) << 15)
#define SPI_CR1_BIDIMODE                      SPI_CR1_BIDIMODE_Mask
#define SPI_CR1_BIDIOE_Pos                    ((uint32_t)14)                    /* Output enable in bidirectional mode */
#define SPI_CR1_BIDIOE_Mask                   (((uint32_t)0x01) << 14)
#define SPI_CR1_BIDIOE                        SPI_CR1_BIDIOE_Mask
#define SPI_CR1_CRCEN_Pos                     ((uint32_t)13)                    /* Hardware CRC calculation enable */
#define SPI_CR1_CRCEN_Mask                    (((uint32_t)0x01) << 13)
#define SPI_CR1_CRCEN                         SPI_CR1_CRCEN_Mask
#define SPI_CR1_CRCNEXT_Pos                   ((uint32_t)12)                    /* Transmit CRC next */
#define SPI_CR1_CRCNEXT_Mask                  (((uint32_t)0x01) << 12)
#define SPI_CR1_CRCNEXT                       SPI_CR1_CRCNEXT_Mask
#define SPI_CR1_CRCL_Pos                      ((uint32_t)11)                    /* CRC length */
#define SPI_CR1_CRCL_Mask                     (((uint32_t)0x01) << 11)
#define SPI_CR1_CRCL                          SPI_CR1_CRCL_Mask
#define SPI_CR1_RXONLY_Pos                    ((uint32_t)10)                    /* Receive only mode enabled */
#define SPI_CR1_RXONLY_Mask                   (((uint32_t)0x01) << 10)
#define SPI_CR1_RXONLY                        SPI_CR1_RXONLY_Mask
#define SPI_CR1_SSM_Pos                       ((uint32_t)9)                     /* Software slave management */
#define SPI_CR1_SSM_Mask                      (((uint32_t)0x01) << 9)
#define SPI_CR1_SSM                           SPI_CR1_SSM_Mask
#define SPI_CR1_SSI_Pos                       ((uint32_t)8)                     /* Internal slave select */
#define SPI_CR1_SSI_Mask                      (((uint32_t)0x01) << 8)
#define SPI_CR1_SSI                           SPI_CR1_SSI_Mask
#define SPI_CR1_LSBFIRST_Pos                  ((uint32_t)7)                     /* Frame format */
#define SPI_CR1_LSBFIRST_Mask                 (((uint32_t)0x01) << 7)
#define SPI_CR1_LSBFIRST                      SPI_CR1_LSBFIRST_Mask
#define SPI_CR1_SPE_Pos                       ((uint32_t)6)                     /* SPI enable */
#define SPI_CR1_SPE_Mask                      (((uint32_t)0x01) << 6)
#define SPI_CR1_SPE                           SPI_CR1_SPE_Mask
#define SPI_CR1_BR_Pos                        ((uint32_t)3)                     /* Baud rate control */
#define SPI_CR1_BR_Mask                       (((uint32_t)0x07) << 3)
#define SPI_CR1_BR                            SPI_CR1_BR_Mask
#define SPI_CR1_BR_0                          (((uint32_t)0x1 << SPI_CR1_BR_Pos))
#define SPI_CR1_BR_1                          (((uint32_t)0x2 << SPI_CR1_BR_Pos))
#define SPI_CR1_BR_2                          (((uint32_t)0x4 << SPI_CR1_BR_Pos))
#define SPI_CR1_MSTR_Pos                      ((uint32_t)2)                     /* Master selection */
#define SPI_CR1_MSTR_Mask                     (((uint32_t)0x01) << 2)
#define SPI_CR1_MSTR                          SPI_CR1_MSTR_Mask
#define SPI_CR1_CPOL_Pos                      ((uint32_t)1)                     /* Clock polarity */
#define SPI_CR1_CPOL_Mask                     (((uint32_t)0x01) << 1)
#define SPI_CR1_CPOL                          SPI_CR1_CPOL_Mask
#define SPI_CR1_CPHA_Pos                      ((uint32_t)0)                     /* Clock phase */
#define SPI_CR1_CPHA_Mask                     (((uint32_t)0x01) << 0)
#define SPI_CR1_CPHA                          SPI_CR1_CPHA_Mask

/************************************** SPI->CR2  ***************************************/
#define SPI_CR2_FRXTH_Pos                     ((uint32_t)12)                    /* FIFO reception threshold */
#define SPI_CR2_FRXTH_Mask                    (((uint32_t)0x01) << 12)
#define SPI_CR2_FRXTH                         SPI_CR2_FRXTH_Mask
#define SPI_CR2_DS_Pos                        ((uint32_t)8)                     /* Data size */
#define SPI_CR2_DS_Mask                       (((uint32_t)0x0F) << 8)
#define SPI_CR2_DS                            SPI_CR2_DS_Mask
#define SPI_CR2_DS_0                          (((uint32_t)0x1 << SPI_CR2_DS_Pos))
#define SPI_CR2_DS_1                          (((uint32_t)0x2 << SPI_CR2_DS_Pos))
#define SPI_CR2_DS_2                          (((uint32_t)0x4 << SPI_CR2_DS_Pos))
#define SPI_CR2_DS_3                          (((uint32_t)0x8 << SPI_CR2_DS_Pos))
#define SPI_CR2_TXEIE_Pos                     ((uint32_t)7)                     /* TX buffer empty interrupt enable */
#define SPI_CR2_TXEIE_Mask                    (((uint32_t)0x01) << 7)
#define SPI_CR2_TXEIE                         SPI_CR2_TXEIE_Mask
#define SPI_CR2_RXNEIE_Pos                    ((uint32_t)6)                     /* RX buffer not empty interrupt enable */
#define SPI_CR2_RXNEIE_Mask                   (((uint32_t)0x01) << 6)
#define SPI_CR2_RXNEIE                        SPI_CR2_RXNEIE_Mask
#define SPI_CR2_ERRIE_Pos                     ((uint32_t)5)                     /* Error interrupt enable */
#define SPI_CR2_ERRIE_Mask                    (((uint32_t)0x01) << 5)
#define SPI_CR2_ERRIE                         SPI_CR2_ERRIE_Mask
#define SPI_CR2_FRF_Pos                       ((uint32_t)4)                     /* Frame format */
#define SPI_CR2_FRF_Mask                      (((uint32_t)0x01) << 4)
#define SPI_CR2_FRF                           SPI_CR2_FRF_Mask
#define SPI_CR2_NSSP_Pos                      ((uint32_t)3)                     /* NSS pulse management */
#define SPI_CR2_NSSP_Mask                     (((uint32_t)0x01) << 3)
#define SPI_CR2_NSSP                          SPI_CR2_NSSP_Mask
#define SPI_CR2_SSOE_Pos                      ((uint32_t)2)                     /* SS output enable */
#define SPI_CR2_SSOE_Mask                     (((uint32_t)0x01) << 2)
#define SPI_CR2_SSOE                          SPI_CR2_SSOE_Mask

/************************************** SPI->SR  ****************************************/
#define SPI_SR_FTLVL_Pos                      ((uint32_t)11)                    /* FIFO Transmission Level */
#define SPI_SR_FTLVL_Mask                     (((uint32_t)0x03) << 11)
#define SPI_SR_FTLVL                          SPI_SR_FTLVL_Mask
#define SPI_SR_FTLVL_0                        (((uint32_t)0x1 << SPI_SR_FTLVL_Pos))
#define SPI_SR_FTLVL_1                        (((uint32_t)0x2 << SPI_SR_FTLVL_Pos))
#define SPI_SR_FRLVL_Pos                      ((uint32_t)9)                     /* FIFO reception level */
#define SPI_SR_FRLVL_Mask                     (((uint32_t)0x03) << 9)
#define SPI_SR_FRLVL                          SPI_SR_FRLVL_Mask
#define SPI_SR_FRLVL_0                        (((uint32_t)0x1 << SPI_SR_FRLVL_Pos))
#define SPI_SR_FRLVL_1                        (((uint32_t)0x2 << SPI_SR_FRLVL_Pos))
#define SPI_SR_FRE_Pos                        ((uint32_t)8)                     /* Frame format error */
#define SPI_SR_FRE_Mask                       (((uint32_t)0x01) << 8)
#define SPI_SR_FRE                            SPI_SR_FRE_Mask
#define SPI_SR_BSY_Pos                        ((uint32_t)7)                     /* Busy flag */
#define SPI_SR_BSY_Mask                       (((uint32_t)0x01) << 7)
#define SPI_SR_BSY                            SPI_SR_BSY_Mask
#define SPI_SR_OVR_Pos                        ((uint32_t)6)                     /* Overrun flag */
#define SPI_SR_OVR_Mask                       (((uint32_t)0x01) << 6)
#define SPI_SR_OVR                            SPI_SR_OVR_Mask
#define SPI_SR_MODF_Pos                       ((uint32_t)5)                     /* Mode fault */
#define SPI_SR_MODF_Mask                      (((uint32_t)0x01) << 5)
#define SPI_SR_MODF                           SPI_SR_MODF_Mask
#define SPI_SR_CRCERR_Pos                     ((uint32_t)4)                     /* CRC error flag */
#define SPI_SR_CRCERR_Mask                    (((uint32_t)0x01) << 4)
#define SPI_SR_CRCERR                         SPI_SR_CRCERR_Mask
#define SPI_SR_TXE_Pos                        ((uint32_t)1)                     /* Transmit buffer empty */
#define SPI_SR_TXE_Mask                       (((uint32_t)0x01) << 1)
#define SPI_SR_TXE                            SPI_SR_TXE_Mask
#define SPI_SR_RXNE_Pos                       ((uint32_t)0)                     /* Receive buffer not empty */
#define SPI_SR_RXNE_Mask                      (((uint32_t)0x01) << 0)
#define SPI_SR_RXNE                           SPI_SR_RXNE_Mask

/************************************** SPI->DR  ****************************************/
#define SPI_DR_DATA_Pos                       ((uint32_t)0)                     /* Data message */
#define SPI_DR_DATA_Mask                      (((uint32_t)0xFFFF) << 0)
#define SPI_DR_DATA                           SPI_DR_DATA_Mask

/************************************* SPI->CRCPR  **************************************/
#define SPI_CRCPR_CRCPOLY_Pos                 ((uint32_t)0)                     /* CRC polynomial register */
#define SPI_CRCPR_CRCPOLY_Mask                (((uint32_t)0xFFFF) << 0)
#define SPI_CRCPR_CRCPOLY                     SPI_CRCPR_CRCPOLY_Mask

/************************************ SPI->RXCRCR  **************************************/
#define SPI_RXCRCR_RXCRC_Pos                  ((uint32_t)0)                     /* RX CRC register */
#define SPI_RXCRCR_RXCRC_Mask                 (((uint32_t)0xFFFF) << 0)
#define SPI_RXCRCR_RXCRC                      SPI_RXCRCR_RXCRC_Mask

/************************************ SPI->TXCRCR  **************************************/
#define SPI_TXCRCR_TXCRC_Pos                  ((uint32_t)0)                     /* TX CRC register */
#define SPI_TXCRCR_TXCRC_Mask                 (((uint32_t)0xFFFF) << 0)
#define SPI_TXCRCR_TXCRC                      SPI_TXCRCR_TXCRC_Mask

/*****************************************************************************************
*                                    Peripheral DBGMCU                                   *
*****************************************************************************************/
typedef struct{
  __I  uint32_t IDCODE;                 /* IDCODE */
  __IO uint32_t CR;                     /* CR */
  __IO uint32_t APB_FZ;                 /* APB_FZ */
       uint16_t RESERVED1[18];
  __I  uint32_t ENGR_IDCODE;            /* ENGR_IDCODE */
}DBGMCU_TypeDef;

/*********************************** DBGMCU->IDCODE  ************************************/
#define DBGMCU_IDCODE_REV_ID_Pos              ((uint32_t)16)                    /* Revision identifier */
#define DBGMCU_IDCODE_REV_ID_Mask             (((uint32_t)0xFFFF) << 16)
#define DBGMCU_IDCODE_REV_ID                  DBGMCU_IDCODE_REV_ID_Mask
#define DBGMCU_IDCODE_DEV_ID_Pos              ((uint32_t)0)                     /* Device identifier */
#define DBGMCU_IDCODE_DEV_ID_Mask             (((uint32_t)0x0FFF) << 0)
#define DBGMCU_IDCODE_DEV_ID                  DBGMCU_IDCODE_DEV_ID_Mask
#define DBGMCU_IDCODE_DEV_ID_0                (((uint32_t)0x1))
#define DBGMCU_IDCODE_DEV_ID_1                (((uint32_t)0x2))
#define DBGMCU_IDCODE_DEV_ID_2                (((uint32_t)0x4))
#define DBGMCU_IDCODE_DEV_ID_3                (((uint32_t)0x8))
#define DBGMCU_IDCODE_DEV_ID_4                (((uint32_t)0x10))
#define DBGMCU_IDCODE_DEV_ID_5                (((uint32_t)0x20))
#define DBGMCU_IDCODE_DEV_ID_6                (((uint32_t)0x40))
#define DBGMCU_IDCODE_DEV_ID_7                (((uint32_t)0x80))
#define DBGMCU_IDCODE_DEV_ID_8                (((uint32_t)0x100))
#define DBGMCU_IDCODE_DEV_ID_9                (((uint32_t)0x200))
#define DBGMCU_IDCODE_DEV_ID_10               (((uint32_t)0x400))
#define DBGMCU_IDCODE_DEV_ID_11               (((uint32_t)0x800))

/************************************* DBGMCU->CR  **************************************/
#define DBGMCU_CR_DBG_STOP_Pos                ((uint32_t)1)                     /* Debug Stop mode */
#define DBGMCU_CR_DBG_STOP_Mask               (((uint32_t)0x01) << 1)
#define DBGMCU_CR_DBG_STOP                    DBGMCU_CR_DBG_STOP_Mask

/*********************************** DBGMCU->APB_FZ  ************************************/
#define DBGMCU_APB_FZ_DBG_I2C_SMBUS_TIMEOUT_Pos  ((uint32_t)21)                 /* SMBUS tiomout mode stopped when core is halted */
#define DBGMCU_APB_FZ_DBG_I2C_SMBUS_TIMEOUT_Mask  (((uint32_t)0x01) << 21)
#define DBGMCU_APB_FZ_DBG_I2C_SMBUS_TIMEOUT   DBGMCU_APB_FZ_DBG_I2C_SMBUS_TIMEOUT_Mask
#define DBGMCU_APB_FZ_DBG_IWDG_STOP_Pos       ((uint32_t)12)                    /* Debug independent watchdog stopped when core is halted */
#define DBGMCU_APB_FZ_DBG_IWDG_STOP_Mask      (((uint32_t)0x01) << 12)
#define DBGMCU_APB_FZ_DBG_IWDG_STOP           DBGMCU_APB_FZ_DBG_IWDG_STOP_Mask
#define DBGMCU_APB_FZ_DBG_WWDG_STOP_Pos       ((uint32_t)11)                    /* Debug window watchdog stopped when core is halted */
#define DBGMCU_APB_FZ_DBG_WWDG_STOP_Mask      (((uint32_t)0x01) << 11)
#define DBGMCU_APB_FZ_DBG_WWDG_STOP           DBGMCU_APB_FZ_DBG_WWDG_STOP_Mask
#define DBGMCU_APB_FZ_DBG_TIM6_STOP_Pos       ((uint32_t)4)                     /* TIM6 counter stopped when core is halted */
#define DBGMCU_APB_FZ_DBG_TIM6_STOP_Mask      (((uint32_t)0x01) << 4)
#define DBGMCU_APB_FZ_DBG_TIM6_STOP           DBGMCU_APB_FZ_DBG_TIM6_STOP_Mask
#define DBGMCU_APB_FZ_DBG_TIM2_STOP_Pos       ((uint32_t)1)                     /* TIM2 counter stopped when core is halted */
#define DBGMCU_APB_FZ_DBG_TIM2_STOP_Mask      (((uint32_t)0x01) << 1)
#define DBGMCU_APB_FZ_DBG_TIM2_STOP           DBGMCU_APB_FZ_DBG_TIM2_STOP_Mask
#define DBGMCU_APB_FZ_DBG_TIM1_STOP_Pos       ((uint32_t)0)                     /* TIM1 counter stopped when core is halted */
#define DBGMCU_APB_FZ_DBG_TIM1_STOP_Mask      (((uint32_t)0x01) << 0)
#define DBGMCU_APB_FZ_DBG_TIM1_STOP           DBGMCU_APB_FZ_DBG_TIM1_STOP_Mask

/******************************** DBGMCU->ENGR_IDCODE  **********************************/
#define DBGMCU_ENGR_IDCODE_DEV_ID2_Pos        ((uint32_t)16)                    /* Device identifier 2 */
#define DBGMCU_ENGR_IDCODE_DEV_ID2_Mask       (((uint32_t)0xFFFF) << 16)
#define DBGMCU_ENGR_IDCODE_DEV_ID2            DBGMCU_ENGR_IDCODE_DEV_ID2_Mask
#define DBGMCU_ENGR_IDCODE_ENG_ID_Pos         ((uint32_t)0)                     /* Chip identifier */
#define DBGMCU_ENGR_IDCODE_ENG_ID_Mask        (((uint32_t)0x0FFF) << 0)
#define DBGMCU_ENGR_IDCODE_ENG_ID             DBGMCU_ENGR_IDCODE_ENG_ID_Mask
#define DBGMCU_ENGR_IDCODE_ENG_ID_0           (((uint32_t)0x1))
#define DBGMCU_ENGR_IDCODE_ENG_ID_1           (((uint32_t)0x2))
#define DBGMCU_ENGR_IDCODE_ENG_ID_2           (((uint32_t)0x4))
#define DBGMCU_ENGR_IDCODE_ENG_ID_3           (((uint32_t)0x8))
#define DBGMCU_ENGR_IDCODE_ENG_ID_4           (((uint32_t)0x10))
#define DBGMCU_ENGR_IDCODE_ENG_ID_5           (((uint32_t)0x20))
#define DBGMCU_ENGR_IDCODE_ENG_ID_6           (((uint32_t)0x40))
#define DBGMCU_ENGR_IDCODE_ENG_ID_7           (((uint32_t)0x80))
#define DBGMCU_ENGR_IDCODE_ENG_ID_8           (((uint32_t)0x100))
#define DBGMCU_ENGR_IDCODE_ENG_ID_9           (((uint32_t)0x200))
#define DBGMCU_ENGR_IDCODE_ENG_ID_10          (((uint32_t)0x400))
#define DBGMCU_ENGR_IDCODE_ENG_ID_11          (((uint32_t)0x800))

/*****************************************************************************************
*                     Peripheral Base Address and Peripheral Define                      *
*****************************************************************************************/
#define FLASH_RBASE                           ((uint32_t)0x40022000)
#define FLASH                                 ((FLASH_TypeDef *)FLASH_RBASE)

#define OB_BASE               				  ((uint32_t)0x1FFFF000U)       /*!< FLASH Option Bytes base address */
#define OB                  				  ((OB_TypeDef *) OB_BASE) 

#define CRC_BASE                              ((uint32_t)0x40023000)
#define CRC                                   ((CRC_TypeDef *)CRC_BASE)

#define PWR_BASE                              ((uint32_t)0x40007000)
#define PWR                                   ((PWR_TypeDef *)PWR_BASE)

#define RCC_BASE                              ((uint32_t)0x40021000)
#define RCC                                   ((RCC_TypeDef *)RCC_BASE)

#define SYSCFG_BASE                           ((uint32_t)0x40010000)
#define SYSCFG                                ((SYSCFG_TypeDef *)SYSCFG_BASE)

#define GPIOA_BASE                            ((uint32_t)0x48000000)
#define GPIOA                                 ((GPIO_TypeDef *)GPIOA_BASE)

#define GPIOB_BASE                            ((uint32_t)0x48000400)
#define GPIOB                                 ((GPIO_TypeDef *)GPIOB_BASE)

#define GPIOD_BASE                            ((uint32_t)0x48000C00)
#define GPIOD                                 ((GPIO_TypeDef *)GPIOD_BASE)

#define GPIOC_BASE                            ((uint32_t)0x48000800)
#define GPIOC                                 ((GPIO_TypeDef *)GPIOC_BASE)

#define IOMUX_BASE                            ((uint32_t)0x40017C00)
#define IOMUX                                 ((IOMUX_TypeDef *)IOMUX_BASE)

#define EXTI_BASE                             ((uint32_t)0x40010400)
#define EXTI                                  ((EXTI_TypeDef *)EXTI_BASE)

#define ADC_BASE                              ((uint32_t)0x40012400)
#define ADC                                   ((ADC_TypeDef *)ADC_BASE)

#define TIM1_BASE                             ((uint32_t)0x40012C00)
#define TIM1                                  ((TIM_TypeDef *)TIM1_BASE)

#define TIM2_BASE                             ((uint32_t)0x40000000)
#define TIM2                                  ((TIM_TypeDef *)TIM2_BASE)

#define TIM6_BASE                             ((uint32_t)0x40001000)
#define TIM6                                  ((TIM_TypeDef *)TIM6_BASE)

#define AWUT_BASE                             ((uint32_t)0x40007800)
#define AWUT                                  ((AWUT_TypeDef *)AWUT_BASE)

#define IWDG_BASE                             ((uint32_t)0x40003000)
#define IWDG                                  ((IWDG_TypeDef *)IWDG_BASE)

#define WWDG_BASE                             ((uint32_t)0x40002C00)
#define WWDG                                  ((WWDG_TypeDef *)WWDG_BASE)

#define UART1_BASE                            ((uint32_t)0x40013800)
#define UART1                                 ((UART_TypeDef *)UART1_BASE)

#define UART2_BASE                            ((uint32_t)0x40013C00)
#define UART2                                 ((UART_TypeDef *)UART2_BASE)

#define I2C_BASE                              ((uint32_t)0x40005400)
#define I2C                                   ((I2C_TypeDef *)I2C_BASE)

#define SPI_BASE                              ((uint32_t)0x40013000)
#define SPI                                   ((SPI_TypeDef *)SPI_BASE)



#define UID_BASE                             ((uint32_t)0x1FFFF128) 

#define DBGMCU_BASE                           ((uint32_t)0x40015800)
#define DBGMCU                                ((DBGMCU_TypeDef *)DBGMCU_BASE)

/*****************************************************************************************
*                         End of section using anonymous unions                          *
*****************************************************************************************/
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
/* leave anonymous unions enabled */
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
/* anonymous unions are enabled by default */
#elif defined (__TMS470__)
/* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
/* anonymous unions are enabled by default */
#endif
/*****************************************************************************************
*                                     Exported macro                                     *
*****************************************************************************************/
#define SET_BIT(REG, BIT)     ((REG) |= (BIT))
#define CLEAR_BIT(REG, BIT)   ((REG) &= ~(BIT))
#define READ_BIT(REG, BIT)    ((REG) & (BIT))
#define CLEAR_REG(REG)        ((REG) = (0x0))
#define WRITE_REG(REG, VAL)   ((REG) = (VAL))
#define READ_REG(REG)         ((REG))
#define POSITION_VAL(VAL)     (__CLZ(__RBIT(VAL)))
#define MODIFY_REG(REG, CLEARMASK, SETMASK)  WRITE_REG((REG), (((READ_REG(REG)) & (~(CLEARMASK))) | (SETMASK)))


#include "hk32f0301mxxc_def.h"
#include "hk32f0301mxxc_conf.h"
#include "core_cm0.h"
#ifdef __cplusplus
}
#endif  /* End of __cplusplus */

#endif  /* End of __HK32F0301MxxC__ */

/***************************** (C) COPYRIGHT HKMicroChip  *******************************/
